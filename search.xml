<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jQuery框架(DOM)</title>
      <link href="/2024/07/15/jQuery%E6%A1%86%E6%9E%B6(DOM)/"/>
      <url>/2024/07/15/jQuery%E6%A1%86%E6%9E%B6(DOM)/</url>
      
        <content type="html"><![CDATA[<p>jQuery 是一个流行的 JavaScript 库，用于简化客户端脚本编写和 DOM 操作。它提供了许多实用的功能和方法，使得在网页中使用 JavaScript 更加便捷和高效，同时理解Web的底层DOM原理。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2024/07/13/JavaScript/"/>
      <url>/2024/07/13/JavaScript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript是一种函数优先特性的轻量级、解释型或者说即时编译型的编程语言。JavaScript 是网页交互的核心，通过本课程，您将学会如何运用 JavaScript 实现动态效果和用户交互。从简单的页面特效到复杂的数据处理，JavaScript 可以让您的网页更加生动有趣。您将掌握 JavaScript 的基本语法、DOM 操作、事件处理等知识，为您打开创造丰富互动网页的大门。</p><h1 id="给代码添加注释"><a href="#给代码添加注释" class="headerlink" title="给代码添加注释"></a>给代码添加注释</h1><p>JavaScript有两种写注释的方法。</p><ul><li>使用 &#x2F;&#x2F; 注释掉当前行的代码。 这是一个行内注释：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// This is an in-line comment.</span><br></pre></td></tr></table></figure></li><li>你也可以使用多行注释来注释你的代码，使用 &#x2F;* 开始， *&#x2F; 结束。 这是一个多行注释：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* This is a</span><br><span class="line">multi-line comment */</span><br></pre></td></tr></table></figure></li></ul><h1 id="let与const"><a href="#let与const" class="headerlink" title="let与const"></a>let与const</h1><p>let 与 var的区别与使用：</p><p>使用 var 关键字声明变量的最大问题之一是你可以轻松覆盖变量声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var camper = &quot;James&quot;;</span><br><span class="line">var camper = &quot;David&quot;;</span><br><span class="line">console.log(camper);</span><br></pre></td></tr></table></figure><p>在上面的代码中，camper 变量最初声明为 James，然后被覆盖为 David。 然后控制台显示字符串 David。</p><p>在小型应用程序中，你可能不会遇到此类问题。 但是随着你的代码库变大，你可能会意外地覆盖一个你不打算覆盖的变量。 由于此行为不会引发错误，因此搜索和修复错误变得更加困难。</p><p>ES6 中引入了一个名为 let 的关键字，这是对 JavaScript 的一次重大更新，以解决与 var 关键字有关的潜在问题。 你将在后面的挑战中了解其他 ES6 特性。</p><p>如果将上面代码中的 var 替换为 let ，则会导致错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let camper = &quot;James&quot;;</span><br><span class="line">let camper = &quot;David&quot;;</span><br></pre></td></tr></table></figure><p>该错误可以在你的浏览器控制台中看到。</p><p>所以不像 var，当你使用 let 时，同名的变量只能声明一次。</p><p>const的使用：</p><p>关键字 let 并不是声明变量的唯一新方法。 在 ES6 中，你还可以使用 const 关键字声明变量。</p><p>const 具有 let 的所有出色功能，另外还有一个额外的好处，即使用 const 声明的变量是只读的。 它们是一个常量值，这意味着一旦一个变量被赋值为 const，它就不能被重新赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const FAV_PET = &quot;Cats&quot;;</span><br><span class="line">FAV_PET = &quot;Dogs&quot;;</span><br></pre></td></tr></table></figure><p>由于重新分配 FAV_PET 的值，控制台将显示错误。</p><p>你应该始终使用 const 关键字命名不想重新分配的变量。 这有助于避免给一个常量进行额外的再次赋值。</p><p>注意： 通常，开发者会用大写字母作为常量标识符，用小写字母或者驼峰命名作为变量（对象或数组）标识符。 你将在后面的挑战中了解有关对象、数组以及不可变和可变值的更多信息。 同样在后面的挑战中，你将看到大写、小写或驼峰式变量标识符的示例。</p><p>let与const</p><p>更改代码，以便使用 let 或 const 声明所有变量。 当你想要改变变量时使用 let，当你想要变量保持不变时使用 const。 此外，重命名使用 const 声明的变量以符合惯例。 请勿更改分配给变量的字符串。</p><h1 id="理解未初始化的变量"><a href="#理解未初始化的变量" class="headerlink" title="理解未初始化的变量"></a>理解未初始化的变量</h1><p>当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值 。 当你对一个值为 的变量进行运算操作的时候，算出来的结果将会是 NaN，它的意思是 “Not a Number”。 如果你用 变量连接一个字符串，你将得到一个 的 字符串。</p><p>定义 3 个变量 a、b、c，并且分别给他们赋值：5、10、”I am a”，这样它们值就不会是 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line">let a=5;</span><br><span class="line">let b=10;</span><br><span class="line">let c=&quot;I am a&quot;;</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">a = a + 1;</span><br><span class="line">b = b + 5;</span><br><span class="line">c = c + &quot; String!&quot;;</span><br></pre></td></tr></table></figure><h1 id="js七种数据类型"><a href="#js七种数据类型" class="headerlink" title="js七种数据类型"></a>js七种数据类型</h1><p>JavaScript中有七种主要的数据类型，分为两类：原始数据类型和引用数据类型。下面我会详细介绍它们以及它们的常见用法和示例：</p><p><em><strong>原始数据类型：</strong></em></p><p>字符串 (String)：字符串是存储字符（比如 “Hello, World!”）的变量。字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;Hello, World!&quot;;</span><br><span class="line">console.log(str); // 输出: Hello, World!</span><br></pre></td></tr></table></figure><p>常见的字符串操作有：</p><p>连接：使用加号 (+) 将两个字符串连接起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str1 = &quot;Hello&quot;;</span><br><span class="line">let str2 = &quot;World&quot;;</span><br><span class="line">let result = str1 + &quot;, &quot; + str2;</span><br><span class="line">console.log(result); // 输出: Hello, World</span><br></pre></td></tr></table></figure><p>长度：使用 length 属性获取字符串的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript&quot;;</span><br><span class="line">console.log(str.length); // 输出: 10</span><br></pre></td></tr></table></figure><p>提取字符：使用方括号加索引来提取字符串中的特定字符（索引从0开始）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript&quot;;</span><br><span class="line">console.log(str[0]); // 输出: J</span><br><span class="line">console.log(str[4]); // 输出: S</span><br></pre></td></tr></table></figure><p>查找：使用 indexOf() 方法查找子字符串在主字符串中的位置（如果存在）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript&quot;;</span><br><span class="line">console.log(str.indexOf(&quot;Script&quot;)); // 输出: 4</span><br></pre></td></tr></table></figure><p>替换：使用 replace() 方法替换字符串中的部分内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript is awesome&quot;;</span><br><span class="line">let newStr = str.replace(&quot;awesome&quot;, &quot;great&quot;);</span><br><span class="line">console.log(newStr); // 输出: JavaScript is great</span><br></pre></td></tr></table></figure><p>数字 (Number)：JavaScript 只有一种数字类型。数字可以带小数点，也可以不带。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let x1=34.00;      //使用小数点来写</span><br><span class="line">let x2=34;             //不使用小数点来写</span><br></pre></td></tr></table></figure><p>布尔值 (Boolean)：用于表示逻辑上的 true 或 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let isTrue = true;</span><br><span class="line">if (isTrue) &#123;</span><br><span class="line">  console.log(&quot;It&#x27;s true!&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log(&quot;It&#x27;s false!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空值 (null)：表示一个空值对象，通常用于初始化变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let emptyValue = null;</span><br><span class="line">console.log(emptyValue); // 输出: null</span><br></pre></td></tr></table></figure><p>未定义 ()：表示一个未赋值的变量或未声明的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let notDefined;</span><br><span class="line">console.log(notDefined); // 输出: </span><br></pre></td></tr></table></figure><p><em><strong>引用数据类型：</strong></em></p><p>对象 (Object)：用于存储多个值的集合，每个值都有对应的键。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let person = &#123;</span><br><span class="line">  name: &quot;John&quot;,</span><br><span class="line">  age: 30,</span><br><span class="line">  isAdmin: false</span><br><span class="line">&#125;;</span><br><span class="line">console.log(person.name); // 输出: John</span><br></pre></td></tr></table></figure><p>数组 (Array)：用于存储多个值的有序集合，每个值都有对应的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let numbers = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(numbers.length); // 输出: 5</span><br></pre></td></tr></table></figure><p><strong>typeof 获取数据类型：</strong>我们已经学完了js的七种数据类型，在js中，定义的变量是弱类型的，那么我们该通过什么样的方式来知道变量的类型呢。typeof 是 JavaScript 中的一个运算符，用于获取操作数的数据类型。它返回一个表示操作数类型的字符串。</p><p>基本用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof operand;//operand：要检测其类型的操作数。</span><br></pre></td></tr></table></figure><p>返回值：</p><p>：如果操作数是未定义的值。<br>boolean：如果操作数是布尔值。<br>number：如果操作数是数值。<br>string：如果操作数是字符串。<br>bigint：如果操作数是大整数。<br>symbol：如果操作数是符号。<br>object：如果操作数是对象或 null。<br>function：如果操作数是函数。</p><p><em><strong>注意事项：</strong></em></p><p>typeof null 返回 “object”，这是 JavaScript 的一个历史遗留问题，因为在 JavaScript 早期版本中，null 被错误地归类为对象。这个问题由来已久，为了保持向后兼容性，没有修复这个问题。</p><p>对于大多数数据类型，typeof 可以很好地检测其类型。但是对于对象和数组，它只能告诉我们它们是对象，无法进一步区分具体的类型。因此，当需要详细了解对象的类型时，通常需要使用其他方法，比如 instanceof 运算符或检查对象的构造函数。</p><p>instanceof：instanceof 是 JavaScript 中的一个运算符，用于检测一个对象是否是某个构造函数的实例。它用于检查一个对象是否是指定类（或类的原型链上的类）的实例，返回一个布尔值。</p><p>基本用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object instanceof constructor</span><br></pre></td></tr></table></figure><p>object：要检查的对象。<br>constructor：要检查对象是否是其实例的构造函数。<br>返回值：instanceof运算符返回一个布尔值，表示对象是否是指定构造函数的实例。如果 object 是 constructor 的实例，则返回 true；否则返回 false。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;&#125;;</span><br><span class="line">console.log(obj instanceof Object); // true</span><br><span class="line"></span><br><span class="line">const arr = [];</span><br><span class="line">console.log(arr instanceof Array); // true</span><br><span class="line">console.log(arr instanceof Object); // true，数组也是对象的一种</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong>虽然 instanceof 可以用来检测数组，但是需要注意的是，如果在多个全局执行上下文之间使用了多个 JavaScript 引擎实例（如在 Web Worker 中），那么可能会出现 instanceof不正确的情况。因此，如果需要检测对象是否是数组，最好使用 Array.isArray() 方法，它更可靠。</p><p>js七种数据类型</p><p>定义 3 个变量 a、b、c，并且分别给他们赋值：5、10、”I am a”，这样它们值就不会是 了。</p><h1 id="使用模板字面量创建字符串"><a href="#使用模板字面量创建字符串" class="headerlink" title="使用模板字面量创建字符串"></a>使用模板字面量创建字符串</h1><p>模板字符串是 ES6 的另外一项新的功能。 这是一种可以轻松构建复杂字符串的方法。</p><p>模板字符串可以使用多行字符串和字符串插值功能。</p><p>请看以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;Zodiac Hasbro&quot;,</span><br><span class="line">  age: 56</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const greeting = `Hello, my name is $&#123;person.name&#125;!</span><br><span class="line">I am $&#123;person.age&#125; years old.`;</span><br><span class="line"></span><br><span class="line">console.log(greeting);</span><br></pre></td></tr></table></figure><p>控制台将显示字符串 Hello, my name is Zodiac Hasbro! 和 I am 56 years old.。</p><p>这里发生了许多事情。 首先，这个例子使用反引号（&#96;），而不是引号（’ 或者 “）将字符串括起来。 其次，注意代码和输出中的字符串都是多行的。 不需要在字符串中插入 \n。 上面使用的 ${variable} 语法是一个占位符。 这样一来，你将不再需要使用 + 运算符来连接字符串。 当需要在字符串里增加变量的时候，你只需要在变量的外面括上 ${ 和 }，并将其放在模板字符串里就可以了。 同样，你可以在字符串中包含其他表达式，例如 ${a + b}。 这个新的方式使你可以更灵活地创建复杂的字符串。</p><p>使用模板字面量创建字符串</p><p>使用模板字符串的反引号的语法创建一个包含条目（li）字符串的数组。 每个条目应该是 result 对象 failure 属性的数组内的元素，并具有 class 属性，值为 text-warning。 makeList 函数应该返回列表项字符串的数组。</p><p>使用遍历方法（可以是任意形式的循环）输出指定值（如下）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#x27;&lt;li class=&quot;text-warning&quot;&gt;no-var&lt;/li&gt;&#x27;,</span><br><span class="line">  &#x27;&lt;li class=&quot;text-warning&quot;&gt;var-on-top&lt;/li&gt;&#x27;,</span><br><span class="line">  &#x27;&lt;li class=&quot;text-warning&quot;&gt;linebreak&lt;/li&gt;&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const result = &#123;</span><br><span class="line">  success: [&quot;max-length&quot;, &quot;no-amd&quot;, &quot;prefer-arrow-functions&quot;],</span><br><span class="line">  failure: [&quot;no-var&quot;, &quot;var-on-top&quot;, &quot;linebreak&quot;],</span><br><span class="line">  skipped: [&quot;no-extra-semi&quot;, &quot;no-dup-keys&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">function makeList(arr) &#123;</span><br><span class="line">  // Only change code below this line</span><br><span class="line"> const failureItems = [];</span><br><span class="line">  for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    failureItems.push(`&lt;li class=&quot;text-warning&quot;&gt;$&#123;arr[i]&#125;&lt;/li&gt;`);</span><br><span class="line">  &#125;</span><br><span class="line">  // Only change code above this line</span><br><span class="line"></span><br><span class="line">  return failureItems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const failuresList = makeList(result.failure);</span><br></pre></td></tr></table></figure><h1 id="使用-JavaScript-数组将多个值存储在一个变量中"><a href="#使用-JavaScript-数组将多个值存储在一个变量中" class="headerlink" title="使用 JavaScript 数组将多个值存储在一个变量中"></a>使用 JavaScript 数组将多个值存储在一个变量中</h1><p>使用 JavaScript 数组将多个值存储在一个变量中：</p><p>使用数组（array），我们可以在一个地方存储多个数据。</p><p>以左方括号开始定义一个数组，以右方括号结束，里面每个元素之间用逗号隔开，例如：</p><p>const sandwich &#x3D; [“peanut butter”, “jelly”, “bread”];</p><p>将一个数组嵌套在另一个数组中：<br>您也可以在其他数组中嵌套数组，如：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const teams = [[&quot;Bulls&quot;, 23], [&quot;White Sox&quot;, 45]];</span><br></pre></td></tr></table></figure><p>这也叫做多维数组（multi-dimensional array）。</p><ul><li>通过索引访问数组中的数据：</li></ul><p>我们可以使用索引（indexes）来访问数组中的数据。</p><p>数组索引与字符串一样使用方括号来表示，不同的是，它们不是指定字符，而是指定数组中的一个条目。 数组索引与字符串索引一样是从 0 开始（zero-based）的，所以数组中第一个元素的索引编号是 0。</p><p>示例：</p><p>const array &#x3D; [50, 60, 70];</p><p>console.log(array[0]);</p><p>const data &#x3D; array[1];</p><p>console.log(array[0]) 打印 50，<br>data 的值为 60。</p><ul><li>通过索引修改数组中的数据：</li></ul><p>与字符串不同，数组的条目是可变的并且可以自由更改，即使数组是用 const 声明的。</p><p>示例：</p><p>const ourArray &#x3D; [50, 40, 30];<br>ourArray[0] &#x3D; 15;<br>ourArray 值为 [15, 40, 30]。</p><p>注意： 数组名与方括号之间不应该有任何空格，比如 array [0] 。 尽管 JavaScript 能够正确处理这种情况，但是当其他程序员阅读你写的代码时，这可能让他们感到困惑。</p><ul><li>使用索引访问多维数组：</li></ul><p>我们可以把多维数组看作成是数组中的数组。 当你使用括号访问你的数组时，第一组括号指的是最外层（第一层）数组中的条目，而每一对额外的括号指的是里面下一层的条目。</p><p>例如：</p><p>const arr &#x3D;<br>[<br>[1, 2, 3],<br>[4, 5, 6],<br>[7, 8, 9],<br>[[10, 11, 12], 13, 14]<br>];</p><p>const subarray &#x3D; arr[3];</p><p>const nestedSubarray &#x3D; arr[3][0];</p><p>const element &#x3D; arr[3][0][1];</p><p>在这个例子中，subarray 的值为 [[10, 11, 12], 13, 14]，<br>nestedSubarray 的值为 [10, 11, 12]，element 的值为 11 。</p><p>注意：数组名与方括号之间不应该有任何空格，比如 array [0][0] 甚至是 array [0] [0] 都是不允许的。 尽管 JavaScript 能够正确处理这种情况，但是当其他程序员阅读你写的代码时，这可能让他们感到困惑。</p><ul><li>使用 push 方法操作数组：</li></ul><p>将数据加到数组末尾的一种简单方法是通过push()方法。</p><p>push()方法接受一个或多个参数，并按照它们出现的顺序将它们附加到数组的末尾。它返回数组的新长度。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [1, 2, 3];</span><br><span class="line">arr1.push(4, 5);</span><br><span class="line"></span><br><span class="line">const arr2 = [&quot;Stimpson&quot;,&quot;J&quot;, &quot;cat&quot;];</span><br><span class="line">arr2.push([&quot;happy&quot;, &quot;joy&quot;]);</span><br><span class="line"></span><br><span class="line">arr1现在的值为[1,2,3,4,5]，arr2的值[“Stimpson”,“J”,“cat”,[“happy”,“joy”]]。</span><br></pre></td></tr></table></figure><ul><li>使用 pop 方法操作数组：</li></ul><p>改变数组中数据的另一种方法是用 .pop() 函数。</p><p>.pop() 函数用来弹出一个数组末尾的值。 我们可以把这个弹出的值赋给一个变量存储起来。 换句话说就是 .pop() 函数移除数组末尾的元素并返回这个元素。</p><p>数组中任何类型的元素（数值，字符串，甚至是数组）都可以被弹出来 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const threeArr = [1, 4, 6];</span><br><span class="line">const oneDown = threeArr.pop();</span><br><span class="line">console.log(oneDown);</span><br><span class="line">console.log(threeArr);</span><br><span class="line">第一个 console.log 将显示值 6，第二个将显示值 [1, 4]。</span><br></pre></td></tr></table></figure><ul><li>使用 shift 方法操作数组：</li></ul><p>pop() 函数用来移出数组中最后一个元素。 如果想要移出第一个元素要怎么办呢？</p><p>这时候我们就需要 .shift() 了。 它的工作原理就像 .pop()，但它移除的是第一个元素，而不是最后一个。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const ourArray = [&quot;Stimpson&quot;, &quot;J&quot;, [&quot;cat&quot;]];</span><br><span class="line">const removedFromOurArray = ourArray.shift();</span><br><span class="line">removedFromOurArray 值为 Stimpson，ourArray 值为 [&quot;J&quot;, [&quot;cat&quot;]]</span><br></pre></td></tr></table></figure><ul><li>使用 unshift 方法操作数组：</li></ul><p>不仅可以 shift（移出）数组中的第一个元素，也可以 unshift（移入）一个元素到数组的头部。</p><p>.unshift() 函数用起来就像 .push() 函数一样，但不是在数组的末尾添加元素，unshift() 在数组的头部添加元素。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const ourArray = [&quot;Stimpson&quot;, &quot;J&quot;, &quot;cat&quot;];</span><br><span class="line">ourArray.shift();</span><br><span class="line">ourArray.unshift(&quot;Happy&quot;);</span><br><span class="line">在 shift、ourArray 后值为 [&quot;J&quot;, &quot;cat&quot;]。 在 unshift、ourArray 后值为 [&quot;Happy&quot;, &quot;J&quot;, &quot;cat&quot;]。</span><br></pre></td></tr></table></figure><p>eg:</p><p>使用 JavaScript 数组将多个值存储在一个变量中</p><p>创建一个名叫 myList 的购物清单。 清单的数据格式就是多维数组。</p><p>每个子数组中的第一个元素应该是购买的物品名称。 第二个元素应该是物品的数量，类似于：</p><p>[“Chocolate Bar”, 15]<br>列表中应至少有 5 个子数组。</p><h1 id="用函数编写可重用代码"><a href="#用函数编写可重用代码" class="headerlink" title="用函数编写可重用代码"></a>用函数编写可重用代码</h1><p>在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个函数 （functions）中。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function functionName() &#123;</span><br><span class="line">  console.log(&quot;Hello World&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过函数名加上后面的小括号来调用（invoke）这个函数，就像这样： functionName(); 每次调用函数时，它都会在控制台上打印消息 Hello World。 每次调用函数时，大括号之间的所有代码都将被执行。</p><p>eg:</p><p>用函数编写可重用代码</p><p>先创建一个名为 reusableFunction 的函数，这个函数打印 Hi World 到控制台上。<br>然后调用这个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function  reusableFunction()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(&quot;Hi World&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reusableFunction();</span><br></pre></td></tr></table></figure><h1 id="将值传递给带有参数的函数"><a href="#将值传递给带有参数的函数" class="headerlink" title="将值传递给带有参数的函数"></a>将值传递给带有参数的函数</h1><p>函数的参数 （parameters）在函数调用中充当传入函数的输入占位符（也叫形参）。 函数调用时，参数可以为一个或多个。 调用函数时输入（或传递 “passed”）的实际值被称为参数（arguments）。</p><p>这是带有两个参数的函数，param1 和 param2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function testFun(param1, param2) &#123;</span><br><span class="line">  console.log(param1, param2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以调用 testFun，就像这样： testFun(“Hello”, “World”);。 我们传入了两个字符串参数， Hello 和 World。 在函数中，param1 等于字符串 Hello 以及 param2 等于字符串 World。 请注意，testFun 函数可以多次调用，每次调用时传递的参数会决定参数的实际值。</p><p>eg:</p><p>将值传递给带有参数的函数</p><p>创建一个名为 functionWithArgs 的函数，它可以接收两个参数，计算参数的和，将结果输出到控制台。<br>自己指定两个数字作为参数，运行函数 functionWithArgs。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function functionWithArgs(param1, param2) &#123;</span><br><span class="line">  console.log(param1+param2);</span><br><span class="line">&#125;</span><br><span class="line">functionWithArgs(1,3);</span><br><span class="line">functionWithArgs(7,9);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-函数的值传递与引用传递"><a href="#JavaScript-函数的值传递与引用传递" class="headerlink" title="JavaScript 函数的值传递与引用传递"></a>JavaScript 函数的值传递与引用传递</h1><p>函数参数的传递方式分为值传递（pass by value）和引用传递（pass by reference），它们在处理参数时有着不同的行为。</p><p>JavaScript 中的基本类型（如数字、字符串、布尔值等）是通过值传递的方式传递给函数的，而对象、数组等复杂类型则是通过引用传递的方式传递给函数的。因此，对于基本类型，函数内部对参数的修改不会影响到原始变量；而对于复杂类型，函数内部对参数的修改会影响到原始变量。</p><p><strong>值传递（Pass by Value）：</strong></p><p>在值传递中，函数参数的值被复制到了一个新的变量，函数内部对该变量的操作不会影响到原始变量的值。这意味着，对参数的任何修改都只会在函数内部生效，不会影响到函数外部的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function increment(num) &#123;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let x = 10;</span><br><span class="line">increment(x);</span><br><span class="line">console.log(x); // 输出 10，原始变量的值未改变</span><br></pre></td></tr></table></figure><p>在这个例子中，x 是一个数字，作为参数传递给 increment 函数时，num 接收了 x 的值的一个副本，所以在函数内部对 num 的修改不会影响到 x 的值。</p><p><strong>引用传递（Pass by Reference）：</strong></p><p>在引用传递中，函数参数接收的是原始值的内存地址（引用），而不是值本身的副本。这意味着，函数内部对参数的操作会直接影响到原始变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function addToEnd(arr, element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myArray = [1, 2, 3];</span><br><span class="line">addToEnd(myArray, 4);</span><br><span class="line">console.log(myArray); // 输出 [1, 2, 3, 4]，原始数组被修改</span><br></pre></td></tr></table></figure><p>在这个例子中，myArray 是一个数组，作为参数传递给 addToEnd 函数时，arr 接收了 myArray 的引用，所以在函数内部对 arr 的操作会直接修改原始数组 myArray。</p><p>区别总结：</p><p>值传递：传递的是值的副本，函数内部的操作不会影响到原始变量。<br>引用传递：传递的是值的引用，函数内部的操作会直接影响到原始变量。</p><p>JavaScript 函数的值传递与引用传递</p><p>在updateArray中修改代码，实现将myList的第三个元素，更改为tiger</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function updateArray(arr,index,element)&#123;</span><br><span class="line">// Setup</span><br><span class="line">arr[index]=element;   </span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myList = [&quot;cat&quot;,&quot;dog&quot;,&quot;t&quot;]</span><br><span class="line">updateArray(myList,2,&quot;tiger&quot;)</span><br><span class="line">console.log(myList)</span><br></pre></td></tr></table></figure><h1 id="使用-return-给函数返回值"><a href="#使用-return-给函数返回值" class="headerlink" title="使用 return 给函数返回值"></a>使用 return 给函数返回值</h1><p>我们可以通过函数的参数（arguments）把值传入函数， 也可以使用 return 语句把数据从一个函数中传出来。</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function plusThree(num) &#123;</span><br><span class="line">  return num + 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const answer = plusThree(5);</span><br><span class="line">//answer 的值为 8。</span><br></pre></td></tr></table></figure><p>plusThree 带有一个参数（argument）num，并返回（return）一个等于 num + 3 的值。</p><p>使用 return 给函数返回值</p><p>创建一个函数 timesFive 接收一个参数，把它乘以 5 之后返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function timesFive(num) &#123;</span><br><span class="line">  return num*5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timesFive(5);</span><br><span class="line">timesFive(2);</span><br><span class="line">timesFive(0);</span><br></pre></td></tr></table></figure><h1 id="使用箭头函数编写简洁的匿名函数"><a href="#使用箭头函数编写简洁的匿名函数" class="headerlink" title="使用箭头函数编写简洁的匿名函数"></a>使用箭头函数编写简洁的匿名函数</h1><p>在 JavaScript 里，我们会经常遇到不需要给函数命名的情况，尤其是在需要将一个函数作为参数传给另外一个函数的时候。 这时，我们会创建匿名函数。 因为这些函数不会在其他地方复用，所以我们不需要给它们命名。</p><p>这种情况下，我们通常会使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const myFunc = function() &#123;</span><br><span class="line">  const myVar = &quot;value&quot;;</span><br><span class="line">  return myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 提供了其他写匿名函数的方式的语法糖。 你可以使用箭头函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const myFunc = () =&gt; &#123;</span><br><span class="line">  const myVar = &quot;value&quot;;</span><br><span class="line">  return myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不需要函数体，只返回一个值的时候，箭头函数允许你省略 return 关键字和外面的大括号。 这样就可以将一个简单的函数简化成一个单行语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myFunc = () =&gt; &quot;value&quot;;</span><br></pre></td></tr></table></figure><p>这段代码默认会返回字符串 value。</p><p>使用箭头函数编写简洁的匿名函数<br>使用箭头函数的语法重写赋给 magic 变量的函数，使其返回一个新的 Date() new Date()。 同时不要用 var 关键字来定义任何变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const magic = () =&gt; new Date();</span><br></pre></td></tr></table></figure><h1 id="编写带参数的箭头函数"><a href="#编写带参数的箭头函数" class="headerlink" title="编写带参数的箭头函数"></a>编写带参数的箭头函数</h1><p>和一般的函数一样，你也可以给箭头函数传递参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const doubler = (item) =&gt; item * 2;</span><br><span class="line">doubler(4);</span><br></pre></td></tr></table></figure><p>doubler(4) 将返回 8。</p><p>如果箭头函数只有一个参数，则可以省略参数外面的括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const doubler = item =&gt; item * 2;</span><br></pre></td></tr></table></figure><p>可以给箭头函数传递多个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const multiplier = (item, multi) =&gt; item * multi;</span><br><span class="line">multiplier(4, 2);</span><br></pre></td></tr></table></figure><p>multiplier(4, 2) 将返回 8。</p><p>编写带参数的箭头函数</p><p>使用箭头函数的语法重写 myConcat 函数，将 arr2 的内容添加到 arr1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const myConcat = (arr1, arr2) =&gt; arr1.concat(arr2);</span><br><span class="line"></span><br><span class="line">console.log(myConcat([1, 2], [3, 4, 5]));</span><br></pre></td></tr></table></figure><h1 id="用-ES6-编写简洁的函数声明"><a href="#用-ES6-编写简洁的函数声明" class="headerlink" title="用 ES6 编写简洁的函数声明"></a>用 ES6 编写简洁的函数声明</h1><p>在 ES5 中，当我们需要在对象中定义一个函数的时候，必须像这样使用 function 关键字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;Taylor&quot;,</span><br><span class="line">  sayHello: function() &#123;</span><br><span class="line">    return `Hello! My name is $&#123;this.name&#125;.`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用 ES6 的语法在对象中定义函数的时候，可以删除 function 关键词和冒号。 请看以下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;Taylor&quot;,</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    return `Hello! My name is $&#123;this.name&#125;.`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用 ES6 编写简洁的函数声明</p><p>使用以上这种简短的语法，重构在 bicycle 对象中的 setGear 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line">const bicycle = &#123;</span><br><span class="line">  gear: 2,</span><br><span class="line">  setGear(newGear) &#123;</span><br><span class="line">    this.gear = newGear;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// Only change code above this line</span><br><span class="line">bicycle.setGear(3);</span><br><span class="line">console.log(bicycle.gear);</span><br></pre></td></tr></table></figure><h1 id="全局作用域和window"><a href="#全局作用域和window" class="headerlink" title="全局作用域和window"></a>全局作用域和window</h1><p>在 JavaScript 中，作用域涉及到变量的作用范围。 在函数外定义的变量具有 全局 作用域。 这意味着，具有全局作用域的变量可以在代码的任何地方被调用。</p><p>未使用 let 或 const 关键字声明的变量会在 global 范围内自动创建。 当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。 你应该总是用 let 或 const 声明你的变量。</p><p><strong>全局作用域与 window：</strong>在 JavaScript 中，如果变量或函数在任何函数体外部定义，则它们属于全局作用域。这意味着它们可以在代码的任何地方被访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const globalVar = &#x27;Hello&#x27;;</span><br><span class="line"></span><br><span class="line">function sayHello() &#123;</span><br><span class="line">    console.log(globalVar); // 可以访问全局变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello(); // 输出 &quot;Hello&quot;</span><br></pre></td></tr></table></figure><p>window 对象：在浏览器中，全局作用域中定义的所有变量和函数都是 window 对象的属性和方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(window.globalVar); // &quot;Hello&quot;</span><br></pre></td></tr></table></figure><p>全局作用域和window</p><p>使用 let 或 const，在任何函数之外声明一个名为 myGlobal 的全局变量。 并给它一个初始值 10。</p><p>在函数 fun1中，赋值 5 给 oopsGlobal，不使用 var、let 或 const 关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Declare the myGlobal variable below this line</span><br><span class="line"> let myGlobal=10;</span><br><span class="line"></span><br><span class="line">function fun1() &#123;</span><br><span class="line">  // Assign 5 to oopsGlobal here</span><br><span class="line">  oopsGlobal=5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">function fun2() &#123;</span><br><span class="line">  let output = &quot;&quot;;</span><br><span class="line">  if (typeof myGlobal != &quot;undefined&quot;) &#123;</span><br><span class="line">    output += &quot;myGlobal: &quot; + myGlobal;</span><br><span class="line">  &#125;</span><br><span class="line">  if (typeof oopsGlobal != &quot;undefined&quot;) &#123;</span><br><span class="line">    output += &quot; oopsGlobal: &quot; + oopsGlobal;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="局部作用域和函数"><a href="#局部作用域和函数" class="headerlink" title="局部作用域和函数"></a>局部作用域和函数</h1><p>在一个函数内声明的变量，以及该函数的参数都具有局部（local）作用域。 这意味着它们只在该函数内可见。</p><p>这是在函数 myTest 内声明局部变量 loc 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function myTest() &#123;</span><br><span class="line">  const loc = &quot;foo&quot;;</span><br><span class="line">  console.log(loc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line">console.log(loc);</span><br></pre></td></tr></table></figure><p>myTest() 函数调用将在控制台中显示字符串 foo。 console.log(loc) 行（在 myTest 函数之外）将抛出错误，因为 loc 未在函数之外定义。</p><p>局部作用域和函数</p><p>编辑器有两个 console.log 来帮助您了解正在发生的事情。 检查控制台的代码输出以查看它是如何改变的。 在 myLocalScope 中声明一个本地变量 myVar 并运行测试。</p><p>注意： 控制台仍将显示 ReferenceError: myVar is not defined，但这不会导致测试失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function myLocalScope() &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  const myVar=520;</span><br><span class="line">  console.log(&#x27;inside myLocalScope&#x27;, myVar);</span><br><span class="line">&#125;</span><br><span class="line">myLocalScope();</span><br></pre></td></tr></table></figure><h1 id="创建-JavaScript-对象"><a href="#创建-JavaScript-对象" class="headerlink" title="创建 JavaScript 对象"></a>创建 JavaScript 对象</h1><p>你之前可能听过 object 这个词。</p><p>对象和 arrays 类似，区别在于数组使用索引来访问和修改数据，而对象中的数据是通过 properties 访问的。</p><p>对象非常适合用来存储结构化数据，可以表示真实世界中的物体，比如一只猫。</p><p>这里是一个猫对象的样本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const cat = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Whiskers&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;enemies&quot;: [&quot;Water&quot;, &quot;Dogs&quot;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此示例中，所有属性都存储为字符串，例如 name、legs 和 tails。 然而，你也可以使用数字作为属性。 你甚至可以省略单字字符串属性中的引号，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const anotherObject = &#123;</span><br><span class="line">  make: &quot;Ford&quot;,</span><br><span class="line">  5: &quot;five&quot;,</span><br><span class="line">  &quot;model&quot;: &quot;focus&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然而，如果你的对象有非字符串属性的话，JavaScript 会自动将它们转为字符串。</p><p>创建 JavaScript 对象</p><p>确保对象表示一只名为 myDog 的狗，包含属性 name（字符串）、legs、tails 和 friends。</p><p>你可以随意设置这些对象的属性值，只要 name 是字符串，legs 和 tails 是数字，friends 是数组即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const myDog = &#123;</span><br><span class="line">  // Only change code below this line</span><br><span class="line">  &quot;name&quot;:&quot;abc&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;sss&quot;, &quot;wwww&quot;]</span><br><span class="line">  // Only change code above this line</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h1><p>运算符 &#x3D; 用于给 JavaScript 变量赋值。</p><p>算术运算符 + 用于把值加起来。</p><p>let y&#x3D;5;<br>let z&#x3D;2;<br>let x&#x3D;y+z;<br>在以上语句执行后，x 的值是：7</p><p>JavaScript 算术运算符：</p><p>与&#x2F;或值之间的算术运算。 y&#x3D;5，下面的表格解释了这些算术运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">运算符描述例子X 运算结果Y 运算结果</span><br><span class="line">+加法x=y+275</span><br><span class="line">-减法x=y-235</span><br><span class="line">*乘法x=y*2105</span><br><span class="line">/除法x=y/22.55</span><br><span class="line">%取模（余数）x=y%215</span><br><span class="line">++自增x=++y66</span><br><span class="line">x=y++56</span><br><span class="line">--自减x=--y44</span><br><span class="line">x=y--54</span><br></pre></td></tr></table></figure><p>JavaScript 赋值运算符：</p><p>赋值运算符用于给 JavaScript 变量赋值。</p><p>给定 x&#x3D;10 和 y&#x3D;5，下面的表格解释了赋值运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符例子等同于运算结果</span><br><span class="line">=x=yx=5</span><br><span class="line">+=x+=yx=x+yx=15</span><br><span class="line">-=x-=yx=x-yx=5</span><br><span class="line">*=x*=yx=x*yx=50</span><br><span class="line">/=x/=yx=x/yx=2</span><br><span class="line">%=x%=yx=x%yx=0</span><br></pre></td></tr></table></figure><p>用于字符串的 + 运算符：</p><p>+运算符用于把文本值或字符串变量加起来（连接起来）。</p><p>如需把两个或多个字符串变量连接起来，请使用 + 运算符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">txt1=&quot;What a very&quot;;</span><br><span class="line">txt2=&quot;nice day&quot;;</span><br><span class="line">txt3=txt1+txt2;</span><br><span class="line">txt3 运算结果：What a verynice day</span><br></pre></td></tr></table></figure><p>对字符串和数字进行加法运算：</p><p>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串，如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x=5+5;</span><br><span class="line">y=&quot;5&quot;+5;</span><br><span class="line">z=&quot;Hello&quot;+5;</span><br><span class="line">x,y, 和 z 输出结果为：</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">55</span><br><span class="line">Hello5</span><br></pre></td></tr></table></figure><p>JavaScript 运算符</p><p>在这个挑战中，我们为你提供名词、动词、形容词和副词。 你需要使用合适单词以及我们提供的单词来形成完整的句子。</p><p>你需要使用字符串连接运算符 + 来拼接字符串变量：myNoun、myAdjective、myVerb 和 myAdverb，以构建一个新字符串。 然后，将新字符串赋给 wordBlanks 变量。 你不应该更改分配给变量的单词。</p><p>你还需要考虑字符串中的空格，确保句子的所有单词之间有空格。 结果应该是一个完整的句子。</p><h1 id="JavaScript-比较-和-逻辑运算符"><a href="#JavaScript-比较-和-逻辑运算符" class="headerlink" title="JavaScript 比较 和 逻辑运算符"></a>JavaScript 比较 和 逻辑运算符</h1><p>比较和逻辑运算符用于测试 true 或者 false。</p><p><em><strong>比较运算符：</strong></em></p><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p><p>x&#x3D;5，下面的表格解释了比较运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">运算符描述比较返回值</span><br><span class="line">==等于x==8false</span><br><span class="line">x==5true</span><br><span class="line">===绝对等于（值和类型均相等）x===&quot;5&quot;false</span><br><span class="line">x===5true</span><br><span class="line">!=不等于x!=8true</span><br><span class="line">!==不绝对等于（值和类型有一个不相等，或两个都不相等）x!==&quot;5&quot;true</span><br><span class="line">x!==5false</span><br><span class="line">&gt;大于x&gt;8false</span><br><span class="line">&lt;小于x&lt;8true</span><br><span class="line">&gt;=大于或等于x&gt;=8false</span><br><span class="line">&lt;=小于或等于x&lt;=8true</span><br></pre></td></tr></table></figure><p>如何使用：</p><p>可以在条件语句中使用比较运算符对值进行比较，然后根据结果来采取行动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (age&lt;18) x=&quot;Too young&quot;;</span><br></pre></td></tr></table></figure><p>您将在本教程的下一节中学习更多有关条件语句的知识。</p><p><em><strong>逻辑运算符：</strong></em></p><p>逻辑运算符用于测定变量或值之间的逻辑。</p><p>给定 x&#x3D;6 以及 y&#x3D;3，下表解释了逻辑运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运算符描述例子</span><br><span class="line">&amp;&amp;and(两边都为true，结果为true；否则为false)(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</span><br><span class="line">||or(其中任何一边为true，结果就为true；两边都)(x==5 || y==5) 为 false</span><br><span class="line">!not(取反操作，true的反为false，false的反为true)!(x==y) 为 true</span><br></pre></td></tr></table></figure><p><em><strong>条件运算符：</strong></em></p><p>条件运算符也称为三元运算符。</p><p>语法是：a ? b : c, a 是条件，当条件返回 true 的时候运行代码 b，当条件返回 false 的时候运行代码 c。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let c = a &gt; b ? &quot;a is greater&quot; : &quot;b is greater or equal&quot;;</span><br></pre></td></tr></table></figure><p>若a大于b，c的值就为a is greater</p><p>否则，c的值就为b is greater or equal</p><p><strong>空值合并运算符（??）：</strong>是一个逻辑运算符，当左侧的操作数为 null 或者 时，返回其右侧操作数，否则返回左侧操作数。</p><p>与逻辑或运算符 || 不同的是，逻辑或运算符中左侧存在’’或0时，会认作假值，则会返回右边的操作数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const foo = null ?? &#x27;default string&#x27;;</span><br><span class="line">console.log(foo);</span><br><span class="line">// 输出: &quot;default string&quot;</span><br><span class="line"></span><br><span class="line">const baz = 0 ?? 42;</span><br><span class="line">console.log(baz);</span><br><span class="line">// 输出: 0</span><br><span class="line"></span><br><span class="line">//当使用逻辑或运算符时，0会当作假值，就会返回右侧值</span><br><span class="line">const sec = 0 || 42;</span><br><span class="line">console.log(sec);</span><br><span class="line">// 输出: 42</span><br></pre></td></tr></table></figure><p>所以 ?? 被称作空值合并运算符，他会防止把一些不为空值的识别为假，防止发生意料之外的行为，而不把’’和0当作空值。</p><p>JavaScript 比较 和 逻辑运算符<br>在 checkEqual 函数中使用三元运算符检查两个数字是否相等。 函数应该返回 Equal 或字符串 Not Equal。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function checkEqual(a, b) &#123;</span><br><span class="line">return(a == b ? &quot;Equal&quot; : &quot;Not Equal&quot;);//开始不通过，因为不用=，要用==</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkEqual(1, 2);</span><br><span class="line">checkEqual(1, 1);</span><br><span class="line">checkEqual(1, -1);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-if…Else-语句"><a href="#JavaScript-if…Else-语句" class="headerlink" title="JavaScript if…Else 语句"></a>JavaScript if…Else 语句</h1><p>条件语句 if…else 用于基于不同的条件来执行不同的动作。</p><p>通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。</p><p>在 JavaScript 中，我们可使用以下条件语句：</p><p>if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码</p><p>if…else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</p><p>if…else if….else 语句- 使用该语句来选择多个代码块之一来执行</p><p>switch 语句 - 使用该语句来选择多个代码块之一来执行</p><p><strong>if 语句：</strong>只有当指定条件为 true 时，该语句才会执行代码。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (condition)</span><br><span class="line">&#123;</span><br><span class="line">    当条件为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请使用小写的 if。使用大写字母（IF）会生成 JavaScript 错误！</p><p>示例：当时间小于 20:00 时，生成问候 “Good day”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (time&lt;20)</span><br><span class="line">&#123;</span><br><span class="line">    x=&quot;Good day&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，在这个语法中，没有 ..else..。您已经告诉浏览器只有在指定条件为 true 时才执行代码。</p><p><strong>if…else 语句：</strong>请使用 if….else 语句在条件为 true 时执行代码，在条件为 false 时执行其他代码。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (condition)</span><br><span class="line">&#123;</span><br><span class="line">    当条件为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    当条件不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：当时间小于 20:00 时，生成问候 “Good day”，否则生成问候 “Good evening”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (time&lt;20)</span><br><span class="line">&#123;</span><br><span class="line">    x=&quot;Good day&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    x=&quot;Good evening&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>if…else if…else 语句：</strong>使用 if….else if…else 语句来选择多个代码块之一来执行。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (condition1)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 1 为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else if (condition2)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 2 为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  当条件 1 和 条件 2 都不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：如果时间小于 10:00，则生成问候 “Good morning”，如果时间大于 10:00 小于 20:00，则生成问候 “Good day”，否则生成问候 “Good evening”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (time&lt;10)</span><br><span class="line">&#123;</span><br><span class="line">    document.write(&quot;&lt;b&gt;早上好&lt;/b&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if (time&gt;=10 &amp;&amp; time&lt;20)</span><br><span class="line">&#123;</span><br><span class="line">    document.write(&quot;&lt;b&gt;今天好&lt;/b&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    document.write(&quot;&lt;b&gt;晚上好!&lt;/b&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript if…Else 语句<br>请将 if&#x2F;else if 语句串联起来，实现下面的逻辑：</p><p>num &lt; 5 - 返回 Tiny<br>num &lt; 10 - 返回 Small<br>num &lt; 15 - 返回 Medium<br>num &lt; 20 - 返回 Large<br>num &gt;&#x3D; 20 - 返回 Huge</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function testSize(num) &#123;</span><br><span class="line">  // Only change code below this line</span><br><span class="line">if(num&lt;5)</span><br><span class="line">&#123;</span><br><span class="line">  return &quot;Tiny&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  if(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    return &quot;Small&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    if(num&lt;15)</span><br><span class="line">    &#123;</span><br><span class="line">      return &quot;Medium&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      if(num&lt;20)</span><br><span class="line">      &#123;</span><br><span class="line">        return &quot;Large&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        return &quot;Huge&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  return &quot;Change Me&quot;;</span><br><span class="line">  // Only change code above this line</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testSize(7);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-switch-语句"><a href="#JavaScript-switch-语句" class="headerlink" title="JavaScript switch 语句"></a>JavaScript switch 语句</h1><p>switch 语句用于基于不同的条件来执行不同的动作。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(n)</span><br><span class="line">&#123;</span><br><span class="line">    case 1:</span><br><span class="line">        执行代码块 1</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        执行代码块 2</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        与 case 1 和 case 2 不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工作原理：首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行。</p><p>示例：显示今天星期几。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let day = 2;</span><br><span class="line">switch (day) </span><br><span class="line">&#123; </span><br><span class="line">  case 0:x=&quot;今天是星期日&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 1:x=&quot;今天是星期一&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 2:x=&quot;今天是星期二&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 3:x=&quot;今天是星期三&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 4:x=&quot;今天是星期四&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 5:x=&quot;今天是星期五&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 6:x=&quot;今天是星期六&quot;; </span><br><span class="line">  break; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x 的运行结果：今天是星期二</p><p><strong>default 关键词：</strong>使用 default 关键词来规定匹配不存在时做的事情：</p><p>示例：如果不存在匹配的内容，则会输出默认的消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var day = 3;</span><br><span class="line">switch (day)</span><br><span class="line">&#123;</span><br><span class="line">    case 0:x=&quot;今天是星期天&quot;;</span><br><span class="line">    break;</span><br><span class="line">    case 6:x=&quot;今天是星期六&quot;;</span><br><span class="line">    break;</span><br><span class="line">    default:</span><br><span class="line">    x=&quot;期待周末&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x 的运行结果：期待周末</p><p>在 Switch 语句添加多个相同选项：</p><p>如果你忘了给 switch 的每一条 case 添加 break，那么后续的 case 会一直执行，直到遇见 break 为止。 如果你想为 switch 中的多个不同的输入设置相同的结果，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let result = &quot;&quot;;</span><br><span class="line">switch (val) &#123;</span><br><span class="line">  case 1:</span><br><span class="line">  case 2:</span><br><span class="line">  case 3:</span><br><span class="line">    result = &quot;1, 2, or 3&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 4:</span><br><span class="line">    result = &quot;4 alone&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，1、2、3 都会有相同的结果。</p><p>JavaScript switch 语句</p><p>请写一个 switch 语句，按如下条件设置 answer ：</p><p>1-3 - Low<br>4-6 - Mid<br>7-9 - High</p><p>提示： 你的 case 应写全范围中的每一个数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function sequentialSizes(val) &#123;</span><br><span class="line">  let answer = &quot;&quot;;</span><br><span class="line">  // Only change code below this line</span><br><span class="line">  switch (val) &#123;</span><br><span class="line">  case 1:</span><br><span class="line">   answer = &quot;Low&quot;;</span><br><span class="line">   break;</span><br><span class="line">  case 2:</span><br><span class="line">   answer = &quot;Low&quot;;</span><br><span class="line">   break;</span><br><span class="line">  case 3:</span><br><span class="line">   answer = &quot;Low&quot;;</span><br><span class="line">   break;</span><br><span class="line">    </span><br><span class="line">  case 4:</span><br><span class="line">    answer = &quot;Mid&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 5:</span><br><span class="line">    answer = &quot;Mid&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 6:</span><br><span class="line">    answer = &quot;Mid&quot;;</span><br><span class="line">    break;   </span><br><span class="line"></span><br><span class="line">  case 7:</span><br><span class="line">    answer = &quot;High&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 8:</span><br><span class="line">    answer = &quot;High&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 9:</span><br><span class="line">   answer = &quot;High&quot;;</span><br><span class="line">    break;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // Only change code above this line</span><br><span class="line">  return answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sequentialSizes(1);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-for-循环"><a href="#JavaScript-for-循环" class="headerlink" title="JavaScript for 循环"></a>JavaScript for 循环</h1><p>循环可以将代码块执行指定的次数。</p><p><strong>JavaScript 循环：</strong>如果您希望一遍又一遍地运行相同的代码，并且每次的值都不同，那么使用循环是很方便的。</p><p>我们可以这样输出数组的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//一般写法</span><br><span class="line">console.log(cars[0]); </span><br><span class="line">console.log(cars[1]); </span><br><span class="line">console.log(cars[2]); </span><br><span class="line">console.log(cars[3]); </span><br><span class="line">console.log(cars[4]); </span><br><span class="line">console.log(cars[5]);</span><br><span class="line">//使用for循环</span><br><span class="line">for (let i=0;i&lt;cars.length;i++)</span><br><span class="line">&#123; </span><br><span class="line">    console.log(cars[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同类型的循环：</p><p>JavaScript 支持不同类型的循环：</p><p>for - 循环代码块一定的次数</p><p>for&#x2F;in - 循环遍历对象的属性</p><p>while - 当指定的条件为 true 时循环指定的代码块</p><p>do&#x2F;while - 同样当指定的条件为 true 时循环指定的代码块1</p><p><strong>For 循环：</strong>for 循环是您在希望创建循环时常会用到的工具。</p><p>下面是 for 循环的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (语句 1; 语句 2; 语句 3)</span><br><span class="line">&#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br><span class="line">语句 1 （代码块）开始前执行</span><br><span class="line"></span><br><span class="line">语句 2 定义运行循环（代码块）的条件</span><br><span class="line"></span><br><span class="line">语句 3 在循环（代码块）已被执行之后执行</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (let i=0; i&lt;5; i++)</span><br><span class="line">&#123;</span><br><span class="line">      x=x + &quot;该数字为 &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 1：</p><p>通常我们会使用语句 1 初始化循环中所用的变量 (let i&#x3D;0)。</p><p>语句 1 是可选的，也就是说不使用语句 1 也可以。</p><p>您可以在语句 1 中初始化任意（或者多个）值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (let i=0,len=cars.length; i&lt;len; i++)</span><br><span class="line">&#123; </span><br><span class="line">    console.log(cars[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时您还可以省略语句 1（比如在循环开始前已经设置了值时）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let i=2,len=cars.length;</span><br><span class="line">for (; i&lt;len; i++)</span><br><span class="line">&#123; </span><br><span class="line">    console.log(cars[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 2：</p><p>通常语句 2 用于评估初始变量的条件。</p><p>语句 2 同样是可选的。</p><p>如果语句 2 返回 true，则循环再次开始，如果返回 false，则循环将结束。</p><p>注意：如果您省略了语句 2，那么必须在循环内提供 break。否则循环就无法停下来。这样有可能令浏览器崩溃。请在本教程稍后的章节阅读有关 break 的内容。</p><p>语句 3：</p><p>通常语句 3 会增加初始变量的值。</p><p>语句 3 也是可选的。</p><p>语句 3 有多种用法。增量可以是负数 (i–)，或者更大 (i&#x3D;i+15)。</p><p>语句 3 也可以省略（比如当循环内部有相应的代码时）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i=0,len=cars.length;</span><br><span class="line">for (; i&lt;len; )</span><br><span class="line">&#123; </span><br><span class="line">    document.write(cars[i] + &quot;&lt;br&gt;&quot;);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript for 循环</p><p>声明并初始化一个变量 total 值为 0。 使用 for 循环，使得 total 的值为 myArr 的数组中的每个元素的值的总和。 注：使用myArr.length可以获取到数组的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myArr = [2, 3, 4, 5, 6];</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line"></span><br><span class="line">let total = 0;</span><br><span class="line">for (let i = 0,len = myArr.length; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">    total = total+myArr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="JavaScript-while-循环"><a href="#JavaScript-while-循环" class="headerlink" title="JavaScript while 循环"></a>JavaScript while 循环</h1><p>只要指定条件为 true，循环就可以一直执行代码块。</p><p><strong>while 循环：</strong>while 循环会在指定条件为真时循环执行代码块。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：本例中的循环将继续运行，只要变量 i 小于 5：i 等于 5 时，结束循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (i&lt;5)</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>do&#x2F;while 循环：</strong>do&#x2F;while 循环是 while 循环的变体。该循环会在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//do/while循环，实现执行一段代码，再进行判断</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">while (条件);</span><br></pre></td></tr></table></figure><p>示例：下面的例子使用 do&#x2F;while 循环。该循环至少会执行一次，即使条件为 false 它也会执行一次，因为代码块会在条件被测试前执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">while (i&lt;5);</span><br></pre></td></tr></table></figure><p>JavaScript while 循环</p><p>通过一个 while 循环，把从 5 到 0（包括 5 和 0） 的值添加到 myArray 中。 注：往myArray中添加值，可以使用push</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myArray = [];</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">let i=5;</span><br><span class="line">while(i&gt;=0)</span><br><span class="line">&#123;</span><br><span class="line">  myArray.push(i);</span><br><span class="line">  i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-break-和-continue-语句"><a href="#JavaScript-break-和-continue-语句" class="headerlink" title="JavaScript break 和 continue 语句"></a>JavaScript break 和 continue 语句</h1><p>break 语句用于跳出循环。</p><p>continue 用于跳过循环中的一个迭代。</p><p>break 语句：</p><p>我们已经在本教程之前的章节中见到过 break 语句。它用于跳出 switch() 语句。</p><p>break 语句可用于跳出循环。</p><p>break 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (i=0;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3)</span><br><span class="line">    &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//该循环执行到第3次就结束循环，所以该循环只执行了三次</span><br></pre></td></tr></table></figure><p><strong>continue 语句：</strong>continue 语句中断当前的循环中的一次迭代，然后继续循环下一个迭代。 以下例子在值为 3 时，直接跳过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (i=0;i&lt;=10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3) continue;</span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//该循环执行到i 等于 3 时，就会跳过这次循环，所以循环总共执行了10次</span><br></pre></td></tr></table></figure><p>JavaScript break 和 continue 语句</p><p>使用任意循环语句，把 0 到 5 中除去 3 后的值添加到 myArray 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myArray = [];</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">for (let i=0;i&lt;=5;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3) continue;</span><br><span class="line">    myArray.push(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复合赋值之"><a href="#复合赋值之" class="headerlink" title="复合赋值之 &#x2F;&#x3D;"></a>复合赋值之 &#x2F;&#x3D;</h1><p>&#x2F;&#x3D; 操作符是让变量与另一个数相除并赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myVar = myVar / 5;</span><br></pre></td></tr></table></figure><p>将 myVar 除以 5。 等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myVar /= 5;</span><br></pre></td></tr></table></figure><p>复合赋值之 &#x2F;&#x3D;</p><p>使用 &#x2F;&#x3D; 操作符对 a，b 和 c 实现相除赋值操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let a = 48;</span><br><span class="line">let b = 108;</span><br><span class="line">let c = 33;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">a /= 12;</span><br><span class="line">b /= 4;</span><br><span class="line">c /= 11;</span><br></pre></td></tr></table></figure><h1 id="通过点号表示法访问对象属性-1"><a href="#通过点号表示法访问对象属性-1" class="headerlink" title="通过点号表示法访问对象属性(1)"></a>通过点号表示法访问对象属性(1)</h1><p>和访问数组类似，访问对象属性有两种方式：点号表示法（.）和方括号表示法（[]）。</p><p>如果我们已经提前知道要访问的属性名，使用点号表示法是最方便的。</p><p>这里是一个用点符号（.）读取对象属性的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myObj = &#123;</span><br><span class="line">  prop1: &quot;val1&quot;,</span><br><span class="line">  prop2: &quot;val2&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const prop1val = myObj.prop1;</span><br><span class="line">const prop2val = myObj.prop2;</span><br></pre></td></tr></table></figure><p>prop1val 的值将为字符串 val1，并且prop2val 的值将为字符串 val2。</p><p><strong>可选链运算符（?.）：</strong>可选链运算符（?.）允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 运算符的功能类似于 . 链式运算符，不同之处在于，在引用为空 (nullish ) (null 或者 ) 的情况下不会引起错误，该表达式短路返回值是 。与函数调用一起使用时，如果给定的函数不存在，则返回 。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const adventurer = &#123;</span><br><span class="line">  name: &#x27;Alice&#x27;,</span><br><span class="line">  cat: &#123;</span><br><span class="line">    name: &#x27;Dinah&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const dogName = adventurer.dog?.name;</span><br><span class="line">console.log(dogName);</span><br><span class="line">// 输出: </span><br><span class="line"></span><br><span class="line">//函数调用时如果被调用的方法不存在，使用可选链可以使表达式自动返回而不是抛出一个异常。</span><br><span class="line">console.log(adventurer.someNonExistentMethod?.());</span><br><span class="line">// 输出: </span><br></pre></td></tr></table></figure><p>通过点号表示法访问对象属性(1)</p><p>使用点号读取 testObj 的属性值。 将变量 hatValue 的值设置为该对象的 hat 属性的值，并将变量 shirtValue 的值设置为该对象的 shirt 属性的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const testObj = &#123;</span><br><span class="line">  &quot;hat&quot;: &quot;ballcap&quot;,</span><br><span class="line">  &quot;shirt&quot;: &quot;jersey&quot;,</span><br><span class="line">  &quot;shoes&quot;: &quot;cleats&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const hatValue = testObj.hat;      // Change this line</span><br><span class="line">const shirtValue = testObj.shirt;    // Change this line</span><br><span class="line">const undefineValue = testObj.first?.second    // Change this line</span><br></pre></td></tr></table></figure><h1 id="使用方括号表示法访问对象属性"><a href="#使用方括号表示法访问对象属性" class="headerlink" title="使用方括号表示法访问对象属性"></a>使用方括号表示法访问对象属性</h1><p>访问对象属性的第二种方式是方括号表示法（[]）。 如果你想访问的属性名中包含空格，就必须使用方括号表示法来获取它的属性值。</p><p>当然，如果属性名不包含空格，也可以使用方括号表示法。</p><p>这是一个使用方括号表示法读取对象属性的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const myObj = &#123;</span><br><span class="line">  &quot;Space Name&quot;: &quot;Kirk&quot;,</span><br><span class="line">  &quot;More Space&quot;: &quot;Spock&quot;,</span><br><span class="line">  &quot;NoSpace&quot;: &quot;USS Enterprise&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObj[&quot;Space Name&quot;];</span><br><span class="line">myObj[&#x27;More Space&#x27;];</span><br><span class="line">myObj[&quot;NoSpace&quot;];</span><br></pre></td></tr></table></figure><p>myObj[“Space Name”] 将会是字符串 Kirk，myObj[‘More Space’] 将会是字符串 Spock，并且myObj[“NoSpace”] 将会是字符串 USS Enterprise。</p><p>注意，如果属性名中包含空格，就必须使用引号（单引号或双引号）将它们包裹起来。</p><p>使用方括号表示法访问对象属性</p><p>使用方括号读取 testObj 中 an entree 和 the drink 的属性值，并分别将它们赋值给 entreeValue 和 drinkValue。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const testObj = &#123;</span><br><span class="line">  &quot;an entree&quot;: &quot;hamburger&quot;,</span><br><span class="line">  &quot;my side&quot;: &quot;veggies&quot;,</span><br><span class="line">  &quot;the drink&quot;: &quot;water&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const entreeValue = testObj[&quot;an entree&quot;];   // Change this line</span><br><span class="line">const drinkValue = testObj[&quot;the drink&quot;];    // Change this line</span><br></pre></td></tr></table></figure><h1 id="通过变量访问对象属性"><a href="#通过变量访问对象属性" class="headerlink" title="通过变量访问对象属性"></a>通过变量访问对象属性</h1><p>对对象上使用方括号表示法，还可以访问对象上作为变量值存储的属性。 当你需要遍历对象的所有属性，或者根据一个变量的值查找对应的属性值时，这种写法尤其适用。</p><p>以下是一个使用变量来访问属性的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const dogs = &#123;</span><br><span class="line">  Fido: &quot;Mutt&quot;,</span><br><span class="line">  Hunter: &quot;Doberman&quot;,</span><br><span class="line">  Snoopie: &quot;Beagle&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const myDog = &quot;Hunter&quot;;</span><br><span class="line">const myBreed = dogs[myDog];</span><br><span class="line">console.log(myBreed);</span><br></pre></td></tr></table></figure><p>字符串 Doberman 将会出现在控制台中。</p><p>请注意，我们在使用变量名访问属性时，不要使用引号引起来，因为我们使用的是 值，而不是 属性名。</p><p>通过变量访问对象属性</p><p>将 playerNumber 变量设置为 16。 然后，使用该变量查找播放器的名称并将其分配给 player。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const testObj = &#123;</span><br><span class="line">  12: &quot;Namath&quot;,</span><br><span class="line">  16: &quot;Montana&quot;,</span><br><span class="line">  19: &quot;Unitas&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const playerNumber = 16;  // Change this line</span><br><span class="line">const player = testObj[playerNumber];   // Change this line</span><br></pre></td></tr></table></figure><h1 id="更新对象属性"><a href="#更新对象属性" class="headerlink" title="更新对象属性"></a>更新对象属性</h1><p>在你创建了 JavaScript 对象后，你可以随时更新它的属性，就像更新任何其他变量那样。 你可以使用点或中括号操作符来更新。</p><p>举个例子，让我们看看 ourDog：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const ourDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>既然他是一个特别愉快的狗，让我们将他的名字更改为字符串 Happy Camper。 这有两种方式来更新对象的 name 属性： ourDog.name &#x3D; “Happy Camper”; 或 ourDog[“name”] &#x3D; “Happy Camper”;。更新后，ourDog.name 的值就不再是 Camper，而是 Happy Camper。</p><p>更新对象属性</p><p>更新 myDog 对象的 name 属性。 让它的名字从 Coder 变成 Happy Coder。 你可以使用点号表示法或方括号表示法来完成此挑战。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Coder&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;freeCodeCamp Campers&quot;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">myDog.name = &quot;Happy Coder&quot;;</span><br></pre></td></tr></table></figure><h1 id="给-JavaScript-对象添加新属性"><a href="#给-JavaScript-对象添加新属性" class="headerlink" title="给 JavaScript 对象添加新属性"></a>给 JavaScript 对象添加新属性</h1><p>你也可以像更改属性一样给 JavaScript 对象添加属性。</p><p>这里展示了如何给 ourDog 添加一个属性 bark：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ourDog.bark = &quot;bow-wow&quot;;</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">ourDog[&quot;bark&quot;] = &quot;bow-wow&quot;;</span><br></pre></td></tr></table></figure><p>现在，当我们执行 ourDog.bark 时，就能得到他的叫声，bow-wow。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const ourDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ourDog.bark = &quot;bow-wow&quot;;</span><br></pre></td></tr></table></figure><p>给 JavaScript 对象添加新属性</p><p>给 myDog 添加一个属性 bark ，并将其设置为狗的声音，比如 “woof“。 可以使用点操作符或者中括号操作符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const myDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Happy Coder&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;freeCodeCamp Campers&quot;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myDog.bark=&quot;woof&quot;;</span><br></pre></td></tr></table></figure><h1 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h1><p>我们同样可以删除对象的属性，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete ourDog.bark;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const ourDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;],</span><br><span class="line">  &quot;bark&quot;: &quot;bow-wow&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">delete ourDog.bark;</span><br></pre></td></tr></table></figure><p>在上面代码的最后一行中，ourDog 是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除对象的属性</p><p>删除 myDog 对象的 tails 属性。 可以使用点操作符或者中括号操作符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Happy Coder&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;freeCodeCamp Campers&quot;],</span><br><span class="line">  &quot;bark&quot;: &quot;woof&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">delete myDog.tails;</span><br></pre></td></tr></table></figure><h1 id="操作复杂对象"><a href="#操作复杂对象" class="headerlink" title="操作复杂对象"></a>操作复杂对象</h1><p>有时你可能希望将数据存储在一个灵活的数据结构（Data Structure）中。 JavaScript 对象是一种灵活的数据结构。 它可以储存字符串（strings）、数字（numbers）、布尔值（booleans）、数组（arrays）、函数（functions）和对象（objects）以及这些值的任意组合。</p><p>这是一个复杂数据结构的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const ourMusic = [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;artist&quot;: &quot;Daft Punk&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Homework&quot;,</span><br><span class="line">    &quot;release_year&quot;: 1997,</span><br><span class="line">    &quot;formats&quot;: [ </span><br><span class="line">      &quot;CD&quot;, </span><br><span class="line">      &quot;Cassette&quot;, </span><br><span class="line">      &quot;LP&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gold&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这是一个包含一个对象的数组。 该对象有关于专辑的各种元数据（metadata）。 它也有一个嵌套的 formats 数组。 可以将专辑添加到顶级数组来增加更多的专辑记录。 对象将数据以一种键 - 值对的形式保存。 在上面的示例中，”artist”: “Daft Punk” 有一个键为 artist 值为 Daft Punk 的属性。</p><p><strong>提示：</strong>数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。</p><p>操作复杂对象</p><p>添加一个新专辑到 myMusic 数组。 添加 artist 和 title 字符串，release_year 数字和 formats 字符串数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const myMusic = [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;artist&quot;: &quot;Billy Joel&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Piano Man&quot;,</span><br><span class="line">    &quot;release_year&quot;: 1973,</span><br><span class="line">    &quot;formats&quot;: [</span><br><span class="line">      &quot;CD&quot;,</span><br><span class="line">      &quot;8T&quot;,</span><br><span class="line">      &quot;LP&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gold&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    &quot;artist&quot;: &quot;Billy Joel 2&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Piano Man 2&quot;,</span><br><span class="line">    &quot;release_year&quot;: 1974,</span><br><span class="line">    &quot;formats&quot;: [</span><br><span class="line">      &quot;CD2&quot;,</span><br><span class="line">      &quot;8T2&quot;,</span><br><span class="line">      &quot;LP2&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gold&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="访问嵌套对象"><a href="#访问嵌套对象" class="headerlink" title="访问嵌套对象"></a>访问嵌套对象</h1><p>我们可以通过连续使用点号表示法和方括号表示法来访问对象的嵌套属性。</p><p>这是一个嵌套对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const ourStorage = &#123;</span><br><span class="line">  &quot;desk&quot;: &#123;</span><br><span class="line">    &quot;drawer&quot;: &quot;stapler&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;cabinet&quot;: &#123;</span><br><span class="line">    &quot;top drawer&quot;: &#123; </span><br><span class="line">      &quot;folder1&quot;: &quot;a file&quot;,</span><br><span class="line">      &quot;folder2&quot;: &quot;secrets&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;bottom drawer&quot;: &quot;soda&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ourStorage.cabinet[&quot;top drawer&quot;].folder2;</span><br><span class="line">ourStorage.desk.drawer;</span><br></pre></td></tr></table></figure><p>ourStorage.cabinet[“top drawer”].folder2 将会是字符串 secrets，并且 ourStorage.desk.drawer 将会是字符串 stapler。</p><p>访问嵌套对象</p><p>访问 myStorage 对象并将 glove box 属性的内容赋值给 gloveBoxContents 变量。 在可能的情况下，对所有的属性使用点号，否则使用方括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const myStorage = &#123;</span><br><span class="line">  &quot;car&quot;: &#123;</span><br><span class="line">    &quot;inside&quot;: &#123;</span><br><span class="line">      &quot;glove box&quot;: &quot;maps&quot;,</span><br><span class="line">      &quot;passenger seat&quot;: &quot;crumbs&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">    &quot;outside&quot;: &#123;</span><br><span class="line">      &quot;trunk&quot;: &quot;jack&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const gloveBoxContents = myStorage.car.inside[&quot;glove box&quot;];</span><br></pre></td></tr></table></figure><h1 id="记录集合"><a href="#记录集合" class="headerlink" title="记录集合"></a>记录集合</h1><p>你将创建一个帮助维护音乐专辑集的函数。 这个集合是一个包含多个相册的对象，这些相册也是对象。 每张专辑在集合中以唯一的 id 作为属性名来表示。 在每个专辑对象中，有各种描述专辑信息的属性。 并非所有专辑都有完整的信息。</p><p>updateRecords 函数有 4 个参数，即以下参数：</p><p>records - 一个包含多个专辑的对象</p><p>id - 一个数字，代表 records 对象中特定的专辑</p><p>prop - 一个字符串，代表相册属性名称</p><p>value - 一个字符串，包含用来更新相册属性的信息</p><p>使用下面的规则完成函数来修改传递给函数的对象。</p><p>你的函数必须始终返回整个 records 对象。</p><p>如果 value 是空字符串，从专辑里删除指定的 prop。</p><p>如果 prop 不是 tracks，并且 value 不是一个空字符串，将 value 赋给那个专辑的 prop。</p><p>如果 prop 是 tracks 并且 value 不是一个空字符串，你需要更新专辑的 tracks 数组。</p><p> 首先，如果专辑没有 tracks 属性，赋予它一个空数组。 然后添加 value 作为专辑的 tracks 数组的最后一个项目。</p><p>注意： 将 recordCollection 对象的副本用于测试。 你不应该直接修改 recordCollection 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const recordCollection = &#123;</span><br><span class="line">  2548: &#123;</span><br><span class="line">    albumTitle: &#x27;Slippery When Wet&#x27;,</span><br><span class="line">    artist: &#x27;Bon Jovi&#x27;,</span><br><span class="line">    tracks: [&#x27;Let It Rock&#x27;, &#x27;You Give Love a Bad Name&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  2468: &#123;</span><br><span class="line">    albumTitle: &#x27;1999&#x27;,</span><br><span class="line">    artist: &#x27;Prince&#x27;,</span><br><span class="line">    tracks: [&#x27;1999&#x27;, &#x27;Little Red Corvette&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  1245: &#123;</span><br><span class="line">    artist: &#x27;Robert Palmer&#x27;,</span><br><span class="line">    tracks: []</span><br><span class="line">  &#125;,</span><br><span class="line">  5439: &#123;</span><br><span class="line">    albumTitle: &#x27;ABBA Gold&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">function updateRecords(records, id, prop, value) &#123;</span><br><span class="line">  if(value==&quot;&quot;)&#123;</span><br><span class="line">  delete records[id][prop];</span><br><span class="line">&#125;else if(prop!=&quot;tracks&quot;&amp;&amp;value!=&quot;&quot;)&#123;</span><br><span class="line">    records[id][prop]=value;</span><br><span class="line">&#125;else if(prop==&quot;tracks&quot;&amp;&amp;value!=&quot;&quot;)&#123;</span><br><span class="line">  if(records[id].hasOwnProperty(&quot;tracks&quot;)==false)&#123;</span><br><span class="line">    records[id][prop]=[];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  records[id][prop].push(value);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  return records;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateRecords(recordCollection, 5439, &#x27;artist&#x27;, &#x27;ABBA&#x27;);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-使用解构赋值操作对象"><a href="#JavaScript-使用解构赋值操作对象" class="headerlink" title="JavaScript 使用解构赋值操作对象"></a>JavaScript 使用解构赋值操作对象</h1><p>使用解构赋值来获取对象的值：</p><p>解构赋值是 ES6 引入的新语法，用来从数组和对象中提取值，并优雅地对变量进行赋值。</p><p>有如下 ES5 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123; name: &#x27;John Doe&#x27;, age: 34 &#125;;</span><br><span class="line"></span><br><span class="line">const name = user.name;</span><br><span class="line">const age = user.age;</span><br></pre></td></tr></table></figure><p>name 的值应该是字符串 John Doe， age 的值应该是数字 34。</p><p>下面是使用 ES6 解构赋值语句，实现相同效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; name, age &#125; = user;</span><br></pre></td></tr></table></figure><p>同样，name 的值应该是字符串 John Doe， age 的值应该是数字 34。</p><p>在这里，自动创建 name 和 age 变量，并将 user 对象相应属性的值赋值给它们。 这个方法简洁多了。</p><p>你可以从对象中提取尽可能多或很少的值。</p><p>使用解构赋值从对象中分配变量：</p><p>可以给解构的值赋予一个新的变量名， 通过在赋值的时候将新的变量名放在冒号后面来实现。</p><p>还是以上个例子的对象来举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123; name: &#x27;John Doe&#x27;, age: 34 &#125;;</span><br></pre></td></tr></table></figure><p>这是指定新的变量名的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; name: userName, age: userAge &#125; = user;</span><br></pre></td></tr></table></figure><p>你可以这么理解这段代码：获取 user.name 的值，将它赋给一个新的变量 userName，等等。 userName 的值将是字符串 John Doe，userAge 的值将是数字 34。</p><p>使用解构赋值从嵌套对象中分配变量：</p><p>你可以使用前两节课程中相同的原则来解构嵌套对象中的值。</p><p>使用与前面的例子中类似的对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123;</span><br><span class="line">  johnDoe: &#123; </span><br><span class="line">    age: 34,</span><br><span class="line">    email: &#x27;johnDoe@freeCodeCamp.com&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是解构对象的属性值赋值给具有相同名字的变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; johnDoe: &#123; age, email &#125;&#125; = user;</span><br></pre></td></tr></table></figure><p>这是将对象的属性值赋值给具有不同名字的变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; johnDoe: &#123; age: userAge, email: userEmail &#125;&#125; = user;</span><br></pre></td></tr></table></figure><p>JavaScript 使用解构赋值操作对象</p><p>将两个赋值语句替换成等价的解构赋值。 lowToday 和 highToday 应该为 LOCAL_FORECAST 中 today.low 和 today.high 的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const LOCAL_FORECAST = &#123;</span><br><span class="line">  yesterday: &#123; low: 61, high: 75 &#125;,</span><br><span class="line">  today: &#123; low: 64, high: 77 &#125;,</span><br><span class="line">  tomorrow: &#123; low: 68, high: 80 &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const &#123;today:&#123;low:lowToday,high:highToday&#125;&#125;=LOCAL_FORECAST</span><br><span class="line"></span><br><span class="line">// Only change code above this line</span><br></pre></td></tr></table></figure><h1 id="使用解构赋值从数组中分配变量"><a href="#使用解构赋值从数组中分配变量" class="headerlink" title="使用解构赋值从数组中分配变量"></a>使用解构赋值从数组中分配变量</h1><p>在 ES6 里面，解构数组可以如同解构对象一样简单。</p><p>与数组解构不同，数组的扩展运算会将数组里的所有内容分解成一个由逗号分隔的列表。 所以，你不能选择哪个元素来给变量赋值。</p><p>而对数组进行解构却可以让我们做到这一点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const [a, b] = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(a, b);</span><br></pre></td></tr></table></figure><p>控制台将显示 a 和 b 的值为 1, 2。</p><p>数组的第一个值被赋值给变量 a，数组的第二个值被赋值给变量 b。 我们甚至能在数组解构中使用逗号分隔符，来获取任意一个想要的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const [a, b,,, c] = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(a, b, c);</span><br></pre></td></tr></table></figure><p>控制台将显示 a、b 和 c 的值为 1, 2, 5。</p><p>使用解构赋值从数组中分配变量</p><p>使用数组解构来交换变量 a 与 b 的值，使 a 接收 b 的值，而 b 接收 a 的值。 提示：将a和b组成一个数组，然后解构赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a = 8, b = 6;</span><br><span class="line">// Only change code below this line</span><br><span class="line"> [a,b]=[b,a];</span><br></pre></td></tr></table></figure><h1 id="通过-rest-参数解构"><a href="#通过-rest-参数解构" class="headerlink" title="通过 rest 参数解构"></a>通过 rest 参数解构</h1><p>在解构数组的某些情况下，我们可能希望将剩下的元素放进另一个数组里面。</p><p>以下代码的结果与使用 Array.prototype.slice() 类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];</span><br><span class="line">console.log(a, b);</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p>控制台将显示 1, 2 和 [3, 4, 5, 7]。</p><p>变量 a 和 b 分别接收数组的第一个和第二个值。 之后，因为 rest 语法，arr 以数组形式接收了剩余的值。 rest 参数只能对数组列表最后的元素起作用。 这意味着你不能使用 rest 语法来省略原数组最后一个元素、截取中间的元素作为子数组。</p><p>通过 rest 参数解构</p><p>使用一个带有 rest 语法的解构赋值来模拟 Array.prototype.slice() 的行为。 removeFirstTwo() 应该返回原始数组 list 的子数组，前两个元素被省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function removeFirstTwo(list) &#123;</span><br><span class="line">  const [,, ...arr] = list;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</span><br><span class="line">const sourceWithoutFirstTwo = removeFirstTwo(source);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-解构赋值在函数参数中的基本用法"><a href="#JavaScript-解构赋值在函数参数中的基本用法" class="headerlink" title="JavaScript 解构赋值在函数参数中的基本用法"></a>JavaScript 解构赋值在函数参数中的基本用法</h1><p>解构赋值在函数参数中的基本用法：</p><p>在某些情况下，你可以在函数的参数里直接解构对象。</p><p>请看以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const profileUpdate = (profileData) =&gt; &#123;</span><br><span class="line">  const &#123; name, age, nationality, location &#125; = profileData;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的操作解构了传给函数的对象。 这样的操作也可以直接在参数里完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const profileUpdate = (&#123; name, age, nationality, location &#125;) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 profileData 被传递到上面的函数时，从函数参数中解构出值以在函数内使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用数组解构赋值作为函数参数</span><br><span class="line">function printCoordinates([x, y]) &#123;</span><br><span class="line">    console.log(`Coordinates: ($&#123;x&#125;, $&#123;y&#125;)`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const point = [3, 7];</span><br><span class="line">printCoordinates(point); // 输出 &quot;Coordinates: (3, 7)&quot;</span><br></pre></td></tr></table></figure><p>默认值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 使用数组解构赋值和默认值作为函数参数</span><br><span class="line">function greetUser([name = &#x27;Guest&#x27;]) &#123;</span><br><span class="line">    console.log(`Hello, $&#123;name&#125;!`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetUser([]); // 输出 &quot;Hello, Guest!&quot;</span><br><span class="line">// 使用对象解构赋值和默认值作为函数参数</span><br><span class="line">function greetPerson(&#123; name = &#x27;Guest&#x27;, age = 18 &#125;) &#123;</span><br><span class="line">    console.log(`Hello, $&#123;name&#125;! You are $&#123;age&#125; years old.`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetPerson(&#123;&#125;); // 输出 &quot;Hello, Guest! You are 18 years old.&quot;</span><br></pre></td></tr></table></figure><p>剩余操作符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 使用对象解构赋值和剩余操作符作为函数参数</span><br><span class="line">function printDetails(&#123; name, ...rest &#125;) &#123;</span><br><span class="line">    console.log(`Name: $&#123;name&#125;`);</span><br><span class="line">    console.log(&#x27;Additional details:&#x27;);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27; &#125;;</span><br><span class="line">printDetails(person);</span><br><span class="line">// 输出</span><br><span class="line">// Name: John</span><br><span class="line">// Additional details:</span><br><span class="line">// &#123; age: 30, city: &#x27;New York&#x27; &#125;</span><br></pre></td></tr></table></figure><p>JavaScript 解构赋值在函数参数中的基本用法</p><p>对 half 的参数进行解构赋值，仅将 max 与 min 的值传进函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const stats = &#123;</span><br><span class="line">  max: 56.78,</span><br><span class="line">  standard_deviation: 4.34,</span><br><span class="line">  median: 34.54,</span><br><span class="line">  mode: 23.87,</span><br><span class="line">  min: -0.75,</span><br><span class="line">  average: 35.85</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const half = (arr) =&gt; (arr.max + arr.min) / 2.0; </span><br><span class="line">//const half = (&#123;max,min&#125;) =&gt; (max + min) / 2.0; </span><br><span class="line"></span><br><span class="line">// Only change code above this line</span><br></pre></td></tr></table></figure><h1 id="JavaScript-深拷贝与浅拷贝"><a href="#JavaScript-深拷贝与浅拷贝" class="headerlink" title="JavaScript 深拷贝与浅拷贝"></a>JavaScript 深拷贝与浅拷贝</h1><p>在 JavaScript 中，深拷贝（Deep Copy）和浅拷贝（Shallow Copy）是常用的两种对象复制方式，它们在复制对象时有着不同的行为。</p><p>浅拷贝是指将一个值复制给一个新对象时，新对象的属性值是原始对象的引用，而不是原始对象的副本。因此，新对象与原始对象共享同一个引用类型的属性。</p><p>深拷贝是指将一个值复制给一个新对象时，新对象的属性值是原始对象属性的副本，而不是引用。因此，新对象与原始对象相互独立，修改一个对象不会影响另一个对象。</p><p>那么，哪些复制行为是浅拷贝，哪些赋值行为是深拷贝呢？以下是几种拷贝方式：</p><p>直接赋值：</p><p>在 JavaScript 中，直接赋值是一种浅拷贝的方式。这意味着对于原始类型数据，直接赋值会创建一个值的副本，而对于引用类型数据，直接赋值会创建一个新的引用，但是新旧引用指向的是同一个对象。因此，原始类型数据是浅拷贝，而引用类型数据也是浅拷贝。</p><p>原始数据类型：包括number、string、boolean、null 和 等。直接赋值会创建一个新的值的副本，修改副本不会影响原始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = 10;</span><br><span class="line">let b = a;</span><br><span class="line">b = 20;</span><br><span class="line">console.log(a); // 输出 10，原始值不受影响</span><br></pre></td></tr></table></figure><p>引用类型数据：包括对象Object、数组Array、函数Function等。直接赋值会创建一个新的引用，但是新旧引用指向的是同一个对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let data1 = &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:21&#125;</span><br><span class="line">let data2 = data1</span><br><span class="line"></span><br><span class="line">data2.name = &quot;Jack&quot;</span><br><span class="line"></span><br><span class="line">//改变data2，data1的数据也会相应改变</span><br><span class="line">console.log(data1)</span><br><span class="line">console.log(data2)</span><br><span class="line">//两者输出相同</span><br></pre></td></tr></table></figure><p><strong>浅拷贝的实现方式：</strong>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用(地址)，所以改变新对象，旧对象也会改变，因为新旧对象共享一块内存。</p><p>通过 Object.assign() 拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj1 = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;</span><br><span class="line">const obj2 = Object.assign(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj2.a = 10;</span><br><span class="line">obj2.b.c = 20;</span><br><span class="line"></span><br><span class="line">console.log(obj1); // &#123; a: 1, b: &#123; c: 20 &#125; &#125;</span><br><span class="line">console.log(obj2); // &#123; a: 10, b: &#123; c: 20 &#125; &#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>当对象只有一级属性为深拷贝；<br>当对象中有多级属性时，二级属性后就是浅拷贝；</p><p><strong>深拷贝的实现：</strong>深拷贝的原理：复制并创建一个一模一样的对象，不共享内存，修改新对象，旧对象保持不变。</p><p>在 JavaScript 中实现深拷贝通常需要递归地遍历对象，并复制其属性及属性值。可以通过多种方式实现深拷贝，比如手动递归、使用 JSON.parse(JSON.stringify(obj))、使用第三方库等。</p><p>利用 JSON 对象实现深拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj1 = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;</span><br><span class="line">const obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line"></span><br><span class="line">obj2.a = 10;</span><br><span class="line">obj2.b.c = 20;</span><br><span class="line"></span><br><span class="line">console.log(obj1); // &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span><br><span class="line">console.log(obj2); // &#123; a: 10, b: &#123; c: 20 &#125; &#125;</span><br></pre></td></tr></table></figure><p>使用扩展运算符实现数组深拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a=[1,2,3]</span><br><span class="line">var b=[...a];</span><br><span class="line">b.push(4);</span><br><span class="line">console.log(b);//1,2,3,4</span><br><span class="line">console.log(a)//1,2,3</span><br></pre></td></tr></table></figure><p>JavaScript 深拷贝与浅拷贝</p><p>修改右侧代码，使得修改 obj2 的值时，obj1 的值不被修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const obj1 = &#123;a:1,b:2&#125;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">obj2.a = 10</span><br><span class="line">obj2.b = 20</span><br><span class="line"></span><br><span class="line">console.log(obj1)</span><br><span class="line">console.log(obj2)</span><br></pre></td></tr></table></figure><h1 id="遍历数组-对象"><a href="#遍历数组-对象" class="headerlink" title="遍历数组&#x2F;对象"></a>遍历数组&#x2F;对象</h1><p>数组遍历 forEach ：</p><p>在 JavaScript 中，forEach() 是数组的一个高阶函数，用于遍历数组的每个元素，并对每个元素执行提供的回调函数。forEach() 方法不会改变原始数组，但允许对数组中的每个元素进行操作。</p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(function(currentValue, index, array) &#123;</span><br><span class="line">    // 对当前元素执行的操作</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>currentValue：当前遍历的数组元素的值。</p><p>index：当前遍历的数组元素的索引。</p><p>array：调用 forEach() 方法的数组。</p><p>在前面的课程中，我们讲到了箭头函数，那么forEach也可以写成如下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach((currentValue, index, array) =&gt; &#123;</span><br><span class="line">    // 对当前元素执行的操作</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line">let sum = 0;</span><br><span class="line"></span><br><span class="line">numbers.forEach(function(number, index) &#123;</span><br><span class="line">    console.log(`Index $&#123;index&#125;: $&#123;number&#125;`);</span><br><span class="line">    sum += number</span><br><span class="line">&#125;);</span><br><span class="line">console.log(`Sum: $&#123;sum&#125;`);</span><br><span class="line">// 输出：</span><br><span class="line">// Index 0: 1</span><br><span class="line">// Index 1: 2</span><br><span class="line">// Index 2: 3</span><br><span class="line">// Index 3: 4</span><br><span class="line">// Index 4: 5</span><br><span class="line">// Sum: 15</span><br></pre></td></tr></table></figure><p>数组遍历 map ：</p><p>在 JavaScript 中，map() 方法是数组对象的一个高阶函数，用于创建一个新数组，其中每个元素都是原始数组经过某种转换后的值。map() 方法会对数组中的每个元素都调用一个提供的函数，并将函数的返回值组成一个新数组返回，原始数组不受影响。</p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const newArray = array.map(function(currentValue, index, array) &#123;</span><br><span class="line">    // 返回新数组的每个元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>currentValue：当前遍历的数组元素的值。<br>index：当前遍历的数组元素的索引。<br>array：调用 map() 方法的数组。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">const doubledNumbers = numbers.map(function(number) &#123;</span><br><span class="line">    return number * 2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(doubledNumbers); // 输出 [2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const names = [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;];</span><br><span class="line"></span><br><span class="line">const nameLengths = names.map(function(name) &#123;</span><br><span class="line">    return name.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(nameLengths); // 输出 [5, 3, 7]</span><br></pre></td></tr></table></figure><p>同样也可以使用箭头函数来简化 map() 方法的回调函数，使代码更加简洁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">const doubledNumbers = numbers.map(number =&gt; number * 2);</span><br><span class="line"></span><br><span class="line">console.log(doubledNumbers); // 输出 [2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>map() 方法创建一个新数组，原始数组不受影响。</p><p>map() 方法中的回调函数可以访问当前元素的值、索引以及原始数组本身。</p><p>map() 方法返回的新数组的长度和原始数组相同。</p><p>map() 方法返回的新数组中的元素是根据原始数组中的每个元素经过回调函数处理后得到的结果。</p><p>在使用 map() 方法时，要确保回调函数不会修改原始数组的元素，因为 map() 方法创建的是一个新数组，而不是对原始数组的直接修改。</p><p>For&#x2F;In 循环： JavaScript for&#x2F;in 语句用来循环遍历对象的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let person=&#123;fname:&quot;Bill&quot;,lname:&quot;Gates&quot;,age:56&#125;; </span><br><span class="line"> </span><br><span class="line">for (x in person)  // x 为属性名</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for of 遍历可迭代对象：</p><p>在 JavaScript 中，for…of 循环是一种用于遍历可迭代对象（如数组、字符串、Map、Set 等）的语法结构。它提供了一种简洁、直观的方式来遍历可迭代对象的元素，相比传统的 for 循环和 forEach() 方法，for…of 更加灵活和方便。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//遍历数组</span><br><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">for (const number of numbers) &#123;</span><br><span class="line">    console.log(number);</span><br><span class="line">&#125;</span><br><span class="line">// 输出：</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line">// 4</span><br><span class="line">// 5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//遍历字符串</span><br><span class="line">const str = &quot;Hello&quot;;</span><br><span class="line"></span><br><span class="line">for (const char of str) &#123;</span><br><span class="line">    console.log(char);</span><br><span class="line">&#125;</span><br><span class="line">// 输出：</span><br><span class="line">// H</span><br><span class="line">// e</span><br><span class="line">// l</span><br><span class="line">// l</span><br><span class="line">// o</span><br></pre></td></tr></table></figure><p>遍历数组&#x2F;对象</p><p>将对象 infoObj 中的所有值存在 infoArr 数组中，并且把 infoArr 中每个字符串的长度依次存在 lengthArr 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const infoObj = &#123;</span><br><span class="line">  &quot;id&quot;:&quot;123&quot;,</span><br><span class="line">  &quot;name&quot;:&quot;JavaScript&quot;,</span><br><span class="line">  &quot;avatar&quot;:&quot;Alice&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let infoArr = []</span><br><span class="line">let lengthArr = []</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">for (x in infoObj)  // x 为属性名</span><br><span class="line">&#123;</span><br><span class="line">  infoArr.push(infoObj[x]);</span><br><span class="line">     //infoArr= infoArr + infoObj[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     lengthArr= infoArr.map(function(name) &#123;</span><br><span class="line">    return name.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(infoArr)</span><br><span class="line">console.log(lengthArr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="JavaScript-类的使用-类方法以及构造函数"><a href="#JavaScript-类的使用-类方法以及构造函数" class="headerlink" title="JavaScript 类的使用-类方法以及构造函数"></a>JavaScript 类的使用-类方法以及构造函数</h1><p>在 JavaScript 中，类是一种用于创建对象的蓝图或模板，它定义了对象的属性和方法。在 ES6（ECMAScript 2015）之前，JavaScript 并没有类的概念，而是通过构造函数和原型链来实现面向对象编程。ES6 引入了 class 关键字，使得在 JavaScript 中定义类更加直观和易于理解。</p><p><strong>定义：class 关键字：</strong>用特殊关键字 class 在 JavaScript 中定义一个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  // The body of class</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个类 User。大括号 { } 界定了类的主体。请注意，此语法称为 类声明 。</p><p>当你创建类的 实例（instance） 时，该类将变得很有用。实例是一个包含类描述的数据和行为的对象。</p><p>new 运算符可在 JavaScript 中实例化该类：instance &#x3D; new Class()。</p><p>例如，你可以用 new 运算符实例化 User 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myUser = new User();</span><br></pre></td></tr></table></figure><p>构造方法：constructor()：</p><p>constructor(param1，param2，…) 是类中初始化实例的特殊方法。在这里你可以设置字段的初始值或针对对象进行任何类型的设置。</p><p>在以下示例中，构造函数设置了字段 name 的初始值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  constructor(name,age) &#123;    </span><br><span class="line">      this.name = name;</span><br><span class="line">      this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User 的构造函数有参数 name和age，用于设置 this.name this.age字段的初始值。</p><p>在构造函数中，this 值等于新创建的实例。</p><p>用于实例化类的参数成为构造函数的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  constructor(name,age) &#123;  </span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const user1 = new User(&#x27;Jon Snow&#x27;,21);</span><br><span class="line">user1.name; // =&gt; &#x27;Jon Snow&#x27;</span><br><span class="line">user1.age;  // =&gt; 21</span><br></pre></td></tr></table></figure><p>那么在上例中，我们创建的user1对象就拥有name 为 Jon Snow，age 为 21的属性值；</p><p><strong>类方法：</strong>创建类方法的语法与对象方法相同。</p><p>请始终添加 constructor() 方法。</p><p>然后添加任意数量的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class ClassName &#123;</span><br><span class="line">  constructor() &#123; ... &#125;</span><br><span class="line">  method_1() &#123; ... &#125;</span><br><span class="line">  method_2() &#123; ... &#125;</span><br><span class="line">  method_3() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript 类的使用-类方法以及构造函数</p><p>使用 class 关键词，写一个 constructor 来创建 Vegetable class。</p><p>Vegetable 这个 class 可以创建 vegetable 对象，这个对象拥有一个在 constructor 中赋值的 name 属性。</p><p>该类也应该有一个方法 getname 用来返回 The name of this vegetable is 后面跟上构造函数初始化的 name 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line"></span><br><span class="line">class Vegetable&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">         this.getname = function() &#123;  </span><br><span class="line">            return &quot;The name of this vegetable is &quot; + this.name;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">const carrot = new Vegetable(&#x27;carrot&#x27;);</span><br><span class="line">const tomato = new Vegetable(&#x27;tomato&#x27;);</span><br><span class="line">console.log(carrot.getname());</span><br><span class="line">console.log(tomato.getname());</span><br></pre></td></tr></table></figure><h1 id="JavaScript-类的使用-getter-和-setter-控制对象的访问"><a href="#JavaScript-类的使用-getter-和-setter-控制对象的访问" class="headerlink" title="JavaScript 类的使用 - getter 和 setter 控制对象的访问"></a>JavaScript 类的使用 - getter 和 setter 控制对象的访问</h1><p>你可以从对象中获得一个值，也可以给对象的属性赋值。</p><p>这些操作通常被称为 getters 以及 setters。</p><p>Getter 函数的作用是可以让对象返回一个私有变量，而不需要直接去访问私有变量。</p><p>Setter 函数的作用是可以基于传进的参数来修改对象中私有变量。 这些修改可以是计算，或者是直接替换之前的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Book &#123;</span><br><span class="line">  constructor(author) &#123;</span><br><span class="line">    this._author = author;</span><br><span class="line">  &#125;</span><br><span class="line">  // getter</span><br><span class="line">  get writer() &#123;</span><br><span class="line">    return this._author;</span><br><span class="line">  &#125;</span><br><span class="line">  // setter</span><br><span class="line">  set writer(updatedAuthor) &#123;</span><br><span class="line">    this._author = updatedAuthor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const novel = new Book(&#x27;anonymous&#x27;);</span><br><span class="line">console.log(novel.writer);</span><br><span class="line">novel.writer = &#x27;newAuthor&#x27;;</span><br><span class="line">console.log(novel.writer);</span><br></pre></td></tr></table></figure><p>控制台将显示字符串 anonymous 和 newAuthor。</p><p>请注意用于调用 getter 和 setter 的语法。 它们甚至看起来不像是函数。 getter 和 setter 非常重要，因为它们隐藏了内部的实现细节。</p><p>注意： 通常会在私有变量前添加下划线（_）。 然而，这种做法本身并不是将变量变成私有的。</p><p>JavaScript 类的使用 - getter 和 setter 控制对象的访问</p><p>使用 class 关键字创建一个 Thermostat class。 constructor 接收一个华氏温度。</p><p>In the class, create a getter to obtain the temperature in Celsius and a setter that accepts a temperature in Celsius.</p><p>记得在 C &#x3D; 5&#x2F;9 * (F - 32) 和 F &#x3D; C * 9.0 &#x2F; 5 + 32 中，F 是华氏温度值，C 是摄氏温度值。</p><p>注意： 完成这个挑战后，应该在 class 中使用一个温度标准，要么是华氏温度，要么是摄氏温度。</p><p>这就是 getter 和 setter 的功能。 你正在为别的用户创建一个 API，不论你使用哪一个，用户都将获得正确的结果。</p><p>或者说，你从用户需求中抽象出了实现细节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line">class Thermostat &#123;</span><br><span class="line">    constructor(F)</span><br><span class="line">    &#123;</span><br><span class="line">        this._F=F;</span><br><span class="line">    &#125;</span><br><span class="line">    // getter</span><br><span class="line">  get temperature() &#123;</span><br><span class="line">    return 5/9 * (this._F - 32);</span><br><span class="line">  &#125;</span><br><span class="line">  // setter</span><br><span class="line">  set temperature(C) &#123;</span><br><span class="line">     this._F = (9/5) * C + 32;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">const thermos = new Thermostat(76); // Setting in Fahrenheit scale</span><br><span class="line">let temp = thermos.temperature; // 24.44 in Celsius</span><br><span class="line">thermos.temperature = 26;</span><br><span class="line">temp = thermos.temperature; // 26 in Celsius</span><br></pre></td></tr></table></figure><h1 id="JavaScript-类的使用-继承：extends"><a href="#JavaScript-类的使用-继承：extends" class="headerlink" title="JavaScript 类的使用 - 继承：extends"></a>JavaScript 类的使用 - 继承：extends</h1><p>继承：extends：</p><p>JavaScript 中的类用 extends 关键字支持单继承。</p><p>在表达式 class Child extends Parent { } 中，子类 child 从父类继承构造函数\字段和方法。</p><p>例如，让我们创建一个新的子类 ContentWriter， 来扩展父类 User。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContentWriter extends User &#123;  </span><br><span class="line">    posts = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const writer = new ContentWriter(&#x27;John Smith&#x27;);</span><br><span class="line"></span><br><span class="line">writer.name;      // =&gt; &#x27;John Smith&#x27;</span><br><span class="line">writer.getName(); // =&gt; &#x27;John Smith&#x27;</span><br><span class="line">writer.posts;     // =&gt; []</span><br></pre></td></tr></table></figure><p>ContentWriter 从 User 继承构造函数，getName() 方法和 name 字段。同样，ContentWriter 类声明一个新字段 posts。</p><p>注意，父类的私有成员不会被子类所继承。</p><p>父构造函数：constructor() 中的 super()：</p><p>如果你想在子类中调用父构的造函数，则需要使用子构造函数中提供的特殊功能 super()。</p><p>例如让 ContentWriter 构造函数调用 User 的父构造函数，并初始化 posts 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContentWriter extends User &#123;</span><br><span class="line">  posts = [];</span><br><span class="line"></span><br><span class="line">  constructor(name, posts) &#123;</span><br><span class="line">    super(name);</span><br><span class="line">    this.posts = posts;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const writer = new ContentWriter(&#x27;John Smith&#x27;, [&#x27;Why I like JS&#x27;]);</span><br><span class="line">writer.name; // =&gt; &#x27;John Smith&#x27;</span><br><span class="line">writer.posts // =&gt; [&#x27;Why I like JS&#x27;]</span><br></pre></td></tr></table></figure><p>子类 ContentWriter 中的 super(name) 执行父类 User 的构造函数。</p><p>注意，在子构造函数内部，必须在使用 this 关键字之前执行 super()。调用 super() 确保父级构造函数初始化实例。</p><p>父实例：方法中的 super：</p><p>如果你想在子方法中访问父方法，则可以使用特殊的快捷方式 super。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContentWriter extends User &#123;</span><br><span class="line">  posts = [];</span><br><span class="line"></span><br><span class="line">  constructor(name, posts) &#123;</span><br><span class="line">    super(name);</span><br><span class="line">    this.posts = posts;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    const name = super.getName();    if (name === &#x27;&#x27;) &#123;</span><br><span class="line">      return &#x27;Unknwon&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const writer = new ContentWriter(&#x27;&#x27;, [&#x27;Why I like JS&#x27;]);</span><br><span class="line">writer.getName(); // =&gt; &#x27;Unknwon&#x27;</span><br></pre></td></tr></table></figure><p>子类 ContentWriter 的 getName() 直接从父类 User 访问方法 super.getName()。</p><p>JavaScript 类的使用 - 继承：extends</p><p>定义一个 rabbit 类，继承 animal 类，并且增加一个 color 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class animal&#123;</span><br><span class="line">  name;</span><br><span class="line">  food;</span><br><span class="line">  </span><br><span class="line">  constructor(name,food) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.food = food;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat()&#123;</span><br><span class="line">    return `$&#123;this.name&#125; love to eat $&#123;this.food&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  // Only change code below this line</span><br><span class="line">// 定义 rabbit 类，继承自 animal 类  </span><br><span class="line">class rabbit extends animal &#123;  </span><br><span class="line">  color;  </span><br><span class="line">  </span><br><span class="line">  // 构造函数需要调用 super 方法来初始化父类的属性  </span><br><span class="line">  constructor(name, food, color) &#123;  </span><br><span class="line">    super(name, food); // 调用父类的 constructor  </span><br><span class="line">    this.color = color; // 初始化自己的 color 属性  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  // 添加一个 getcolor 方法来获取兔子的颜色  </span><br><span class="line">  eat() &#123;  </span><br><span class="line">    return &quot;rabbit love to eat grass&quot;;  </span><br><span class="line">  &#125;  </span><br><span class="line"> getcolor() &#123;  </span><br><span class="line">    return `The color of this rabbit is $&#123;this.color&#125;`;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">  // Only change code above this line</span><br><span class="line"></span><br><span class="line">let a = new rabbit(&#x27;rabbit&#x27;,&#x27;grass&#x27;,&#x27;white&#x27;)</span><br><span class="line">console.log(a.eat())</span><br><span class="line">console.log(a.getcolor())</span><br></pre></td></tr></table></figure><h1 id="用-export-来重用代码块"><a href="#用-export-来重用代码块" class="headerlink" title="用 export 来重用代码块"></a>用 export 来重用代码块</h1><p>模块化的背景：</p><p>JavaScript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 JavaScript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。</p><p>因此，近年来，有必要开始考虑提供一种将 JavaScript 程序拆分为可按需导入的单独模块的机制。Node.js 已经提供这个能力很长时间了，还有很多的 JavaScript 库和框架已经开始了模块的使用（例如，CommonJS 和基于 AMD 的其他模块系统 如 RequireJS，以及最新的 Webpack 和 Babel）。</p><p>好消息是，最新的浏览器开始原生支持模块功能了，这是本文要重点讲述的。这会是一个好事情 —- 浏览器能够最优化加载模块，使它比使用库更有效率：使用库通常需要做额外的客户端处理。</p><p>导出模块的功能：</p><p>假设有一个文件 math_functions.js，该文件包含了数学运算相关的一些函数。 其中一个存储在变量 add 里，该函数接受两个数字作为参数返回它们的和。 你想在几个不同的 JavaScript 文件中使用这个函数。 要实现这个目的，就需要 export 它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const add = (x, y) =&gt; &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是导出单个函数常用方法，还可以这样导出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const add = (x, y) =&gt; &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; add &#125;;</span><br></pre></td></tr></table></figure><p>导出变量和函数后，就可以在其它文件里导入使用从而避免了代码冗余。 重复第一个例子的代码可以导出多个对象或函数，在第二个例子里面的导出语句中添加更多值也可以导出多项，例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export &#123; add, subtract &#125;;</span><br></pre></td></tr></table></figure><p>用 export 来重用代码块</p><p>编辑框中有两个字符串相关的函数。 选用一种方法导出两个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const uppercaseString = (string) =&gt; &#123;</span><br><span class="line">  return string.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const lowercaseString = (string) =&gt; &#123;</span><br><span class="line">  return string.toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; uppercaseString, lowercaseString &#125;;</span><br></pre></td></tr></table></figure><h1 id="通过-import-复用-JavaScript-代码"><a href="#通过-import-复用-JavaScript-代码" class="headerlink" title="通过 import 复用 JavaScript 代码"></a>通过 import 复用 JavaScript 代码</h1><p>import 可以导入文件或模块的一部分。 在之前的课程里，例子从 math_functions.js 文件里导出了 add。 下面看一下如何在其它文件导入它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add &#125; from &#x27;./math_functions.js&#x27;;</span><br></pre></td></tr></table></figure><p>在这里，import 会在 math_functions.js 里找到 add，只导入这个函数，忽略剩余的部分。 .&#x2F; 告诉程序在当前文件的相同目录寻找 math_functions.js 文件。 用这种方式导入时，相对路径（.&#x2F;）和文件扩展名（.js）都是必需的。</p><p>通过在 import 语句里添加项目，可以从文件里导入多个项目，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add, subtract &#125; from &#x27;./math_functions.js&#x27;;</span><br></pre></td></tr></table></figure><p>通过 import 复用 JavaScript 代码</p><p>添加 import 语句，使当前文件可以使用你在之前课程里导出的 uppercaseString 和 lowercaseString 函数。 函数在当前路径下的 string_functions.js 文件里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Only change code above this line</span><br><span class="line">import &#123; uppercaseString, lowercaseString  &#125; from &#x27;./string_functions.js&#x27;;</span><br><span class="line">uppercaseString(&quot;hello&quot;);</span><br><span class="line">lowercaseString(&quot;WORLD!&quot;);</span><br></pre></td></tr></table></figure><h1 id="用-从文件中导入所有内容"><a href="#用-从文件中导入所有内容" class="headerlink" title="用 * 从文件中导入所有内容"></a>用 * 从文件中导入所有内容</h1><p>假设你有一个文件，你希望将其所有内容导入到当前文件中。 可以用 import * as 语法来实现。 下面是一个从同目录下的 math_functions.js 文件中导入所有内容的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as myMathModule from &quot;./math_functions.js&quot;;</span><br></pre></td></tr></table></figure><p>上面的 import 语句会创建一个叫作 myMathModule 的对象。 这只是一个变量名，可以随便命名。 对象包含 math_functions.js 文件里的所有导出，可以像访问对象的属性那样访问里面的函数。 下面是使用导入的 add 和 subtract 函数的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myMathModule.add(2,3);</span><br><span class="line">myMathModule.subtract(5,3);</span><br></pre></td></tr></table></figure><p>用 * 从文件中导入所有内容</p><p>下面的代码需要从同目录下的 string_functions.js 文件中导入所有内容。 使用 import * as 语法将文件的所有内容导入对象 stringFunctions。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Only change code above this line</span><br><span class="line">import * as stringFunctions from &quot;./string_functions.js&quot;;</span><br><span class="line">stringFunctions.uppercaseString(&quot;hello&quot;);</span><br><span class="line">stringFunctions.lowercaseString(&quot;WORLD!&quot;);</span><br></pre></td></tr></table></figure><h1 id="用-export-default-创建一个默认导出"><a href="#用-export-default-创建一个默认导出" class="headerlink" title="用 export default 创建一个默认导出"></a>用 export default 创建一个默认导出</h1><p>在 export 的课程中，你学习了命名导出语法， 这可以在其他文件中引用一些函数或者变量。</p><p>还需要了解另外一种被称为默认导出的 export 的语法。 在文件中只有一个值需要导出的时候，通常会使用这种语法。 它也常常用于给文件或者模块创建返回值。</p><p>下面是使用 export default 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default function add(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个是命名函数，第二个是匿名函数。</p><p>export default 用于为模块或文件声明一个返回值，在每个文件或者模块中应当只默认导出一个值。 此外，你不能将 export default 与 var、let 或 const 同时使用。</p><p>用 export default 创建一个默认导出</p><p>下面的函数应该在这个模块中返回一个值。 请添加需要的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function subtract(x, y) &#123;</span><br><span class="line">  return x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function subtract(x, y) &#123;</span><br><span class="line">  return x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function(x, y) &#123;</span><br><span class="line">  return x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="导入一个默认的导出"><a href="#导入一个默认的导出" class="headerlink" title="导入一个默认的导出"></a>导入一个默认的导出</h1><p>在上一个挑战里，学习了 export default 的用法。 还需要一种 import 的语法来导入默认的导出。 在下面的例子里，add 是 math_functions.js 文件的默认导出。 以下是如何导入它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import add from &quot;./math_functions.js&quot;;</span><br></pre></td></tr></table></figure><p>这个语法有一处特别的地方， 被导入的 add 值没有被花括号（{}）所包围。 add 只是一个变量的名字，对应 math_functions.js 文件的任何默认导出值。 在导入默认导出时，可以使用任何名字。</p><p>导入一个默认的导出</p><p>在下面的代码中，导入同一目录中 math_functions.js 文件的默认导出。 导入变量的名字为 subtract。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import subtract from &quot;./math_functions.js&quot;;</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">subtract(7,4);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-this指向"><a href="#JavaScript-this指向" class="headerlink" title="JavaScript this指向"></a>JavaScript this指向</h1><p>this的理解：</p><p>理解 JavaScript 中的 this 关键字是非常重要的，因为它在不同的上下文中具有不同的含义。this 的值取决于函数的调用方式，下面我们来详细解释不同情况下 this 的指向：</p><p>全局上下文中：在全局上下文中，即在任何函数外部，this 指向全局对象，通常在浏览器环境中指向 window 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(this); // 输出 window（浏览器环境下）</span><br></pre></td></tr></table></figure><p>函数调用：当函数独立调用时，this 指向全局对象（在严格模式下是 ）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction() &#123;</span><br><span class="line">  console.log(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFunction(); // 输出 window（浏览器环境下）</span><br></pre></td></tr></table></figure><p>方法调用：当函数作为对象的方法调用时，this 指向调用该方法的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: &#x27;John&#x27;,</span><br><span class="line">  greet: function() &#123;</span><br><span class="line">    console.log(this.name); // 输出 John</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>obj.greet();<br>构造函数中：当函数用作构造函数使用（通过 new 关键字调用）时，this 指向新创建的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">console.log(person1.name); // 输出 Alice</span><br></pre></td></tr></table></figure><p>class类中：在 JavaScript 的类（class）中，this 的行为也与其他情况有所不同。在类中，this 指向实例化的对象，也就是类的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    console.log(`Hello, $&#123;this.name&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">person1.greet(); // 输出 Hello, Alice</span><br></pre></td></tr></table></figure><p>在这个例子中，this 关键字在 Person 类的构造函数和 greet 方法中都指向实例化的对象 person1。因此，当调用 person1.greet() 时，this 指向 person1 对象，从而输出相应的问候语。 需要注意的是，如果在类的方法中使用普通的函数，那么函数内部的 this 将会丢失其上下文，并可能指向全局对象或者 ，这时需要使用箭头函数来绑定正确的上下文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">      console.log(`Hello, $&#123;this.name&#125;`); // 此处的 this 指向全局对象（在浏览器环境中通常是 window）</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">person1.greet(); // 输出 &quot;Hello, &quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      console.log(`Hello, $&#123;this.name&#125;`); // 将普通函数改为箭头函数，this重新指向Person实例</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">person1.greet(); // 输出 &quot;Hello, Alice&quot;</span><br></pre></td></tr></table></figure><p>通过箭头函数，我们将内部函数绑定到了外部函数的上下文，确保了 this 指向正确的对象。</p><p>JavaScript this指向</p><p>更改代码，使其能够正确调用greet方法，输出Hello, John</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: &#x27;John&#x27;,</span><br><span class="line">  greet: function() &#123;</span><br><span class="line">    console.log(`Hello, $&#123;this.name&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">//const greetFunction = obj.greet;</span><br><span class="line">obj.greet();</span><br><span class="line">const greetFunction = obj.greet.bind(obj); </span><br><span class="line">greetFunction();</span><br><span class="line">// Only change code above this line</span><br></pre></td></tr></table></figure><h1 id="JavaScript-闭包"><a href="#JavaScript-闭包" class="headerlink" title="JavaScript 闭包"></a>JavaScript 闭包</h1><p>闭包是 JavaScript 中一个重要且常见的概念，它是指函数和其词法环境的组合。在理解闭包之前，我们需要先了解一下 JavaScript 中的词法作用域和作用域链。</p><p>词法作用域：</p><p>JavaScript 使用词法作用域（也称为静态作用域），即作用域由代码中函数声明的位置决定。这意味着在函数内部可以访问外部函数定义的变量，但是外部函数不能访问内部函数的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function outerFunction() &#123;</span><br><span class="line">  const outerVariable = &#x27;I am outer!&#x27;;</span><br><span class="line">  </span><br><span class="line">  function innerFunction() &#123;</span><br><span class="line">    console.log(outerVariable); // 内部函数可以访问外部函数的变量</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  innerFunction();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outerFunction(); // 输出 &quot;I am outer!&quot;</span><br></pre></td></tr></table></figure><p>闭包的概念：</p><p>闭包就是函数和其词法环境的组合，它允许函数访问其外部作用域中的变量，即使函数在外部作用域执行完毕后仍然能够访问这些变量。换句话说，闭包使函数拥有了“记忆力”，可以记住创建它的上下文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function outerFunction() &#123;</span><br><span class="line">  const outerVariable = &#x27;I am outer!&#x27;;</span><br><span class="line">  </span><br><span class="line">  function innerFunction() &#123;</span><br><span class="line">    console.log(outerVariable); // 内部函数可以访问外部函数的变量</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return innerFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const inner = outerFunction();</span><br><span class="line">inner(); // 输出 &quot;I am outer!&quot;</span><br></pre></td></tr></table></figure><p>在这个例子中，innerFunction 是一个闭包，它可以访问外部函数 outerFunction 中的变量 outerVariable。即使 outerFunction 执行完毕，innerFunction 依然可以访问到 outerVariable。</p><p>属性私有化：</p><p>使属性私有化最简单的方法就是在构造函数中创建变量。 可以将该变量范围限定在构造函数中，而不是全局可用。 这样，属性只能由构造函数中的方法访问和更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Bird() &#123;</span><br><span class="line">  let hatchedEgg = 10;</span><br><span class="line"></span><br><span class="line">  this.getHatchedEggCount = function() &#123; </span><br><span class="line">    return hatchedEgg;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">let ducky = new Bird();</span><br><span class="line">ducky.getHatchedEggCount();</span><br></pre></td></tr></table></figure><p>这里的 getHatchedEggCount 是一种特权方法，因为它可以访问私有属性 hatchedEgg。 这是因为 hatchedEgg 是在与 getHatchedEggCount 相同的上下文中声明的。 在 JavaScript 中，函数总是可以访问创建它的上下文。 这就叫做 closure。</p><p>闭包的应用：</p><p>闭包在 JavaScript 中有许多应用场景，常见的包括隐藏数据、封装代码、模块化开发等。例如，可以使用闭包来创建私有变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function createCounter() &#123;</span><br><span class="line">  let count = 0;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    increment: function() &#123;</span><br><span class="line">      count++;</span><br><span class="line">      console.log(count);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: function() &#123;</span><br><span class="line">      count--;</span><br><span class="line">      console.log(count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const counter = createCounter();</span><br><span class="line">counter.increment(); // 输出 1</span><br><span class="line">counter.increment(); // 输出 2</span><br><span class="line">counter.decrement(); // 输出 1</span><br></pre></td></tr></table></figure><p>在这个例子中，createCounter 函数返回一个包含 increment 和 decrement 方法的对象，这些方法都可以访问 createCounter 函数中的 count 变量，但是外部无法直接访问 count 变量。这样就实现了私有变量的效果。</p><p>总之，闭包是 JavaScript 中一个非常有用且强大的特性，它使得函数拥有了持久性的状态，并且可以访问其外部作用域中的变量，从而实现了许多有趣的功能和模式。</p><p>JavaScript 闭包</p><p>更改在 Bird 函数中声明的 weight 方法，使其成为私有变量。 然后，创建一个返回 weight 值 15 的 getWeight 方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Bird() &#123;  </span><br><span class="line">  // 使用let或const来声明私有变量  </span><br><span class="line">  let weight = 15;// 这里是私有的  </span><br><span class="line">  </span><br><span class="line">  // 返回一个对象，其中包含访问私有变量的公有方法  </span><br><span class="line">  return &#123;  </span><br><span class="line">    getWeight: function() &#123;  </span><br><span class="line">      return weight;  </span><br><span class="line">    &#125;  </span><br><span class="line">    // 如果需要，还可以添加其他方法或属性，它们都可以访问这个私有的weight变量  </span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">// 使用Bird函数  </span><br><span class="line">//const myBird = Bird();  </span><br><span class="line">//console.log(myBird.getWeight()); // 输出: 15  </span><br><span class="line">  </span><br><span class="line">// 注意：你不能直接访问myBird.weight，因为它没有在Bird函数返回的对象中定义，所以是“私有”的  </span><br><span class="line">//console.log(myBird.weight); // 这将输出undefined，因为weight是私有的</span><br></pre></td></tr></table></figure><h1 id="JavaScript-bind，apply，call"><a href="#JavaScript-bind，apply，call" class="headerlink" title="JavaScript bind，apply，call"></a>JavaScript bind，apply，call</h1><p>改变this指向：</p><p>bind，call，apply的作用都是用来改变this指向的，那为什么要改变this指向呢？请看下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var name=&quot;lucy&quot;;</span><br><span class="line">let obj=&#123;</span><br><span class="line"> name:&quot;martin&quot;,</span><br><span class="line"> say:function () &#123;</span><br><span class="line"> console.log(this.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.say(); //martin，this指向obj对象</span><br><span class="line">setTimeout(obj.say,0); //lucy，this指向window对象</span><br></pre></td></tr></table></figure><p>可以观察到，正常情况下 say 方法中的this是指向调用它的 obj 对象的，而定时器 setTimeout 中的 say 方法中的 this 是指向window对象的(在浏览器中)，这是因为 say 方法在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，但我们需要的是 say 方法中 this 指向obj对象，因此我们需要修改 this 的指向。</p><p>apply方法：apply接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入，且当第一个参数为null、的时候，默认指向window(在浏览器中)，使用apply方法改变this指向后原函数会立即执行，且此方法只是临时改变thi指向一次。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var name=&quot;martin&quot;;</span><br><span class="line">var obj=&#123;</span><br><span class="line"> name:&quot;lucy&quot;,</span><br><span class="line"> say:function(year,place)&#123;</span><br><span class="line"> console.log(this.name+&quot; is &quot;+year+&quot; born from &quot;+place);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var say=obj.say;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line"> say.apply(obj,[&quot;1996&quot;,&quot;China&quot;])</span><br><span class="line">&#125; ,0); //lucy is 1996 born from China,this改变指向了obj</span><br><span class="line">say(&quot;1996&quot;，&quot;China&quot;) //martin is 1996 born from China,this指向window，说明apply只是临时改变一次this指向</span><br></pre></td></tr></table></figure><p><strong>call方法：</strong>call方法的第一个参数也是this的指向，后面传入的是一个参数列表（注意和apply传参的区别）。当一个参数为null或的时候，表示指向window（在浏览器中），和apply一样，call也只是临时改变一次this指向，并立即执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function.call(thisArg, arg1, arg2, ...);</span><br></pre></td></tr></table></figure><p>bind方法：bind方法和call很相似，第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入，call则必须一次性传入所有参数。</p><p>bind 方法会创建一个新的函数，并将指定的对象绑定为函数执行时的上下文。该方法不会立即调用函数，而是返回一个新的函数，你可以稍后调用这个新函数。bind 方法的基本用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let obj=&#123;</span><br><span class="line"> name:&quot;martin&quot;,</span><br><span class="line"> say:function () &#123;</span><br><span class="line"> console.log(this.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let obj2 = &#123;</span><br><span class="line"> name:&quot;bob&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let bound = obj.say.bind(obj2)</span><br><span class="line">bound()</span><br></pre></td></tr></table></figure><p>apply，call，bind三者的区别：</p><p>三者都可以改变函数的this对象指向。</p><p>三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为或null，则默认指向全局window。</p><p>三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入。</p><p>bind 是返回绑定this之后的函数，便于稍后调用；apply 、call 则是立即执行 。</p><p>JavaScript bind，apply，call</p><p>修改指定行代码，使用 bind 改变 this 指向,使其正常代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let module = &#123;</span><br><span class="line">  x: 42,</span><br><span class="line">  getX: function () &#123;</span><br><span class="line">    return this.x;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let unboundGetX = module.getX;</span><br><span class="line">let boundGetX=unboundGetX.bind(module);;// Change this line</span><br><span class="line">console.log(boundGetX());</span><br></pre></td></tr></table></figure><h1 id="JavaScript-回调函数"><a href="#JavaScript-回调函数" class="headerlink" title="JavaScript 回调函数"></a>JavaScript 回调函数</h1><p>在JavaScript中，回调函数是一种常见的编程模式，用于处理异步操作和事件处理。回调函数是作为参数传递给另一个函数，当某个特定的事件发生或异步操作完成时，该回调函数会被调用执行。</p><p>下面详细讲解一下JavaScript中回调函数的特点、用法和示例：</p><p>特点：</p><p>回调函数是一种函数类型的值。<br>回调函数作为参数传递给其他函数，以便在特定的事件发生时调用。<br>回调函数通常用于处理异步操作的结果或处理事件响应。<br>用法：</p><p>处理异步操作：当需要处理耗时的操作（例如网络请求、文件读取等）时，可以将回调函数作为异步操作的回调，在操作完成后执行。<br>事件处理：在事件驱动的编程中，可以将回调函数注册为事件的处理函数，在事件发生时执行。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 处理异步操作</span><br><span class="line">function fetchData(url, callback) &#123;</span><br><span class="line">    // 模拟异步操作，延迟1秒钟</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        // 模拟获取数据</span><br><span class="line">        let data = &#123; id: 1, name: &#x27;John&#x27; &#125;;</span><br><span class="line">        // 调用回调函数并传递数据</span><br><span class="line">        callback(data);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line">//使用箭头函数传入，获取到数据后，执行打印数据操作</span><br><span class="line">fetchData(&#x27;https://example.com/data&#x27;, res =&gt;&#123;</span><br><span class="line">    console.log(&quot;Get Data：&quot; , res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，回调函数 res&#x3D;&gt;{} 用于处理异步操作 fetchData 的结果，回调函数在异步操作完成后被调用。另外，回调函数也被用作事件处理函数，在按钮点击事件发生时执行。</p><p>JavaScript 回调函数</p><p>fetchData 函数用于模拟查询包含name的数据，并且将数据返回给回调函数中，请完成指定行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function fetchData(name, callback) &#123;</span><br><span class="line">const data = [</span><br><span class="line">      &#123;name:&quot;zhang&quot;,stuID:&quot;S234&quot;&#125;,</span><br><span class="line">      &#123;name:&quot;shen&quot;,stuID:&quot;S235&quot;&#125;,</span><br><span class="line">      &#123;name:&quot;liu&quot;,stuID:&quot;S236&quot;&#125;,</span><br><span class="line">    ]</span><br><span class="line">  </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      let i = 0</span><br><span class="line">      for(;i&lt;data.length;i++)&#123;</span><br><span class="line">        if(data[i].name == name)&#123;</span><br><span class="line">         callback(data[i]); </span><br><span class="line">        break; // 退出循环  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if(i == data.length) callback(&quot;没有查到包含&quot;+ name +&quot;的数据~&quot;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchData(&quot;zhang&quot;,res=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">fetchData(&quot;wang&quot;,res=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="创建一个-JavaScript-Promise"><a href="#创建一个-JavaScript-Promise" class="headerlink" title="创建一个 JavaScript Promise"></a>创建一个 JavaScript Promise</h1><p>Promise 是异步编程的一种解决方案 - 它在未来的某时会生成一个值。 任务完成，分执行成功和执行失败两种情况。 Promise 是构造器函数，需要通过 new 关键字来创建。 构造器参数是一个函数，该函数有两个参数 - resolve 和 reject。 通过它们来判断 promise 的执行结果。 用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const myPromise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个 JavaScript Promise</p><p>创建一个名为 makeServerRequest 的 promise。 给构造器函数传入 resolve 和 reject 两个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="通过-resolve-和-reject-完成-Promise"><a href="#通过-resolve-和-reject-完成-Promise" class="headerlink" title="通过 resolve 和 reject 完成 Promise"></a>通过 resolve 和 reject 完成 Promise</h1><p>ES6中的Promise是一种用于处理异步操作的对象，它代表了一个异步操作的最终完成或失败，以及其结果值。Promise对象有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。当Promise对象的状态从pending转变为fulfilled或rejected时，将会执行相应的回调函数。</p><p>上一个挑战里创建的 promise 一直阻塞在 pending 状态里，因为没有调用 promise 的完成方法。 Promise 提供的 resolve 和 reject 参数就是用来结束 promise 的。 Promise 成功时调用 resolve，promise 执行失败时调用 reject， 如下文所述，这些方法需要有一个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myPromise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  if(condition here) &#123;</span><br><span class="line">    resolve(&quot;Promise was fulfilled&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reject(&quot;Promise was rejected&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的示例使用字符串作为这些函数的参数，但参数实际上可以是任何格式。 通常，它可能是一个包含数据的对象，你可以将它放在网站或其他地方。</p><p>通过 resolve 和 reject 完成 Promise</p><p>使 promise 可以处理成功和失败情况。 如果 responseFromServer 是 true，调用 resolve 方法使 promise 成功。 给 resolve 传递值为 We got the data 的字符串。 如果 responseFromServer 是 false， 使用 reject 方法并传入值为 Data not received 的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  let responseFromServer = true;</span><br><span class="line"></span><br><span class="line">  if(responseFromServer) &#123;</span><br><span class="line">    resolve(&quot;We got the data&quot;);</span><br><span class="line">  &#125; else &#123;  </span><br><span class="line">    reject(&quot;Data not received&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="用-then-处理-Promise-完成的情况"><a href="#用-then-处理-Promise-完成的情况" class="headerlink" title="用 then 处理 Promise 完成的情况"></a>用 then 处理 Promise 完成的情况</h1><p>当程序需要花费未知的时间才能完成时（比如一些异步操作），一般是服务器请求，promise 很有用。 服务器请求会花费一些时间，当结束时，需要根据服务器的响应执行一些操作。 这可以用 then 方法来实现， 当 promise 完成 resolve 时会触发 then 方法。 例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.then(result =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>result 即传入 resolve 方法的参数。</p><p>用 then 处理 Promise 完成的情况</p><p>给 promise 添加 then 方法。 用 result 做为回调函数的参数并将 result 打印在控制台。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  // responseFromServer is set to true to represent a successful response from a server</span><br><span class="line">  let responseFromServer = true;</span><br><span class="line"></span><br><span class="line">  if(responseFromServer) &#123;</span><br><span class="line">    resolve(&quot;We got the data&quot;);</span><br><span class="line">  &#125; else &#123;  </span><br><span class="line">    reject(&quot;Data not received&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">makeServerRequest.then(  </span><br><span class="line">  (result) =&gt; &#123;  </span><br><span class="line">    // 当Promise被解析时，这个回调函数会被调用  </span><br><span class="line">    // result参数包含了Promise解析后的值  </span><br><span class="line">    console.log(result); // 打印结果到控制台  </span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="使用-catch-处理-Promise-失败的情况"><a href="#使用-catch-处理-Promise-失败的情况" class="headerlink" title="使用 catch 处理 Promise 失败的情况"></a>使用 catch 处理 Promise 失败的情况</h1><p>当 promise 失败时会调用 catch 方法。 当 promise 的 reject 方法执行时会直接调用。 用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.catch(error =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>error 是传入 reject 方法的参数。</p><p>使用 catch 处理 Promise 失败的情况</p><p>给 promise 添加 catch 方法。 用 error 作为回调函数的参数，并把 error 打印到控制台。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  // responseFromServer is set to false to represent an unsuccessful response from a server</span><br><span class="line">  let responseFromServer = false;</span><br><span class="line"></span><br><span class="line">  if(responseFromServer) &#123;</span><br><span class="line">    resolve(&quot;We got the data&quot;);</span><br><span class="line">  &#125; else &#123;  </span><br><span class="line">    reject(&quot;Data not received&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">makeServerRequest.then(result =&gt; &#123;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;).catch(error =&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Promise-进阶"><a href="#Promise-进阶" class="headerlink" title="Promise 进阶"></a>Promise 进阶</h1><p>Promise链：</p><p>前面讲完了Promise的基础用法，Promise对象也可以链式调用，每个 then() 或 catch() 方法都可以返回一个新的Promise对象，因此可以串联多个异步操作。这种机制被称为Promise链。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let myPromise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    if(true)&#123;</span><br><span class="line">        resolve(&#x27;Step 1 data&#x27;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        reject(&#x27;Caught error&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myPromise.then((data) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Step 1:&#x27;, data);</span><br><span class="line">    return &#x27;Step 2 data&#x27;;</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Step 2:&#x27;, data);</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(&#x27;Step 3 data&#x27;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Step 3:&#x27;, data);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Caught error:&#x27;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，每个 then() 返回的是一个新的Promise对象，可以在其中执行新的异步操作，并在下一个 then() 中处理其结果。</p><p>Promise.all() 和 Promise.race()：</p><p>Promise.all() 接收一个Promise数组作为参数，当所有Promise都成功时，返回一个包含所有Promise结果的数组；如果任何一个Promise失败，立即返回失败状态。</p><p>Promise.race() 接收一个Promise数组作为参数，返回第一个完成的Promise的结果或失败原因。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let promise1 = Promise.resolve(&#x27;Promise 1&#x27;);</span><br><span class="line">let promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        resolve(&#x27;Promise 2&#x27;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all([promise1, promise2]).then((values) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;All promises resolved:&#x27;, values);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Error:&#x27;, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([promise1, promise2]).then((value) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;First promise resolved:&#x27;, value);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Error:&#x27;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 进阶</p><p>使用 Promise.all 和 Promise.race 函数，参数传入 promise1 和 promise2，打印结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let promise1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        resolve(&#x27;Promise 1 Data&#x27;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line">let promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        resolve(&#x27;Promise 2 Data&#x27;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all([promise1, promise2]).then((values) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;All promises resolved:&#x27;, values);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Promise.race([promise1, promise2]).then((value) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;First promise resolved:&#x27;, value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flexbox布局</title>
      <link href="/2024/07/12/flexbox%E5%B8%83%E5%B1%80/"/>
      <url>/2024/07/12/flexbox%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>Flexbox（Flexible Box）布局是 CSS3 中引入的一种弹性盒子布局模型，旨在更方便、更有效地对容器中的子元素进行布局。它提供了一种灵活的方式来设计和排列网页中的元素，使得元素可以自动适应不同的屏幕大小和设备类型。</p><h1 id="使用-display-flex-定位两个盒子"><a href="#使用-display-flex-定位两个盒子" class="headerlink" title="使用 display: flex 定位两个盒子"></a>使用 display: flex 定位两个盒子</h1><p>只要在一个元素的 CSS 中添加 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display: flex;</span><br></pre></td></tr></table></figure><p>就可以使用其它 flex 属性来构建响应式页面了。</p><h1 id="在推文中添加弹性盒子布局"><a href="#在推文中添加弹性盒子布局" class="headerlink" title="在推文中添加弹性盒子布局"></a>在推文中添加弹性盒子布局</h1><p>上一个挑战演示了 display: flex， 现在你需要把它添加到推文内嵌的多个组件中，调整它们的位置。</p><p>在推文中添加弹性盒子布局<br>请为下列项目添加 CSS 属性 display: flex。 注意，以下 CSS 选择器已为你写好：</p><p>header、header 中的 .profile-name、header 中的 .follow-btn、header 中的 h3 和 h4、footer 以及 footer 中的 .stats</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header &#123;</span><br><span class="line">   display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line"></span><br><span class="line">    margin-left: 10px;</span><br><span class="line">     display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line"></span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">     display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">     display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer &#123;</span><br><span class="line">   display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line"></span><br><span class="line">    font-size: 15px;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-属性创建一个行"><a href="#使用-flex-direction-属性创建一个行" class="headerlink" title="使用 flex-direction 属性创建一个行"></a>使用 flex-direction 属性创建一个行</h1><p>给元素添加 display: flex 属性可以让它变成 flex 容器， 然后可以让元素的项目排列成行或列。 只要给父元素添加 flex-direction 属性，并把属性值设置为 row 或 column，即可横向排列或纵向排列它的所有子元素。 创建一行将使子项水平对齐，创建一列将使子项垂直对齐。</p><p>flex-direction 的其他可选值还有 row-reverse 和 column-reverse。</p><p>注意： flex-direction 的默认值为 row。</p><p>使用 flex-direction 属性创建一个行</p><p>请为 #box-container 添加 CSS 属性 flex-direction，将其值设为 row-reverse。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row-reverse;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-在嵌入推文中创建多行"><a href="#使用-flex-direction-在嵌入推文中创建多行" class="headerlink" title="使用 flex-direction 在嵌入推文中创建多行"></a>使用 flex-direction 在嵌入推文中创建多行</h1><p>嵌入推文示例中的 header 和 footer 有自己的子元素，使用 flex-direction 属性可以把这些子元素排成行。 这个属性告诉 CSS 需要将这些子元素水平排列。</p><p>使用 flex-direction 在嵌入推文中创建多行</p><p>为 header 和 footer 添加 CSS 属性 flex-direction，并把值设为 row。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">     flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-属性创建一列"><a href="#使用-flex-direction-属性创建一列" class="headerlink" title="使用 flex-direction 属性创建一列"></a>使用 flex-direction 属性创建一列</h1><p>在之前两个挑战中，我们使用了 flex-direction 属性，值为 row。 这个属性还能创建一个列，让子元素竖直排列在 flex 容器中。</p><p>使用 flex-direction 属性创建一列</p><p>请给 #box-container 元素添加 CSS 属性 flex-direction，并将其属性值设置为 column。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-在嵌入推文中创建一列"><a href="#使用-flex-direction-在嵌入推文中创建一列" class="headerlink" title="使用 flex-direction 在嵌入推文中创建一列"></a>使用 flex-direction 在嵌入推文中创建一列</h1><p>在之前的挑战中，我们把嵌入推文的 header 和 footer 的 flex-direction 属性值设为 row（行）。 相似地，把 .profile-name 选择器中的元素竖着排列会好看一点。</p><p>使用 flex-direction 在嵌入推文中创建一列</p><p>请给标题的 .profile-name 元素添加 CSS 属性 flex-direction，并将其值设为 column</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header, footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-justify-content-属性对齐元素"><a href="#使用-justify-content-属性对齐元素" class="headerlink" title="使用 justify-content 属性对齐元素"></a>使用 justify-content 属性对齐元素</h1><p>flex 子元素有时不能充满整个 flex 容器， 所以我们经常需要告诉 CSS 以什么方式排列 flex 子元素，以及调整它们的间距。 幸运的是，我们可以通过 justify-content 属性的不同值来实现。 在介绍属性的可选值之前，我们要先理解一些重要术语。</p><p><a href="https://www.freecodecamp.org/chinese/news/flexbox-the-ultimate-css-flex-cheatsheet/">阅读更多关于 flex-box 属性的信息</a></p><p>回忆一下，如果把 flex 容器设为一个行，它的子元素会从左到右逐个排列。 如果把 flex 容器设为一个列，它的子元素会从上到下逐个排列。 子元素排列的方向被称为 main axis（主轴）。 对一行来说，主轴水平贯穿每一个对象； 对于列，主轴垂直贯穿每一个对象。</p><p>对于如何沿主轴线排放 flex 项目，有几种选择。 常用的一种是 justify-content: center;：即 flex 子元素在 flex 容器中居中排列。 其他选择包括：</p><p>flex-start：从 flex 容器的起始位置开始排列项目。 对行来说是把项目移至左边， 对于列是把项目移至顶部。 如未设置 justify-content 的值，那么这就是默认值。</p><p>flex-end：从 flex 容器的终止位置开始排列项目。 对行来说是把项目移至右边， 对于列是把项目移至底部。</p><p>space-between：项目间保留一定间距地沿主轴居中排列。 第一个和最后一个项目被放置在容器边沿。 例如，在行中第一个项目会紧贴着容器左边，最后一个项目会紧贴着容器右边，然后其他项目均匀排布。</p><p>space-around：与space-between相似，但头尾两个项目不会紧贴容器边缘，所有项目之间的空间均匀排布。</p><p>space-evenly：在 flex 项目之间均匀分配空间，在 flex 容器的任一端都有一个完整的空间。<br>使用 justify-content 属性对齐元素</p><p>这个例子可以帮助你理解这个属性。 请为 #box-container 元素添加 CSS 属性 justify-content，并将其属性值设置为 center。</p><p>提示：<br>在编辑器里试试 justify-content 的其他可用值，看看它们之间的区别。 但要通过挑战，你必须把属性值设为 center。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    background: gray;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    justify-content: center;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="在推文中使用-justify-content-属性"><a href="#在推文中使用-justify-content-属性" class="headerlink" title="在推文中使用 justify-content 属性"></a>在推文中使用 justify-content 属性</h1><p>上一项挑战展示了 justify-content 属性的作用。 如果我们想对齐推文内的子元素，可以把给 .profile-name 元素应用这个属性。</p><p>在推文中使用 justify-content 属性</p><p>请在 header 中的 .profile-name 元素添加 CSS 属性 justify-content，把它的属性值设为上面挑战提到的任意可用值。</p><p>(.follow-btn 应在页面上呈现。 请关闭广告拦截器等任何扩展。</p><p>.profile-name 元素的 justify-content 属性可选用以下属性值：center、flex-start、flex-end、space-between、space-around 或 space-evenly。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header, footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-align-items-属性对齐元素"><a href="#使用-align-items-属性对齐元素" class="headerlink" title="使用 align-items 属性对齐元素"></a>使用 align-items 属性对齐元素</h1><p>align-items 属性与 justify-content 类似。 回忆一下，justify-content 属性使 flex 子元素沿主轴排列。 行的主轴是水平线，列的主轴是垂直线。</p><p>Flex 容器中，与主轴垂直的叫做 cross axis（交叉轴）。 行的交叉轴是垂直的，列的交叉轴是水平的。</p><p>CSS 中的 align-items 属性用来定义 flex 子元素沿交叉轴的对齐方式。 对行来说，定义的是元素的上下对齐方式； 对列来说，是定义元素的左右对齐方式。</p><p>align-items 的可选值包括：</p><p>flex-start：从 flex 容器的起始位置开始对齐项目。 对行来说，把项目移至容器顶部； 对列来说，是把项目移至容器左边。</p><p>flex-end：从 flex 容器的终止位置开始对齐项目。 对行来说，把项目移至容器底部； 对列来说，把项目移至容器右边。</p><p>center：把项目居中放置。 对行来说，垂直居中（项目距离顶部和底部的距离相等）； 对列来说，水平居中（项目距离左边和右边的距离相等）。</p><p>stretch：拉伸项目，填满 flex 容器。 例如，排成行的项目从容器顶部拉伸到底部。 如未设置align-items的值，那么这就是默认值。</p><p>baseline：沿基线对齐。 基线是文本相关的概念，可以认为它是字母排列的下端基准线。</p><p>使用 align-items 属性对齐元素<br>这个例子可以帮助你理解这个属性。 请在 #box-container 里添加 CSS 属性 align-items 并将值设为 center。</p><p>提示： 请在编辑器里试试 align-items 的其他值，看看它们之间的区别。 但要通过挑战，你必须把属性值设为 center。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    background: gray;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 200px;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 200px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;p&gt;Goodbye&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="在推文中使用-align-items-属性"><a href="#在推文中使用-align-items-属性" class="headerlink" title="在推文中使用 align-items 属性"></a>在推文中使用 align-items 属性</h1><p>在上一个挑战中，我们介绍了 align-items 属性并给出了示例。 我们可以对推文的几个嵌入元素使用这个属性，以调整其中 flex 元素的对齐方式。</p><p>在推文中使用 align-items 属性</p><p>为 header 中的 .follow-btn 元素添加 CSS 属性 align-items， 并将其属性值设为 center。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header, footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">     align-items: center;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-wrap-属性包裹一行或一列"><a href="#使用-flex-wrap-属性包裹一行或一列" class="headerlink" title="使用 flex-wrap 属性包裹一行或一列"></a>使用 flex-wrap 属性包裹一行或一列</h1><p>CSS flexbox 具有将 flex 容器拆分为多行（或列）的功能。 默认情况下，flex 容器会调整项目大小，把它们都塞到一起。 对于行来说，所有项目都会在一条直线上。</p><p>不过，使用 flex-wrap 属性可以使项目换行展示。 这意味着多出来的子元素会被移到新的行或列。 换行发生的断点由子元素和容器的大小决定。</p><p>换行方向的可选值有这些：</p><p>nowrap：默认值，不换行。</p><p>wrap：如果排列以行为基准，就将行从上往下排列；如果排列以列为基准，就将列从左往右排列。</p><p>wrap-reverse：如果排列以行为基准，就将行从下往上排列；如果排列以列为基准，就将列从右往左排列。</p><p>使用 flex-wrap 属性包裹一行或一列</p><p>现在的布局中，一行里面的元素太多了。 请为 #box-container 元素添加 CSS 属性 flex-wrap，把将其属性值设为 wrap。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    background: gray;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 100%; </span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-3 &#123;</span><br><span class="line">    background-color: violet;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-4 &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-5 &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-6 &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-3&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-4&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-5&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-6&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-shrink-属性定义-flex-子元素的收缩规则"><a href="#使用-flex-shrink-属性定义-flex-子元素的收缩规则" class="headerlink" title="使用 flex-shrink 属性定义 flex 子元素的收缩规则"></a>使用 flex-shrink 属性定义 flex 子元素的收缩规则</h1><p>目前为止，挑战里提到的属性都是应用于 flex 容器（flex 子元素的父元素）的。 除此之外，flex 子元素也有很多实用属性。</p><p>首先介绍的是 flex-shrink 属性。 使用之后，如果 flex 容器太小，则子元素会自动缩小。 当容器的宽度小于里面所有子元素的宽度之和时，所有子元素都会自动压缩。</p><p>子元素的 flex-shrink 接受数值作为属性值。 数值越大，则该元素与其他元素相比会被压缩得更厉害。 比如，一个项目的 flex-shrink 属性值为 1，另一个项目的 flex-shrink 属性值为 3，那么后者相比前者会受到 3 倍压缩。</p><p>使用 flex-shrink 属性定义 flex 子元素的收缩规则</p><p>请为 #box-1 和 #box-2 添加 CSS 属性 flex-shrink。 将 #box-1 的属性值设为 1，将 #box-2 的属性值设为 2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-shrink: 2;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="使用-flex-grow-属性定义-flex-子元素的增长系数"><a href="#使用-flex-grow-属性定义-flex-子元素的增长系数" class="headerlink" title="使用 flex-grow 属性定义 flex 子元素的增长系数"></a>使用 flex-grow 属性定义 flex 子元素的增长系数</h1><p>与 flex-shrink 相对的是 flex-grow。 你应该还记得，flex-shrink 会在容器太小时对子元素作出调整。 相应地，flex-grow 会在容器太大时对子元素作出调整。</p><p>例子与上一个挑战相似，如果一个项目的 flex-grow 属性值为 1，另一个项目的 flex-grow 属性值为 3，那么值为 3 的一个会较另一个扩大 3 倍。</p><p>使用 flex-grow 属性定义 flex 子元素的增长系数</p><p>请为 #box-1 和 #box-2 添加 CSS 属性 flex-grow。 将 #box-1 的属性值设为 1，#box-2 的属性值设为 2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-grow: 2;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-basis-属性设置元素的初始大小"><a href="#使用-flex-basis-属性设置元素的初始大小" class="headerlink" title="使用 flex-basis 属性设置元素的初始大小"></a>使用 flex-basis 属性设置元素的初始大小</h1><p>flex-basis 属性定义了在使用 CSS 的 flex-shrink 或 flex-grow 属性对元素进行调整前，元素的初始大小。</p><p>flex-basis 属性的单位与其他表示尺寸的属性的单位一致（px、em、% 等）。 如果值为 auto，则项目的尺寸随内容调整。</p><p>使用 flex-basis 属性设置元素的初始大小</p><p>使用 flex-basis 为盒子设置初始值。 请给 #box-1 和 #box-2 添加 CSS 属性 flex-basis。 设置 #box-1 的尺寸初始值为 10em，#box-2 的尺寸初始值为 20em。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-basis: 10em;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-basis: 20em;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-短方法属性"><a href="#使用-flex-短方法属性" class="headerlink" title="使用 flex 短方法属性"></a>使用 flex 短方法属性</h1><p>上面几个 flex 属性有一个简写方式。 flex-grow、flex-shrink 和 flex-basis 属性可以在 flex 中一并设置。</p><p>例如，flex: 1 0 10px; 会把项目属性设为 flex-grow: 1;、flex-shrink: 0; 以及 flex-basis: 10px;。</p><p>属性的默认设置是 flex: 0 1 auto;。</p><p>使用 flex 短方法属性</p><p>请给 #box-1 和 #box-2 添加 flex 属性。 设置 #box-1 的 flex-grow 属性值为 2、flex-shrink 属性值为 2、flex-basis 属性值为 150px。 设置 #box-2 的 flex-grow 属性值为 1、flex-shrink 属性值为 1、flex-basis 属性值为 150px。</p><p>通过上面的设置，在容器大于 300px 时，#box-1 扩大的空间会是 #box-2 扩大空间的两倍；在容器小于 300px 时，前者缩小的空间会是 #box-2 缩小空间的两倍。 300px 是两个盒子的 flex-basis 属性值之和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    flex: 2 2 150px;</span><br><span class="line">    height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    flex: 1 1 150px;</span><br><span class="line">    height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-order-属性重新排列子元素"><a href="#使用-order-属性重新排列子元素" class="headerlink" title="使用 order 属性重新排列子元素"></a>使用 order 属性重新排列子元素</h1><p>order 属性告诉 CSS flex 容器里子元素的顺序。 默认情况下，项目排列顺序与源 HTML 文件中顺序相同。 这个属性接受数字作为参数，可以使用负数。</p><p>使用 order 属性重新排列子元素</p><p>请给 #box-1 和 #box-2 添加 CSS 属性 order， 并将 #box-1 的属性值设为 2，#box-2 的属性值设为 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    order:2;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    order: 1;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-align-self-属性"><a href="#使用-align-self-属性" class="headerlink" title="使用 align-self 属性"></a>使用 align-self 属性</h1><p>flex 子项目的最后一个属性是 align-self。 这个属性允许你调整单个子元素自己的对齐方式，而不会影响到全部子元素。 因为 float、clear 和 vertical-align 等调整对齐方式的属性都不能应用于 flex 子元素，所以这个属性显得十分有用。</p><p>align-self 可设置的值与 align-items 的一样，并且它会覆盖 align-items 所设置的值。</p><p>使用 align-self 属性</p><p>请为 #box-1 和 #box-2 添加 CSS 属性 align-self。 将 #box-1 的 align-self 属性值设为 center，将 #box-2 的设为 flex-end。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    align-self: center;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    align-self: flex-end;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/2024/07/10/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/10/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>层叠样式表是一种样式表语言，用来描述 HTML 或 XML(包括如 SVG、MathML 或 XHTML 之类的 XML 分支语言)文档的呈现方式。CSS(层叠样式表)是美化网页的关键工具，通过本课程，您将学会如何运用 CSS 的各种属性和技巧，使您的网页看起来更具吸引力和专业性。您将了解如何控制文本样式、背景、布局，以及响应式设计等，让您的网页在各种设备上都能够优雅地展现。</p><h1 id="更改文本的颜色"><a href="#更改文本的颜色" class="headerlink" title="更改文本的颜色"></a>更改文本的颜色</h1><p>以下是将 h2 元素设置为蓝色的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 style=&quot;color: blue;&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p><em><strong>请注意，需要在内联 style 声明末尾加上 ;</strong></em></p><h1 id="使用元素选择器来设置元素的样式"><a href="#使用元素选择器来设置元素的样式" class="headerlink" title="使用元素选择器来设置元素的样式"></a>使用元素选择器来设置元素的样式</h1><p>在代码的顶部，创建一个 style 声明区域，如下方所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在样式声明区域内，可以为所有 h2 元素创建一个 CSS selector。 如果想让所有 h2 元素在变成红色，可以添加下方的样式规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  h2 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>请注意，每个元素的样式规则都应该有开始和结束大括号（{ 和 }）。 还需要确保元素的样式定义在开始和结束样式标签之间。 你需要确保所有样式规则位于花括号之间，并且每条样式规则都以<em><strong>分号</strong></em>结束。</p><h1 id="使用-class-选择器设置单个元素的样式"><a href="#使用-class-选择器设置单个元素的样式" class="headerlink" title="使用 class 选择器设置单个元素的样式"></a>使用 class 选择器设置单个元素的样式</h1><p>CSS 的 class 具有可重用性，可应用于各种 HTML 元素。</p><p>一个 CSS class 声明示例如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .blue-text &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>可以看到，我们在 &lt;style&gt; 样式声明区域里，创建了一个名为 blue-text 的 class 选择器。 你可以这样将 class 应用于 HTML 元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 class=&quot;blue-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p> 注意:在 CSS style 元素里，class 名以一个<em><strong>句点</strong></em>开头。 在 HTML 元素的 class 属性中，class 名的开头<em><strong>没有句点</strong></em></p><h1 id="使用-class-选择器设置多个元素的样式"><a href="#使用-class-选择器设置多个元素的样式" class="headerlink" title="使用 class 选择器设置多个元素的样式"></a>使用 class 选择器设置多个元素的样式</h1><p>通过 CSS class 选择器，多个 HTML 元素可以使用相同的 CSS 样式规则</p><h1 id="更改元素的字体大小"><a href="#更改元素的字体大小" class="headerlink" title="更改元素的字体大小"></a>更改元素的字体大小</h1><p>字体大小由 font-size 属性控制，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置元素的字体族名"><a href="#设置元素的字体族名" class="headerlink" title="设置元素的字体族名"></a>设置元素的字体族名</h1><p>通过 font-family 属性，我们可以设置元素里的字体族名。</p><p>如果你想将 h2 元素的字体设置为 sans-serif，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h2 &#123;</span><br><span class="line">  font-family: sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="引入谷歌字体"><a href="#引入谷歌字体" class="headerlink" title="引入谷歌字体"></a>引入谷歌字体</h1><p>在我们的网站上，除了使用系统提供的默认字体以外，我们也可以使用自定义字体。 网络上有很多字体库。 在这个例子中，我们将使用 Google 字体库</p><p>Google 字体库是一个免费的 Web 字体库，我们只需要在 CSS 里引用字体的 URL 即可使用</p><p>要引入 Google Font，你需要从 Google Fonts 上复制字体的 URL，并粘贴到你的 HTML 里面。 在这个挑战中，我们需要引入 Lobster 字体。 因此，请复制以下代码段，并粘贴到代码编辑器顶部，即放到 style 标签之前。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure><p>现在可以在 CSS 中使用 Lobster 字体，并像下面一样使用 Lobster 作为 FAMILY_NAME：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: FAMILY_NAME, GENERIC_NAME;</span><br></pre></td></tr></table></figure><p>GENERIC_NAME 是可选的，它用来指明在其他字体不可用时的后备字体。 我们会在下一个挑战中详细说明</p><p>字体名区分大小写，并且如果字体名含有空格，则在声明时需要用引号包起来。 例如，使用 “Open Sans” 字体需要添加引号，而 Lobster 则不需要</p><h1 id="字体如何优雅降级"><a href="#字体如何优雅降级" class="headerlink" title="字体如何优雅降级"></a>字体如何优雅降级</h1><p>所有浏览器都有几种默认字体， 包括 monospace、serif 和 sans-serif</p><p>在字体不可用的时候，你可以告诉浏览器通过“降级”去使用其他字体</p><p>如果你想将一个元素的字体设置成 Helvetica，但当 Helvetica 不可用时，降级使用 sans-serif 字体，那么可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  font-family: Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通用字体名不区分大小写。 同时，也不需要使用引号，因为它们是 CSS 中的关键字</p><hr><p>eg:<br>字体如何优雅降级<br>首先，添加 monospace 字体到 h2 元素里，它现在拥有 Lobster 和 monospace 两种字体。</p><p>在上一个挑战里，你已经通过 link 标签从谷歌字体库引入了 Lobster 字体。 现在让我们使用之前学习的 HTML 注释，将 Lobster 字体的引入(是最上面引入url那个)注释掉，这样一来，这个引入的字体就会失效。 此时，你会发现 h2 元素降级到了 monospace 字体。</p><p>Note: 如果你的电脑里已经安装了 Lobster 字体，你就看不到这个降级过程，因为浏览器会在你的电脑中找到该字体</p><hr><h1 id="调整图片大小"><a href="#调整图片大小" class="headerlink" title="调整图片大小"></a>调整图片大小</h1><p>CSS 的 width 属性可以控制元素的宽度。 和设置文本字号一样，我们会以 px（像素）为单位来设置图片的宽度。</p><p>例如，如果你想创建一个叫 larger-image 的 CSS class，来控制 HTML 元素的宽度为 500px，就可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .larger-image &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><p>eg:</p><p>调整图片的大小</p><p>创建一个叫 smaller-image 的 CSS class，并用它来设置图片宽度为 100px。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .red-text &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h2 &#123;</span><br><span class="line">    font-family: Lobster, monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">  &#125;</span><br><span class="line">  .smaller-image&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;red-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;p class=&quot;red-text&quot;&gt;Click here to view more &lt;a href=&quot;#&quot;&gt;cat photos&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;smaller-image&quot; src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Things cats love:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;Top 3 things cats hate:&lt;/p&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; checked&gt; Indoor&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot; checked&gt; Loving&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Energetic&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><h1 id="在元素周围添加边框"><a href="#在元素周围添加边框" class="headerlink" title="在元素周围添加边框"></a>在元素周围添加边框</h1><p>CSS 边框具有 style、color、width 属性。</p><p>假如我们要将一个 HTML 元素边框设置为 5px 的红色实线边框，我们可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .thin-red-border &#123;</span><br><span class="line">    border-color: red;</span><br><span class="line">    border-width: 5px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><p>eg:</p><p>在元素周围添加边框</p><p>创建一个名为 thick-green-border 的 class， 该 class 应在 HTML 元素周围添加一个 10px 的绿色实线边框。 将这个 class 应用于你的猫图。</p><p>记得在一个元素上可以同时应用多个 class，使用空格来分隔不同 class 即可， 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img class=&quot;class1 class2&quot;&gt;</span><br></pre></td></tr></table></figure><p>完整：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .red-text &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h2 &#123;</span><br><span class="line">    font-family: Lobster, monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .smaller-image &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .thick-green-border&#123;</span><br><span class="line">     border-color: green;</span><br><span class="line">    border-width: 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;red-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;p class=&quot;red-text&quot;&gt;Click here to view more &lt;a href=&quot;#&quot;&gt;cat photos&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;smaller-image thick-green-border&quot; src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Things cats love:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;Top 3 things cats hate:&lt;/p&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; checked&gt; Indoor&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot; checked&gt; Loving&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Energetic&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><h1 id="用-border-radius-添加圆角边框"><a href="#用-border-radius-添加圆角边框" class="headerlink" title="用 border-radius 添加圆角边框"></a>用 border-radius 添加圆角边框</h1><p>猫咪图片的四个角看起来很尖锐， 我们可以使用 border-radius 属性来让它变得圆润。</p><p>用 border-radius 添加圆角边框<br>border-radius 的属性值单位可以是 px（像素）。 请将猫咪图片 border-radius 的属性值设置为 10px。</p><p>注意： 这个挑战有多个解决方法。 例如，添加 border-radius 属性到 .thick-green-border 或 .smaller-image 都是可行的。</p><h1 id="用-border-radius-制作圆形图片"><a href="#用-border-radius-制作圆形图片" class="headerlink" title="用 border-radius 制作圆形图片"></a>用 border-radius 制作圆形图片</h1><p>除像素外，你也可以使用百分比来指定 border-radius 的值。</p><p>用 border-radius 制作圆形图片<br>将 border-radius 的属性值设置为 50%。</p><h1 id="给-div-元素添加背景色"><a href="#给-div-元素添加背景色" class="headerlink" title="给 div 元素添加背景色"></a>给 div 元素添加背景色</h1><p>background-color 属性可以设置元素的背景颜色。</p><p>如果想将一个元素的背景颜色改为 green，可以在 style 里面这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.green-background &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>eg:</p><p>创建一个叫作 silver-background 的 class，并设置 background-color 为 silver。 之后，将这个 class 添加到 div 元素上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .red-text &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h2 &#123;</span><br><span class="line">    font-family: Lobster, monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .thick-green-border &#123;</span><br><span class="line">    border-color: green;</span><br><span class="line">    border-width: 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .smaller-image &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line">  .silver-background&#123;</span><br><span class="line">     background-color: silver;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;red-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;p class=&quot;red-text&quot;&gt;Click here to view more &lt;a href=&quot;#&quot;&gt;cat photos&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;smaller-image thick-green-border&quot; src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;silver-background&quot;&gt;</span><br><span class="line">    &lt;p&gt;Things cats love:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;Top 3 things cats hate:&lt;/p&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; checked&gt; Indoor&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot; checked&gt; Loving&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Energetic&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><h1 id="设置元素的-id"><a href="#设置元素的-id" class="headerlink" title="设置元素的 id"></a>设置元素的 id</h1><p>除了 class 属性，每一个 HTML 元素都有一个 id 属性。</p><p>使用 id 有几个好处：你可以通过 id 选择器来改变单个元素的样式。在稍后的课程中，你还会了解到如何在 JavaScript 里面用它来选择和操作元素。</p><p>根据规范，id 属性应是唯一的。 尽管浏览器并非必须执行这条规范，但这是广泛认可的最佳实践。 因此，请不要给多个元素设置相同的 id。</p><p>设置 h2 元素的 id 为 cat-photo-app 的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 id=&quot;cat-photo-app&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-id-属性来设定元素的样式"><a href="#使用-id-属性来设定元素的样式" class="headerlink" title="使用 id 属性来设定元素的样式"></a>使用 id 属性来设定元素的样式</h1><p>通过 id 属性，你可以做一些很酷的事情。就像 class 一样，你可以使用 CSS 来设置他们的样式。</p><p>不过，id 不可以重复，它只能作用于一个元素上。 如果一个元素同时应用了 class 和 id，且两者设置的样式有冲突，会优先应用 id 中所设置的样式。</p><p>选择 id 为 cat-photo-element 的元素，并设置它的背景颜色为绿色。 可以在 style 标签里这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#cat-photo-element &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在 style 标签里，声明 class 的时候必须在名字前插入 . 符号。 同样，在声明 id 的时候，也必须在名字前插入 # 符号。</p><h1 id="元素的内边距-外边距"><a href="#元素的内边距-外边距" class="headerlink" title="元素的内边距,外边距"></a>元素的内边距,外边距</h1><p>我们暂时把要做的猫咪图片 App 放在一边，先来多了解一下如何给 HTML 添加样式。</p><p>你可能已经注意到了，所有的 HTML 元素都是以矩形为基础。</p><p>每个 HTML 元素所占有的矩形空间由这三个重要的属性来控制：内边距 padding、外边距 margin 、边框 border。</p><p>padding 用来控制着元素内容与 border 之间的空隙大小。</p><p>元素的 margin（外边距） 用来控制元素 border（边框） 与其周围元素之间的距离大小</p><h1 id="给元素的每一侧添加不同的内边距"><a href="#给元素的每一侧添加不同的内边距" class="headerlink" title="给元素的每一侧添加不同的内边距"></a>给元素的每一侧添加不同的内边距</h1><p>有时候，你会想给一个元素每个方向的 padding 都设置一个特定的值</p><p>CSS 允许你使用 padding-top、padding-right、padding-bottom、padding-left 属性来设置四个不同方向的 padding 值。</p><h1 id="给元素的每一侧添加不同的外边距"><a href="#给元素的每一侧添加不同的外边距" class="headerlink" title="给元素的每一侧添加不同的外边距"></a>给元素的每一侧添加不同的外边距</h1><p>有时候，你会想给一个元素每个方向的 margin 都设置成一个特定的值。</p><p>CSS 允许你使用 margin-top、margin-right、margin-bottom、margin-left 属性来设置四个不同方向的 margin 值。</p><h1 id="使用顺时针标记指定元素的内边距"><a href="#使用顺时针标记指定元素的内边距" class="headerlink" title="使用顺时针标记指定元素的内边距"></a>使用顺时针标记指定元素的内边距</h1><p>如果不想每次都要分别声明 padding-top、padding-right、padding-bottom、padding-left 属性，可以把它们汇总在一行里面一并声明，像是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">padding: 10px 20px 10px 20px;</span><br></pre></td></tr></table></figure><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的内边距。</p><h1 id="使用顺时针标记指定元素的外边距"><a href="#使用顺时针标记指定元素的外边距" class="headerlink" title="使用顺时针标记指定元素的外边距"></a>使用顺时针标记指定元素的外边距</h1><p>同样，每个方向的外边距值可以在一行里面汇总声明，而无需分别通过 margin-top、margin-right、margin-bottom、margin-left 分别声明，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin: 10px 20px 10px 20px;</span><br></pre></td></tr></table></figure><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的外边距值。</p><h1 id="使用属性选择器来设置元素的样式"><a href="#使用属性选择器来设置元素的样式" class="headerlink" title="使用属性选择器来设置元素的样式"></a>使用属性选择器来设置元素的样式</h1><p>我们已经通过设置元素的 id 和 class 来显示想要的样式。 这就是 ID 选择器和 Class 选择器。 另外，也还有其他的 CSS 选择器可以让我们给特定的元素设置样式。</p><p>让我们再次通过猫咪图片项目来练习 CSS 选择器。</p><p>在这个挑战里，我们需要使用 [attr&#x3D;value] 属性选择器来修改 CatPhotoApp 中复选框的样式。 这个选择器使用特定的属性值来匹配和设置元素样式。 例如，下面的代码会改变所有 type 为 radio 的元素的外边距。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[type=&#x27;radio&#x27;] &#123;</span><br><span class="line">  margin: 20px 0px 20px 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="理解绝对单位与相对单位"><a href="#理解绝对单位与相对单位" class="headerlink" title="理解绝对单位与相对单位"></a>理解绝对单位与相对单位</h1><p>最近的几个挑战都是设置元素的内边距和外边距的 px 值，即像素。 像素是一个长度单位，它告诉浏览器应该如何调整元素的大小和位置。 其实除了 px，CSS 也有其他单位供我们使用。</p><p>单位长度的类型可以分成 2 种：相对和绝对。 绝对单位与长度的物理单位相关。 例如，<em><strong>in 和 mm</strong></em> 分别代表着英寸和毫米。 绝对长度单位会接近屏幕上的实际测量值，不过不同屏幕的分辨率会存在差异，这就可能会造成误差。</p><p>相对单位长度，比如 <em><strong>em 和 rem</strong></em>，它们的实际值会依赖其他长度的值而决定。 比如 em 的大小基于元素字体的字体大小。 如果使用它来设置 font-size 值，它的值会跟随父元素的 font-size 值来改变。</p><p>Note: 有些单位长度选项是相对视窗大小来改变值的， 这种设定符合响应式网页设计的原则。</p><h1 id="给-HTML-的-body-元素添加样式"><a href="#给-HTML-的-body-元素添加样式" class="headerlink" title="给 HTML 的 body 元素添加样式"></a>给 HTML 的 body 元素添加样式</h1><p>现在让我们来讨论一下 CSS 中的继承。</p><p>每一个 HTML 页面都有一个 body 元素。</p><p>给 HTML 的 body 元素添加样式<br>我们可以通过设置 background-color 的属性值为 黑色，来证明 body 元素的存在。</p><p>请将以下代码添加到 style 标签里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从-body-元素继承样式"><a href="#从-body-元素继承样式" class="headerlink" title="从 body 元素继承样式"></a>从 body 元素继承样式</h1><p>我们已经证明每一个 HTML 页面都含有 body 元素，我们也可以在 body 元素上使用 CSS 样式。</p><p>设置 body 元素样式的方法跟设置其他 HTML 元素样式的方式一样，并且其他元素也会继承 body 中所设置的样式。</p><hr><p>eg:</p><p>从 body 元素继承样式<br>首先，创建一个内容文本为 Hello World 的 h1 元素。</p><p>接着，在 body 的 CSS 规则里面添加 color: green;，这会将页面内所有字体的颜色都设置为 green。</p><p>最后，在 body 的 CSS 规则里面添加 font-family: monospace;，这会将 body 内所有元素的字体都设置为 monospace。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">  Hello World;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=&quot;color: green;font-family: monospace;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="样式中的优先级"><a href="#样式中的优先级" class="headerlink" title="样式中的优先级"></a>样式中的优先级</h1><p>有时候，HTML 元素的样式会跟其他样式发生冲突。</p><p>就像 h1 元素不能同时设置绿色和粉色两种颜色。</p><p>让我们尝试创建一个字体颜色为粉色的 class，并应用于其中一个元素中。 猜一猜，它会 覆盖 body 元素的 color: green; CSS 规则吗？</p><p>样式中的优先级<br>创建一个能将元素的字体颜色改为粉色的 class，并命名为 pink-text。</p><p>给 h1 元素添加 pink-text class。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line">  .pink-text&#123;</span><br><span class="line">    color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;h1 class=&quot;pink-text&quot;&gt;Hello World!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h1 id="Class-选择器的优先级高于继承样式"><a href="#Class-选择器的优先级高于继承样式" class="headerlink" title="Class 选择器的优先级高于继承样式"></a>Class 选择器的优先级高于继承样式</h1><p>我们的 pink-text class 覆盖了 body 元素的 CSS 样式！</p><p>我们刚刚证明了 class 会覆盖 body 的 CSS 样式。 那么下一个问题是，要怎么样才能覆盖 pink-text class 中所定义的样式？</p><p>Class 选择器的优先级高于继承样式<br>创建一个 blue-text class，将元素的颜色设置为蓝色。 将它放在 pink-text class 下面。</p><p>将 blue-text class 应用于 h1 元素，看看它和该元素上的 pink-text class 哪一个会优先显示。</p><p>将多个 class 属性应用于一个 HTML 元素，需以空格来间隔这些属性，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class=&quot;class1 class2&quot;</span><br></pre></td></tr></table></figure><p>注意： HTML 元素里应用的 class 的先后顺序无关紧要。</p><p>但是，在 &lt;style&gt; 标签里面声明的 class 顺序十分重要，<em><strong>之后的声明会覆盖之前的声明。 第二个声明的优先级始终高于第一个声明。</strong></em> 由于 .blue-text 是在后面声明的，所以它的样式会覆盖 .pink-text 里的样式。</p><h1 id="ID-选择器优先级高于-Class-选择器"><a href="#ID-选择器优先级高于-Class-选择器" class="headerlink" title="ID 选择器优先级高于 Class 选择器"></a>ID 选择器优先级高于 Class 选择器</h1><p>我们刚刚证明了浏览器读取 CSS 是由上到下的。 这就意味着，如果发生冲突，浏览器将会应用最后声明的样式。 注意，如果我们在 h1 元素的类中，将 blue-text 放置在 pink-text 之前，它仍然会检查声明顺序，而不是使用顺序！</p><p>但我们还没有完成。 其实还有其他方法可以覆盖 CSS 样式。 你还记得 id 属性吗？</p><p>我们来通过给 h1 元素添加 id 属性，覆盖 pink-text 和 blue-text 类，使 h1 元素变成橘色。</p><p>ID 选择器优先级高于 Class 选择器<br>给 h1 元素添加 id 属性，属性值为 orange-text。 设置方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;orange-text&quot;&gt;</span><br></pre></td></tr></table></figure><p>h1 元素需继续保留 blue-text 和 pink-text 这两个 class。</p><p>在 style 元素中创建名为 orange-text 的 id 选择器。 例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#brown-text &#123;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 无论在 pink-text class 之前或者之后声明，id 选择器的优先级总是高于 class 选择器。</p><h1 id="内联样式的优先级高于-ID-选择器"><a href="#内联样式的优先级高于-ID-选择器" class="headerlink" title="内联样式的优先级高于 ID 选择器"></a>内联样式的优先级高于 ID 选择器</h1><p>我们刚刚证明了，id 选择器无论在 style 标签的任何位置声明，都会覆盖 class 声明的样式。</p><p>其实还有其他方法可以覆盖 CSS 样式。 你还记得行内样式吗？</p><p>内联样式的优先级高于 ID 选择器<br>使用行内样式尝试让 h1 的字体颜色变白。 记住，内联样式看起来是像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&quot;color: green;&quot;&gt;</span><br></pre></td></tr></table></figure><p>h1 元素应继续保留 blue-text 和 pink-text 这两个 class。</p><h1 id="Important-的优先级最高"><a href="#Important-的优先级最高" class="headerlink" title="Important 的优先级最高"></a>Important 的优先级最高</h1><p>耶！ 我们刚刚又证明了行内样式会覆盖 style 标签里面所有的 CSS 声明。</p><p>不过， 还有一种方式可以覆盖重新 CSS 样式。 这是所有方法里面最强大的一个。 在此之前，我们要考虑清楚，为什么我们要覆盖 CSS 样式。</p><p>很多时候，你会使用 CSS 库， CSS 库中的样式会意外覆盖你的 CSS 样式。 如果想保证你的 CSS 样式不受影响，你可以使用 !important。</p><p>让我们回到 pink-text 类声明。 pink-text 类的颜色样式已被之后的 class 声明、id 声明以及行内样式所覆盖。</p><p>Important 的优先级最高<br>给粉红文本元素的颜色声明添加关键词 !important，以确保 h1 元素为粉红色。</p><p>如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color: red !important;</span><br></pre></td></tr></table></figure><h1 id="使用十六进制编码获得指定颜色"><a href="#使用十六进制编码获得指定颜色" class="headerlink" title="使用十六进制编码获得指定颜色"></a>使用十六进制编码获得指定颜色</h1><p>你知道在 CSS 里面还有其他方式来代表颜色吗？ 其中一个方法叫十六进制编码，简称 hex。</p><p>日常生活中，我们使用的计数方法一般是 decimals，或十进制，即使用数字 0 到 9 来表示。 而 Hexadecimals（或 hex）基于 16 位数字， 它包括 16 种不同字符。 像十进制一样，0-9 的符号代表 0 到 9 的值。 然后，A、B、C、D、E、F 代表 10 至 15 的值。 总的来说，0 到 F 在十六进制里代表数字，总共有 16 个值。 你可以在此处找到更多关于十六进制的信息。</p><p>在 CSS 里面，我们可以使用 6 个十六进制的数字来代表颜色，每两个数字控制一种颜色，分别是红（R）、绿（G）、蓝（B）。 例如，#000000 代表黑色，同时也是最小的值。 你可以在<a href="https://www.freecodecamp.org/news/rgb-color-html-and-css-guide/#whatisthergbcolormodel">此处</a>找到更多关于 RGB 颜色系统的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  color: #000000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用十六进制编码混合颜色"><a href="#使用十六进制编码混合颜色" class="headerlink" title="使用十六进制编码混合颜色"></a>使用十六进制编码混合颜色</h1><p>回顾一下，十六进制编码使用 6 个十六进制字符来表示颜色，两个字符为一组，分别代表红（R）、绿（G）、蓝（B）。</p><p>通过三原色（红、绿、蓝），我们可以创建 1600 万种不同颜色。</p><p>例如，橘色是纯红色混合一些绿色而成，其中没有蓝色。 在十六进制编码里面，它可以写成 #FFA500。</p><p>0 是十六进制里面最小的数字，表示没有颜色。</p><p>F 是十六进制里面最大的数字，有最高的亮度。</p><p>使用十六进制编码混合颜色<br>把 style 标签里面的颜色值用正确的十六进制编码替换。</p><p><em><strong>颜色十六进制编码</strong></em></p><ul><li>道奇蓝#1E90FF</li><li>绿色#00FF00</li><li>橙色#FFA500</li><li>红色#FF0000</li></ul><h1 id="使用缩写的十六进制编码"><a href="#使用缩写的十六进制编码" class="headerlink" title="使用缩写的十六进制编码"></a>使用缩写的十六进制编码</h1><p>许多人对超过 1600 万种颜色感到不知所措， 并且很难记住十六进制编码。 幸运的是，你可以使用缩写形式。</p><p>例如，红色的 #FF0000 十六进制编码可以缩写成 #F00。 在这种缩写形式里，三个数字分别代表着红（R）、绿（G）、蓝（B）三原色。</p><p>这样，颜色的数量减少到了大约 4000 种。 且在浏览器里 #FF0000 和 #F00 是完全相同的颜色。</p><p>使用缩写的十六进制编码<br>接下来，使用缩写的十六进制编码给元素设置正确的颜色。</p><p><em><strong>颜色十六进制编码缩写形式</strong></em></p><ul><li>蓝绿色#0FF</li><li>绿色#0F0</li><li>红色#F00</li><li>紫红色#F0F</li></ul><h1 id="使用-RGB-值为元素上色"><a href="#使用-RGB-值为元素上色" class="headerlink" title="使用 RGB 值为元素上色"></a>使用 RGB 值为元素上色</h1><p>RGB 值是在 CSS 中表示颜色的另一种方法。</p><p>黑色的 RGB 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgb(0, 0, 0)</span><br></pre></td></tr></table></figure><p>白色的 RGB 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgb(255, 255, 255)</span><br></pre></td></tr></table></figure><p>RGB 值与我们之前学到的十六进制编码不同。RGB 值不需要用到 6 位十六进制数字，而只需要指定每种颜色的亮度大小，数值范围从 0 到 255。</p><p>如果我们稍微计算一下，就不难发现这两种表示方式本质上是等价的。在十六进制编码中，我们用两个十六进制数表示一个颜色；这样，每种颜色都有 16 * 16（即 256）种可能。 所以，RGB 从零开始计算，与十六进制代码的值的数量完全相同。</p><p>下面是通过使用 RGB 值设置背景颜色为橘色的例子：body。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: rgb(255, 165, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-RGB-混合颜色"><a href="#使用-RGB-混合颜色" class="headerlink" title="使用 RGB 混合颜色"></a>使用 RGB 混合颜色</h1><p>就像使用十六进制编码一样，你可以通过不同值的组合，来混合得到不同的 RGB 颜色。</p><p>使用 RGB 混合颜色<br>将 style 标签里面中的十六进制编码替换为正确的 RGB 值。</p><p><em><strong>颜色RGB</strong></em></p><ul><li>蓝色rgb(0, 0, 255)</li><li>红色rgb(255, 0, 0)</li><li>淡紫色rgb(218, 112, 214)</li><li>赭黄色rgb(160, 82, 45)</li></ul><h1 id="使用-CSS-变量一次更改多个元素"><a href="#使用-CSS-变量一次更改多个元素" class="headerlink" title="使用 CSS 变量一次更改多个元素"></a>使用 CSS 变量一次更改多个元素</h1><p>CSS 变量可以实现仅需要更新一个值，就可以将更改应用到多个 CSS 样式属性的强大方法。</p><p>按照下面指示的来做，我们只需要改变三个值，多个样式将会同时被修改。</p><p>使用 CSS 变量一次更改多个元素<br>在 penguin class 里，将 black 改为 gray；gray 改为 white；yellow 改为 orange。</p><p>小企鹅：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .penguin &#123;</span><br><span class="line"></span><br><span class="line">    /* Only change code below this line */</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: white;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">    /* Only change code above this line */</span><br><span class="line"></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: -5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 35%;</span><br><span class="line">    height: 35%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background:#c6faf1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="创建一个自定义的-CSS-变量"><a href="#创建一个自定义的-CSS-变量" class="headerlink" title="创建一个自定义的 CSS 变量"></a>创建一个自定义的 CSS 变量</h1><p>为创建一个 CSS 变量，你只需要在变量名前添加两个连字符号，并为其赋值即可，例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--penguin-skin: gray;</span><br></pre></td></tr></table></figure><p>这样就会创建一个 –penguin-skin 变量，它的值为 gray。</p><hr><p>创建变量后，CSS 属性可以通过调用变量名来使用它对应的值。</p><p>background: var(–penguin-skin);<br>因为引用了 –penguin-skin 变量的值，使用了这个样式的元素背景颜色会是灰色。 请注意，除非变量名称完全匹配，否则将不会应用样式。</p><h1 id="给-CSS-变量设置备用值"><a href="#给-CSS-变量设置备用值" class="headerlink" title="给 CSS 变量设置备用值"></a>给 CSS 变量设置备用值</h1><p>使用变量来作为 CSS 属性值的时候，可以设置一个备用值来防止由于某些原因导致变量不生效的情况。</p><p>注意： 备用值不是用于增强浏览器的兼容性，它也不适用于 IE 浏览器。 相反，它是用来让浏览器在找不到你的变量时可以显示一种颜色。</p><p>下面是操作方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: var(--penguin-skin, black);</span><br></pre></td></tr></table></figure><p>如果你的变量没有设置，这将会把背景设置为 black。 提示：这对调试代码也会很有帮助。</p><h1 id="通过浏览器降级提高兼容性"><a href="#通过浏览器降级提高兼容性" class="headerlink" title="通过浏览器降级提高兼容性"></a>通过浏览器降级提高兼容性</h1><p>使用 CSS 时可能会遇到浏览器兼容性问题。 提供浏览器降级方案来避免潜在的问题会显得很重要。</p><p>当浏览器解析页面的 CSS 时，会自动忽视不能识别或者不支持的属性。 举个例子，如果使用 CSS 变量来指定站点的背景色，IE 浏览器由于不支持 CSS 变量而会忽略背景色。 此时，浏览器会尝试使用其它值。 但如果没有找到其它值，则会使用默认值，也就是没有背景色。</p><p>这意味着如果想提供浏览器降级方案，在声明之前提供另一个更宽泛的值即可。 这样老旧的浏览器会降级使用这个方案，新的浏览器会在后面的声明里覆盖降级方案。</p><hr><p>eg:</p><p>我们使用了 CSS 变量来定义 .red-box 的背景色。 现在，我们通过在现有的声明之前添加另一个 background 声明，并将它的值设置为 red，来提升浏览器的兼容性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    --red-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">  .red-box &#123;</span><br><span class="line">    background: red;</span><br><span class="line">    background: var(--red-color);</span><br><span class="line">    height: 200px;</span><br><span class="line">    width:200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;red-box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="继承-CSS-变量"><a href="#继承-CSS-变量" class="headerlink" title="继承 CSS 变量"></a>继承 CSS 变量</h1><p>当创建一个变量时，变量会在创建变量的选择器里可用。 同时，在这个选择器的后代选择器里也是可用的。 这是因为 CSS 变量是可继承的，和普通的属性一样。</p><p>CSS 变量经常会定义在 :root 元素内，这样就可被<em><strong>所有选择器继承</strong></em></p><p>:root 是一个伪类选择器，它是一个能够匹配文档根元素的选择器，通常指的是 html 元素。 我们在 :root 里创建变量在全局都可用，即在任何选择器里都生效。</p><p>eg:</p><p>在 :root 选择器里定义变量 –penguin-belly 并设置它的属性值为 pink。 此时，你会发现变量被继承，所有使用该变量的子元素都会有粉色背景。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    /* Only change code below this line */</span><br><span class="line">--penguin-belly:pink;</span><br><span class="line">    /* Only change code above this line */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background: var(--penguin-belly, #c6faf1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin &#123;</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: -5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 35%;</span><br><span class="line">    height: 35%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="更改特定区域的变量"><a href="#更改特定区域的变量" class="headerlink" title="更改特定区域的变量"></a>更改特定区域的变量</h1><p>当你在 :root 里创建变量时，这些变量的作用域是整个页面。</p><p>然后，你可以通过在一个特定的选择器中再次设置这些变量来重写这些变量。</p><p>eg:</p><p>在 penguin class 里，请设置 –penguin-belly 的值为 white</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: pink;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background: var(--penguin-belly, #c6faf1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin &#123;</span><br><span class="line">    /* Only change code below this line */</span><br><span class="line">  --penguin-belly: white;</span><br><span class="line">    /* Only change code above this line */</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, pink);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, pink);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, pink);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: -5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 35%;</span><br><span class="line">    height: 35%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用媒体查询更改变量"><a href="#使用媒体查询更改变量" class="headerlink" title="使用媒体查询更改变量"></a>使用媒体查询更改变量</h1><p>CSS 变量可以简化媒体查询的定义方式。</p><p>例如，当屏幕小于或大于媒体查询所设置的值，只要我们更新变量的值，那么使用了此变量的元素样式就都会更改。</p><p>eg:</p><p>在媒体查询声明的 :root 选择器里，重定义 –penguin-size 的值为 200px。 同时，重新定义 –penguin-skin 的值为 black， 然后通过缩放页面来查看它们是否生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    --penguin-size: 300px;</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: white;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @media (max-width: 350px) &#123;</span><br><span class="line">    :root &#123;</span><br><span class="line">      /* Only change code below this line */</span><br><span class="line">         --penguin-size: 200px;</span><br><span class="line">         --penguin-skin: black;</span><br><span class="line">      /* Only change code above this line */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: var(--penguin-size, 300px);</span><br><span class="line">    height: var(--penguin-size, 300px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 5%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, black);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(130deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">    animation-duration: 3s;</span><br><span class="line">    animation-name: wave;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">    transform-origin:0% 0%;</span><br><span class="line">    animation-timing-function: linear;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes wave &#123;</span><br><span class="line">      10% &#123;</span><br><span class="line">        transform: rotate(110deg);</span><br><span class="line">      &#125;</span><br><span class="line">      20% &#123;</span><br><span class="line">        transform: rotate(130deg);</span><br><span class="line">      &#125;</span><br><span class="line">      30% &#123;</span><br><span class="line">        transform: rotate(110deg);</span><br><span class="line">      &#125;</span><br><span class="line">      40% &#123;</span><br><span class="line">        transform: rotate(130deg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left:-23%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 150%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background:#c6faf1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基础</title>
      <link href="/2024/07/10/HTML5%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/10/HTML5%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML</strong>(超文本标记语言)是一种相当简单的、由不同元素组成的标记语言，它可以被应用于文本片段，使文本在文档中具有不同的含义HTML是构建网页的基础，本课程将引导您深入了解 HTML 的结构和标签，让您能够轻松创建包括标题、段落、表格、表单等在内的各种网页元素。无论您是想要制作个人网站、博客，还是企业网站，HTML 都是不可或缺的一环。</p><h1 id="HTML初认识"><a href="#HTML初认识" class="headerlink" title="HTML初认识"></a>HTML初认识</h1><p>HTML是一门什么样的语言：</p><p>​ HTML中文全名叫做<strong>“超文本标记语言”</strong>。超文本的意思就是不止是文本，还可以包含图片，链接，音乐，甚至程序等非文字元素。</p><p>​ 本质上来看，HTML其实和我们日常交流使用的语言没什么两样，不同在于自然语言“是用于人与人之间的交流，而HTML则是用于人与浏览器之间的交流。</p><p>​ 要想让浏览器按照我们的意愿展示出我们期望的酷炫效果，我们就得学会用HTML语言来告诉浏览器，在页面的哪个位置，放置一个什么控件。至于这个控件长啥样，具体有什么些功能，则分别需要CSS和JavaScript来实现。</p><p>HTML结构：</p><p>​ 标准的超文本标记语言文件都具有一个基本的整体结构，标记一般都是成对出现 (部分标记除外例如:<br>)，即超文本标记语言文件的开头与结尾标志和超文本标记语言的头部与实体两大部 分。有二个双标记符用于页面整体结构的确认。</p><p>​ 一个标准的HTML文档大概写成如下样式：</p><pre><code>&lt;!DOCTYPE html&gt;  &lt;html&gt;  &lt;head&gt;     &lt;meta charset=&quot;utf-8&quot;&gt;     &lt;title&gt;网页标题&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;     &lt;h1&gt;页面内容&lt;/h1&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>​ 标记符&lt;html&gt;，说明该文件是用超文本标记语言（本标签的中文全称）来描述的，而&lt;&#x2F;html&gt;,则表示该文件的结尾，它们是超文本标记语言文件的开始标记和结尾标记。</p><p>​ &lt;head&gt;和&lt;&#x2F;head&gt;这2个标记符分别表示头部信息的开始和结尾。头部中包含的标记是页面的标题、序言、说明等内容，它本身不作为内容来显示，但影响网页只显示的效果。</p><p>​ &lt;body&gt;&#96;&#96;&lt;&#x2F;body&gt;网页中显示的实际内容均包含在这2个正文标记符之间。</p><p>##HTML dom树：</p><p>​ HTML DOM（Document Object Model）树是指HTML文档的对象模型，它在内存中被创建以便对文档进行动态操作。DOM 提供了一种结构化的方式，将 HTML 文档表示为树状结构，其中每个 HTML 元素都被表示为树中的一个节点。</p><p>​ HTML DOM 树的主要组成部分：</p><p>文档节点（Document Node）： 整个 HTML 文档是根节点，它包含了所有的 HTML 元素。<br>元素节点（Element Node）： HTML 文档中的每个 HTML 元素都被表示为一个元素节点，例如&lt;p&gt;、&lt;div&gt;、&lt;a&gt; 等。</p><p>文本节点（Text Node）： HTML 文档中的文本内容被表示为文本节点，例如元素内的文本、属性值等。<br>属性节点（Attribute Node）： HTML 元素的属性被表示为属性节点，例如元素的 id、class、src 等。</p><p>DOM 树的结构反映了 HTML 文档的层次结构。每个元素节点都有父节点和可能的子节点。根据 HTML 文档的嵌套关系，DOM 树的节点之间形成了父子关系、兄弟关系等。</p><h1 id="HTML-标题元素"><a href="#HTML-标题元素" class="headerlink" title="HTML 标题元素"></a>HTML 标题元素</h1><p>标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 标签进行定义的。</p><p>h1定义最大的标题，h6定义最小标题。<br>浏览器会自动地在标题的前后添加空行。</p><h1 id="HTML-文本元素"><a href="#HTML-文本元素" class="headerlink" title="HTML 文本元素"></a>HTML 文本元素</h1><p><em><strong>HTML 段落文本&lt;p&gt;</strong></em></p><p>段落是通过 <em><strong>&lt;p&gt;</strong></em> 标签定义的。<br>浏览器会自动地在段落的前后添加空行。</p><p><em><strong>HTML 文本格式化</strong></em></p><p>加粗文本使用***&lt;b&gt;***标签展示</p><p>斜体文本使用***&lt;i&gt;***标签展示</p><p>展示下标用***&lt;sub&gt;<em><strong>标签，上标用</strong></em>&lt;sup&gt;***标签</p><h1 id="HTML-链接元素"><a href="#HTML-链接元素" class="headerlink" title="HTML 链接元素"></a>HTML 链接元素</h1><p>HTML链接&lt;a&gt;：</p><p>HTML 使用超级链接与网络上的另一个文档相连。</p><p>HTML中的链接是一种用于在不同网页之间导航的元素。</p><p>链接通常用于将一个网页与另一个网页或资源（如文档、图像、音频文件等）相关联。<br>链接允许用户在浏览网页时单击文本或图像来跳转到其他位置，从而实现网页之间的互联。<br>HTML链接语法：</p><p>href：指定链接目标的URL</p><p>target（可选）：指定链接如何在浏览器中打开。常见的值包括 _blank（在新标签或窗口中打开链接）和 _self（在当前标签或窗口中打开链接）。</p><p>title（可选）：提供链接的额外信息，通常在鼠标悬停在链接上时显示为工具提示。</p><p>rel（可选）：指定与链接目标的关系，如 nofollow、noopener 等。</p><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>在第一个a标签内，实现点击跳转到重庆邮电大学官网(<a href="https://www.cqupt.edu.cn/)%E3%80%82%E5%B9%B6%E4%B8%94%E4%BB%A5%E6%96%B0%E6%A0%87%E7%AD%BE%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E3%80%82">https://www.cqupt.edu.cn/)。并且以新标签的方式打开。</a></p><p>在最后一个a标签内实现<em><strong>锚点链接</strong></em>，使其点击后，移动到id为tips的标签位置。</p><pre><code>&lt;html&gt;  &lt;body&gt;    &lt;a href=&quot;https://www.cqupt.edu.cn/&quot; id=&quot;tips&quot; target=&quot;_blank&quot;&gt;链接 - 重庆邮电大学&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;#tips&quot;&gt;跳转顶部&lt;/a&gt;   &lt;/body&gt;&lt;/html&gt;</code></pre><hr><h1 id="HTML的注释"><a href="#HTML的注释" class="headerlink" title="HTML的注释"></a>HTML的注释</h1><p>在 HTML 中，注释的开始标签是 &lt;!--，结束标签是 --&gt;。</p><h1 id="HTML-内联样式"><a href="#HTML-内联样式" class="headerlink" title="HTML 内联样式"></a>HTML 内联样式</h1><p>HTML CSS：通过设置style属性来设置标签的样式</p><p>常用CSS样式：</p><p>背景颜色：background-color</p><p>字体颜色 ，字体大小：color（颜色），和font-size（字体大小）</p><p>文本对齐方式：text-align（left,center,right）</p><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>将div背景颜色设为：rgb(112, 112, 129)<br>将h1文本颜色变为白色(white)，并且文本居中<br>将p文本字体大小设置为20px，字体颜色设置为十六进制颜色#CCFFFF</p><pre><code>&lt;html&gt;  &lt;body&gt;    &lt;div style=&quot;width: 400px;height: 400px;background-color:rgb(112, 112, 129)&quot;;&gt;      &lt;h1 style=&quot;color:white;text-align:center&quot;&gt;重庆邮电大学&lt;/h1&gt;      &lt;p style=&quot;text-indent: 20px;color:#CCFFFF;font-size:20px&quot;&gt;      重庆邮电大学（Chongqing University of Posts and Telecommunications）简称“重邮”，坐落于直辖市——重庆市，是中华人民共和国工业和信息化部与重庆市人民政府共建的教学研究型大学，入选国家“中西部高校基础能力建设工程”、国家“卓越工程师教育培养计划”，是国家“2011计划”核心协同高校、中国政府奖学金来华留学生接收院校、国家大学生文化素质教育基地、国家布点设立并重点建设的四所邮电高校之一，重庆市一流学科建设高校，CDIO工程教育联盟成员单位。      &lt;/p&gt;    &lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><hr><h1 id="HTML-img元素"><a href="#HTML-img元素" class="headerlink" title="HTML img元素"></a>HTML img元素</h1><p>HTML图像：图像标签（ <img>）和源属性（Src）常用CSS样式：</p><p>在 HTML 中，图像由<img> 标签定义。</p><p>要在页面上显示图像，你需要使用源属性（src）。</p><p>alt 属性用来为图像定义一串预备的可替换的文本。</p><p>height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。</p><p>style属性中可以设置填充模式()：</p><p>fill：默认值。图片将完全填充容器，可能会被拉伸或挤压，以适应容器的尺寸。</p><p>contain：图片将在容器内等比例缩放，以确保整个图片都能完全显示在容器内，可能会在容器内留有空白。</p><p>cover：图片将在容器内等比例缩放，以确保整个容器都被图片覆盖，可能会裁切图片。</p><p>none：图片将保持原始尺寸，不会进行缩放或拉伸，可能会超出容器。</p><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>将img的图片源设置为<a href="https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg">https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg</a></p><p>当图片加载失败时，显示为cat</p><p>将img大小撑满整个容器，设置为100%</p><p>自行设置object-fit来填充图片</p><pre><code>&lt;html&gt;  &lt;style&gt;      div&#123;          width: 150px;          height: 200px;          border: 1px solid red;      &#125;  &lt;/style&gt;  &lt;body&gt;    &lt;div&gt;       &lt;img src=&quot;https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg&quot; alt=&quot;cat&quot;;            width= 100%;           height= 100%;           style=&quot;object-fit:cover;&quot;/&gt;           &lt;/div&gt;   &lt;/body&gt;&lt;/html&gt;</code></pre><hr><h1 id="HTML-Table元素"><a href="#HTML-Table元素" class="headerlink" title="HTML Table元素"></a>HTML Table元素</h1><p>HTML表格：是一种用于展示结构化数据的标记语言元素。由</p><ul><li>tr：tr 是 table row 的缩写，表示表格的一行。</li><li>td：td 是 table data 的缩写，表示表格的数据单元格。</li><li>th：th 是 table header的缩写，表示表格的表头单元格。</li><li>caption：给table设置一个标题</li><li>给table设置border属性，表格将显示边框<br>标签来定义。</li><li>给table设置cellpadding属性，创建单元格内容与其边框之间的空白。</li><li>给table设置cellspacing属性，增加单元格之间的距离</li></ul><p>以下是一个代码演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;列标题1&lt;/th&gt;</span><br><span class="line">&lt;th&gt;列标题2&lt;/th&gt;</span><br><span class="line">&lt;th&gt;列标题3&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;行1，列1&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行1，列2&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行1，列3&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;行2，列1&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行2，列2&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行2，列3&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>将下列数据填入到table标签中</p><p>图论以及应用 王晓 星期一 7-8</p><p>矩阵分析 刘军 星期二 1-3</p><p>机器学习 赵易 星期一 4-5</p><p>给表格设置一个宽度为1的边框</p><p>给表格设置一个标题：课表查询</p><p>让单元格内容与其边框之间的距离为10</p><p>让单元格之间的距离为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;table border=&quot;1&quot; cellpadding=&quot;10&quot; cellspacing=&quot;1&quot;&gt;</span><br><span class="line">        &lt;caption align=&quot;top&quot;&gt;课表查询&lt;/caption&gt; </span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;科目&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;任课老师&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;上课时间&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;节数&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;图论以及应用&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;王晓&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;星期一&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;7-8&lt;/td&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;矩阵分析&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;刘军&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;星期二&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;1-3&lt;/td&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;机器学习&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;赵易&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;星期一&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;4-5&lt;/td&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="HTML-有序列表与无序列表"><a href="#HTML-有序列表与无序列表" class="headerlink" title="HTML 有序列表与无序列表"></a>HTML 有序列表与无序列表</h1><p>HTML列表：HTML 支持有序、无序和定义列表。</p><p>HTML无序列表：使用ul和li标签来定义</p><p>HTML 有序列表：使用ol和li标签来定义</p><p>列表也支持嵌套使用</p><p>无序列表可以通过style中的list-style-type来设置样式</p><ul><li>disc：原点样式</li><li>circle：空心圈样式</li><li>square：正方形样式</li></ul><p>有序列表可以直接使用 type 属性来设置样式</p><ul><li>A：大写字母列表</li><li>a：小写字母列表</li><li>I：罗马数字列表</li><li>i：小写罗马数字列表</li></ul><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>定义一个有序列表来展示把大象装入冰箱的三个步骤： 打开冰箱门 -&gt; 放入大象 -&gt; 关上冰箱门</p><p>定义一个无序列表来展示几种食物<br>Coffee</p><p>Tea，Tea中又包含Black tea、Green tea</p><p>Milk<br>给无序列表和有序列表设置一个你喜欢的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h3&gt;如何把大象装进冰箱&lt;/h3&gt;</span><br><span class="line">    &lt;ol  type=&quot;A&quot;&gt;</span><br><span class="line">      &lt;li&gt;打开冰箱门&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;放入大象&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;关上冰箱门&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;h3&gt;食物分类&lt;/h3&gt;</span><br><span class="line">    &lt;ul style=&quot;list-style-type: square;&quot;&gt;</span><br><span class="line">      &lt;li&gt;Coffee&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Tea</span><br><span class="line">         &lt;ul style=&quot;list-style-type: circle;&quot;&gt;</span><br><span class="line">           &lt;li&gt;Black tea&lt;/li&gt;</span><br><span class="line">           &lt;li&gt;Green tea&lt;/li&gt;</span><br><span class="line">         &lt;/ul&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Milk&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="HTML-区块元素与内联元素"><a href="#HTML-区块元素与内联元素" class="headerlink" title="HTML 区块元素与内联元素"></a>HTML 区块元素与内联元素</h1><p>HTML区块元素：</p><p>大多数 HTML 元素被定义为块级元素或内联元素。</p><p>块级元素在浏览器显示时，通常会以新行来开始。</p><p>内联元素在显示时通常不会以新行开始。</p><ul><li><p>HTML &lt;div&gt; 元素是块级元素，它可用于组合其他 HTML 元素的容器。</p></li><li><p>HTML&lt;span&gt;元素是内联元素，可用作文本的容器</p></li><li><p>float属性：通过浮动可以使一个元素向父元素的左侧或右侧移动。</p></li></ul><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>使用浮动样式，使得mean和content在同一行显示。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .contain&#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 400px;</span><br><span class="line">    &#125;</span><br><span class="line">    .header&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    .mean&#123;</span><br><span class="line">        width: 20%;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: bisque;</span><br><span class="line">    &#125;</span><br><span class="line">    .content&#123;</span><br><span class="line">        width: 80%;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: rgb(199, 199, 199);</span><br><span class="line">    &#125;</span><br><span class="line">    .footer&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    .float-div &#123;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;contain&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;标题栏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;mean float-div&quot; style=&quot;&quot;&gt;菜单栏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content float-div&quot; style=&quot;&quot;&gt;内容栏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot; style=&quot;clear:both;&quot;&gt;底部栏&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML表单元素：登陆界面"><a href="#HTML表单元素：登陆界面" class="headerlink" title="HTML表单元素：登陆界面"></a>HTML表单元素：登陆界面</h1><p>HTML表单元素：HTML 表单用于收集用户的输入信息，通常包含各种输入字段、复选框、单选按钮、下拉列表等元素。</p><ul><li><p>&lt;form&gt; 元素用于创建表单</p><ul><li>action 属性定义了表单数据提交的目标 URL</li><li>method 属性定义了提交数据的 HTTP 方法(通常有get、post等)</li></ul></li><li><p>&lt;label&gt; 元素用于为表单元素添加标签。</p></li><li><p>&lt;input&gt; 元素是最常用的表单元素之一，它可以创建文本输入框、密码框、单选按钮、复选框等。</p></li><li><p>type 属性定义了输入框的类型，id 属性用于关联 <label> 元素，name 属性用于标识表单字段,required可以指定当前输入是否必填。常见的type有以下：</label></p></li><li><p>text：文本域，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p></li><li><p>password：密码字段。</p></li><li><p>radio：单选按钮。</p></li><li><p>checkbox：复选框</p></li><li><p>Submit：提交按钮，当用户单击确认按钮时，表单的内容会被传送到action 属性指定的服务器。</p></li><li><p>&lt;select&gt; 元素用于创建下拉列表，而 &lt;option&gt; 元素用于定义下拉列表中的选项。</p></li></ul><hr><p><em><strong>eg:</strong></em></p><p>任务：完成一个账号登录界面</p><p>首先创建一个form 表单， action 设置# ，提交方式为post,</p><p>在form表单中，使用label 创建一个名为用户名 标签；</p><p>创建一个类型为text 的 input 输入框，</p><p>id 属性设置为username，name 属性设置为username；</p><p>将label 标签与input 标签关联起来。</p><p>使用label 创建一个名为密码 标签；</p><p>创建一个类型为password 的 input 输入框， id 属性设置为password,name 属性设置为password ；</p><p>将label 标签与input 标签关联起来,</p><p>创建一个value 为登录的提交按钮 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;loginDiv&quot;&gt;</span><br><span class="line">    &lt;form action=&quot;#&quot; method=&quot;post&quot; id=&quot;form&quot;&gt;</span><br><span class="line">        &lt;h1 id=&quot;loginMsg&quot;&gt;用户登录&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt; </span><br><span class="line">          &lt;label for=&quot;username&quot;&gt;用户名:&lt;/label&gt;</span><br><span class="line">          &lt;input id=&quot;username&quot; name=&quot;username&quot; type=&quot;text&quot; &gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;label for=&quot;password&quot;&gt;密码:&lt;/label&gt;</span><br><span class="line">          &lt;input id=&quot;password&quot; name=&quot;password&quot; type=&quot;password&quot; autocomplete=&quot;off&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">              </span><br><span class="line">          </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="HTML表单元素：登陆界面-1"><a href="#HTML表单元素：登陆界面-1" class="headerlink" title="HTML表单元素：登陆界面"></a>HTML表单元素：登陆界面</h1><p><strong>任务：</strong>按照顺序完成一个选课的表单界面</p><p>新增一个form表单，action设为#，提交方式为get。</p><p>新增一个名为课程名称的label，关联一个id为course，name为course的input的文本输入框。</p><p>新增一个名为上课地点的label，关联一个id为place，name为place的input的select下拉框。select中包含两个选项：江南校区、南山校区。</p><p>新增一个名为授课方式的label。在授课方式下方新增两个name为mode的单选框。</p><p>第一个单选框id和value都为online，再跟上一个名为线上的label来与单选框关联。默认选中线上。</p><p>第二个单选框id和value都为Offline，再跟上一个名为线下的label来与单选框关联。<br>新增一个id和name都为exam的复选框，默认选中。在后面新增一个名为期末考试的label与复选框相关联。</p><p>新增一个value为提交的submit按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;#&quot; method=&quot;get&quot;&gt;</span><br><span class="line">      </span><br><span class="line">     &lt;br&gt;</span><br><span class="line">       &lt;label for=&quot;course&quot;&gt;课程名称&lt;/label&gt;</span><br><span class="line">       &lt;input id=&quot;course&quot; name=&quot;course&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">       &lt;label for=&quot;place&quot;&gt;上课地点&lt;/label&gt;</span><br><span class="line">    &lt;select id=&quot;place&quot; name=&quot;place&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;江南校区&quot;&gt;江南校区&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;南山校区&quot;&gt;南山校区&lt;/option&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"> &lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;label&gt;授课方式&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;online&quot; name=&quot;mode&quot; value=&quot;online&quot; checked&gt;</span><br><span class="line">    &lt;label for=&quot;online&quot;&gt;线上&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;Offline&quot; name=&quot;mode&quot; value=&quot;Offline&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;Offline&quot;&gt;女&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"> &lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;exam&quot; name=&quot;exam&quot; checked&gt;</span><br><span class="line">    &lt;label for=&quot;exam&quot;&gt;期末考试&lt;/label&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">     &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WPS_学习记录</title>
      <link href="/2024/07/10/WPS_%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/10/WPS_%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><em><strong>注：本文仅做个人学习记录，所记为简记，存在不足待修改</strong></em></p><h1 id="快捷键系列"><a href="#快捷键系列" class="headerlink" title="快捷键系列"></a>快捷键系列</h1><p>Ctrl + C &#x3D; 复制<br>Ctrl + V &#x3D; 粘贴<br>Ctrl + N &#x3D; 新建<br>Ctrl + F &#x3D; 查找<br>Ctrl + H &#x3D; 替换<br>Ctrl + P &#x3D; 打印<br>Ctrl + Enter &#x3D; 分页<br>Ctrl + Shift + C &#x3D; 格式刷;Ctrl + Shift + V &#x3D; 格式刷<br>Ctrl + P &#x3D; 打印</p><h1 id="文字系列"><a href="#文字系列" class="headerlink" title="文字系列"></a>文字系列</h1><h2 id="WPS文字新手入门课"><a href="#WPS文字新手入门课" class="headerlink" title="WPS文字新手入门课"></a><a href="https://www.wps.cn/learning/course/detail/id/13920?sid=152">WPS文字新手入门课</a></h2><h3 id="文档的基础编辑"><a href="#文档的基础编辑" class="headerlink" title="文档的基础编辑"></a>文档的基础编辑</h3><ul><li>WPS 文字界面布局</li><li>字符间距设置</li><li>行间距设置</li><li>制表位（快速对齐文字）</li><li>开始-格式刷（单击，双击）</li><li>回车符（Enter）:替换它时特殊格式选段落标记;换行符（Shift + Enter）:替换它时特殊格式选手动换行符</li><li>插入（注意光标位置）-空白页-（横向，竖向）</li><li>插入-分页符&#x2F;下一页分节符</li><li>章节-新增节-下一页分节符（将文档分为不同模块，方便对页面单独设置）  注：页面-章节导航-下一页分页符就是那个+号</li><li>页面-章节导航-目录（可自动生成）&#x2F;章节&#x2F;书签&#x2F;查找和替换</li><li>分节符-下一页分节符&#x2F;连续分节符&#x2F;偶数页分节符&#x2F;奇数页分节符</li><li>快速排版（开始-排版）</li></ul><h3 id="文本样式与编号"><a href="#文本样式与编号" class="headerlink" title="文本样式与编号"></a>文本样式与编号</h3><h3 id="页眉页脚与目录"><a href="#页眉页脚与目录" class="headerlink" title="页眉页脚与目录"></a>页眉页脚与目录</h3><h3 id="文档审阅与引用"><a href="#文档审阅与引用" class="headerlink" title="文档审阅与引用"></a>文档审阅与引用</h3><h3 id="页面设置与打印"><a href="#页面设置与打印" class="headerlink" title="页面设置与打印"></a>页面设置与打印</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn_MarkDown</title>
      <link href="/2024/07/08/MarkDown_Learn/"/>
      <url>/2024/07/08/MarkDown_Learn/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown官网下载链接"><a href="#MarkDown官网下载链接" class="headerlink" title="MarkDown官网下载链接"></a>MarkDown官网下载链接</h1><p><a href="https://www.cnblogs.com/huanhao/p/hexobase.html">点这里~</a><br>注意啦~注意啦~如果出现渲染错误弹窗，<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe">安装插件</a></p><h1 id="MarkDown官方教程链接"><a href="#MarkDown官方教程链接" class="headerlink" title="MarkDown官方教程链接"></a>MarkDown官方教程链接</h1><p><a href="https://markdown.com.cn/">官方教程链接</a></p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><p>n个 # 就是第n级标题</p><p>另外：可以在文本下方添加任意数量的 &#x3D;&#x3D; 号来标识一级标题，或者 – 号来标识二级标题</p><p>注：为了兼容不同MarkDown应用程序，用一个空格在 # 和标题之间进行分隔</p><h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><p>要创建段落，用空白行将文本进行分隔</p><p>注：不要用空格（spaces）或制表符（ tabs）缩进段落</p><h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键<br>或在行尾添加 HTML 的 &lt;br&gt; 标签来实现换行</p><h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>要<strong>加粗</strong>文本，请在文本前后各添加两个星号**或两个下划线__</p><p>注：为了兼容性考虑，在单词或短语中间部分加粗的话，用星号，不用下划线</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>用<em>斜体</em>显示文本，请在文本前后添加一个星号*或下划线_</p><p>注：为了兼容性考虑，在单词或短语中间部分显示斜体的话，用星号，不用下划线</p><h3 id="加粗-斜体"><a href="#加粗-斜体" class="headerlink" title="加粗&amp;斜体"></a>加粗&amp;斜体</h3><p>同时用<strong>粗体</strong>和<em>斜体</em>突出显示文本，请在文本前后各添加三个星号***或下划线___</p><p>注：为了兼容性考虑，在单词或短语中间部分同时加粗和显示斜体的话，用星号，不用下划线</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为了方便都用星号就是了，一星*斜体，二星**加粗，三星***加粗与斜体</p><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><blockquote><p>要创建块引用，请在段落前添加一个 &gt; 符号  </p><blockquote><p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号</p></blockquote></blockquote><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点.  </li><li>注：数字不必按数学顺序排列，但是列表应当以数字 1 起始</li><li>注：英文.与文本之间要有一个空格</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>要创建无序列表，在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。  </li><li>缩进一个或多个列表项可创建嵌套列表</li></ul><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><p>要将单词或短语表示为代码，请将其包裹在反引号 (&#96;) 中</p><p>注：转义反引号<br>如果要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(&#96;&#96;)中</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>将代码块的每一行缩进至少四个空格或一个制表符</p><p>注： 要创建不用缩进的代码块，请使用 <a href="https://markdown.com.cn/extended-syntax/fenced-code-blocks.html">围栏式代码块</a>，即在代码块之前和之后的行上使用三个反引号(&#96;&#96;&#96;）或三个波浪号（~~~）</p><h2 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容</p><hr><p>注：为了兼容性，请在分隔线的前后均添加空白行</p><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>超链接Markdown语法代码：[超链接显示名](超链接地址 “超链接title”)</p><p>注：链接title是当鼠标悬停在链接上时会出现的文字<br>这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以<strong>空格</strong>分隔</p><h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接<br><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#49;&#x37;&#52;&#50;&#53;&#52;&#52;&#x33;&#54;&#56;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d;">&#49;&#x37;&#52;&#50;&#53;&#52;&#52;&#x33;&#54;&#56;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d;</a></p><p>另外：带格式化的链接：  </p><ol><li>强调链接，在链接语法前后增加星号  </li><li>要将链接表示为代码，在方括号中添加反引号</li></ol><p><a href="https://markdown.com.cn/basic-syntax/links.html">引用类型链接</a></p><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>插入图片Markdown语法代码：![图片alt](图片链接 “图片title”)</p><p>注：图片title是当鼠标悬停在链接上时会出现的文字 ，可选填<br>可能用到的工具：<a href="https://smms.app/">图片URL生成</a></p><p>和链接语法比起来前面<strong>多了一个！</strong></p><h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 <strong>\</strong></p><p>要显示转义字符\的话，就在\前再加一个\</p><h2 id="内嵌HTML标签"><a href="#内嵌HTML标签" class="headerlink" title="内嵌HTML标签"></a>内嵌HTML标签</h2><p><a href="https://markdown.com.cn/basic-syntax/htmls.html">内嵌HTML标签</a></p><h1 id="在线编辑器"><a href="#在线编辑器" class="headerlink" title="在线编辑器"></a>在线编辑器</h1><p><a href="https://markdown.com.cn/editor/">在线编辑器</a></p><h1 id="一些工具链接"><a href="#一些工具链接" class="headerlink" title="一些工具链接"></a>一些工具链接</h1><p><a href="https://smms.app/">图片URL生成</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/07/0/"/>
      <url>/2024/07/07/0/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello 银枝枝~</title>
      <link href="/2024/07/05/hello-world/"/>
      <url>/2024/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/07/07/t9RbOso3Si21eKz.jpg" alt="银枝枝~" title="银枝枝~"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
