<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>应用视觉设计</title>
      <link href="/2024/07/25/%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/"/>
      <url>/2024/07/25/%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>视觉设计结合了排版、色彩理论、图形、动画、页面布局等，以表达独特的信息。 在这个课程中，你将学习如何将这些不同的视觉设计元素应用到网页上。</p><h1 id="使用-text-align-属性创建视觉平衡"><a href="#使用-text-align-属性创建视觉平衡" class="headerlink" title="使用 text-align 属性创建视觉平衡"></a>使用 text-align 属性创建视觉平衡</h1><p>这部分课程的主题是应用视觉设计。 开始的挑战基于美化一个卡片组件的外观，借此展示了若干核心原则。</p><p>web 内容大部分都是文本。 CSS 里面的 text-align 属性可以控制文本的对齐方式。</p><p>text-align: justify; 将文本隔开，使每行的宽度相等。</p><p>text-align: center; 可以让文本居中对齐。</p><p>text-align: right; 可以让文本右对齐。</p><p>text-align: left; 是默认值，它可以让文本左对齐。</p><p>使用 text-align 属性创建视觉平衡</p><p>请让内容文本为 “Google” 的 h4 标签居中对齐， 然后将介绍 Google 创立历程的段落文本两端对齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  h4 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  p &#123;</span><br><span class="line">    text-align: justify;</span><br><span class="line">  &#125;</span><br><span class="line">  .links &#123;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">    text-align: left;</span><br><span class="line">  &#125;</span><br><span class="line">  .fullCard &#123;</span><br><span class="line"></span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    margin: 10px 5px;</span><br><span class="line">    padding: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  .cardContent &#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;fullCard&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;cardContent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;cardText&quot;&gt;</span><br><span class="line">      &lt;h4&gt;Google&lt;/h4&gt;</span><br><span class="line">      &lt;p&gt;Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;cardLinks&quot;&gt;</span><br><span class="line">      &lt;a href=&quot;https://en.wikipedia.org/wiki/Larry_Page&quot; target=&quot;_blank&quot; class=&quot;links&quot;&gt;Larry Page&lt;/a&gt;</span><br><span class="line">      &lt;a href=&quot;https://en.wikipedia.org/wiki/Sergey_Brin&quot; target=&quot;_blank&quot; class=&quot;links&quot;&gt;Sergey Brin&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-width-属性调整元素的宽度"><a href="#使用-width-属性调整元素的宽度" class="headerlink" title="使用 width 属性调整元素的宽度"></a>使用 width 属性调整元素的宽度</h1><p>你可以使用 CSS 里的 width 属性来指定元素的宽度。 属性值可以是相对单位（比如 em），绝对单位（比如 px），或者包含块（父元素）宽度的百分比。 下面这段代码可以把图片的宽度设置为 220px：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">  width: 220px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 width 属性调整元素的宽度</p><p>为卡片元素添加 width 属性，并将它的宽度设置为 245px。 使用 fullCard class 来选择卡片元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.fullCard &#123;</span><br><span class="line"></span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px 5px;</span><br><span class="line">  padding: 4px;</span><br><span class="line">  width: 245px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-height-属性调整元素的宽度"><a href="#使用-height-属性调整元素的宽度" class="headerlink" title="使用 height 属性调整元素的宽度"></a>使用 height 属性调整元素的宽度</h1><p>和 width 属性类似，你可以使用 CSS 里面的 height 属性来指定元素的高度。 下面这段代码可以把图片的高度设置为 20px：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">  height: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 height 属性调整元素的宽度<br>给 h4 标签添加 height 属性并将属性值设置为 25px。</p><p>注意： 可能需要将浏览器的缩放比调整为 100% 才能通过这一挑战<br>。</p><h1 id="使用-strong-标签加粗文本"><a href="#使用-strong-标签加粗文本" class="headerlink" title="使用 strong 标签加粗文本"></a>使用 strong 标签加粗文本</h1><p>你可以使用 strong 标签来加粗文字。 粗体文字一般用来吸引读者注意或用来表示强调。 添加了 strong 标签后，浏览器会自动给元素添加这段样式：font-weight:bold;。</p><p>使用 strong 标签加粗文本</p><p>给 p 标签里的 Stanford University 内容文本外面添加 strong 标签（不包括句号）<br>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at &lt;strong&gt;Stanford University&lt;/strong&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-u-标签给文本添加下划线"><a href="#使用-u-标签给文本添加下划线" class="headerlink" title="使用 u 标签给文本添加下划线"></a>使用 u 标签给文本添加下划线</h1><p>你可以使用 u 标签来给文字添加下划线。 下划线通常用来表示重要内容或需要记忆的内容。 添加了 u 标签后，浏览器会自动给元素添加这段样式：text-decoration: underline;。</p><p>使用 u 标签给文本添加下划线</p><p>给文本 Ph.D. students 添加 u 标签。</p><p>注意： 如果使用 u 标签添加下划线，可能混淆文本和链接，则应避免使用它。 锚标签也有默认的下划线格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Google was founded by Larry Page and Sergey Brin while they were &lt;u&gt;Ph.D. students&lt;/u&gt; at &lt;strong&gt;Stanford University&lt;/strong&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure><h1 id="使用em标签强调文本"><a href="#使用em标签强调文本" class="headerlink" title="使用em标签强调文本"></a>使用em标签强调文本</h1><p>你可以使用 em 标签来强调文本。 由于浏览器会自动给元素应用 font-style: italic;，所以文本会显示为斜体。</p><p>使用 em 标签强调文本</p><p>在段落标签里面嵌套 em 标签来强调文本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;em&gt;Google was founded by Larry Page and Sergey Brin while they were &lt;u&gt;Ph.D. students&lt;/u&gt; at &lt;strong&gt;Stanford University&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-s-标签给文本添加删除线"><a href="#使用-s-标签给文本添加删除线" class="headerlink" title="使用 s 标签给文本添加删除线"></a>使用 s 标签给文本添加删除线</h1><p>你可以用 s 标签来给文字添加删除线。 删除线是位于文字水平中央的一条线，它代表着一段文字不再有效。 添加了 s 标签后，浏览器会自动给元素添加这段样式：text-decoration: line-through;。</p><p>使用 s 标签给文本添加删除线</p><p>在 h4 标签里的 Google 文本外添加 s 标签，然后在 s 标签后面添加单词 Alphabet，单词不要有删除线格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4&gt;&lt;s&gt;Google&lt;/s&gt;Alphabet&lt;/h4&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-hr-标签创建水平线"><a href="#使用-hr-标签创建水平线" class="headerlink" title="使用 hr 标签创建水平线"></a>使用 hr 标签创建水平线</h1><p>你可以用 hr 标签来创建一条宽度撑满父元素的水平线。 这种水平分割线一般用来表示内容主题的改变，或在视觉上将文档分隔成几个部分。</p><p>使用 hr 标签创建水平线</p><p>在卡片标题元素 h4 下方添加一个 hr 标签。</p><p>注意： HTML 中的 hr 是自闭合标签，所以我们不需要为它添加结束标签。</p><h1 id="调整文本的背景色"><a href="#调整文本的背景色" class="headerlink" title="调整文本的背景色"></a>调整文本的背景色</h1><p>为了让页面更美观，除了设置整个页面的背景色以及文字颜色外，你还可以单独设置文字的背景色，即在文字的父元素上添加 background-color 属性。 在本挑战里我们将使用 rgba() 颜色，而不是之前学到的 hex 编码或者 rgb() 颜色。</p><p>rgba 代表：</p><ul><li>r &#x3D; red 红色</li><li>g &#x3D; green 绿色</li><li>b &#x3D; blue 蓝色</li><li>a &#x3D; alpha 透明度</li></ul><p>RGB 值可以取在 0 到 255 之间。 alpha 值可取在 0 到 1 之间，其中 0 代表完全透明，1 代表完全不透明。 rgba() 在需要设置颜色透明度时十分有用， 这意味着你可以做出一些很漂亮的半透明效果。</p><p>在本挑战里你将会用到这个代码 background-color: rgba(45, 45, 45, 0.1)。 它表示背景是黑灰色，因为设置了透明度为 0.1，所以几乎是透明的。</p><p>调整文本的背景色</p><p>为了让文字更醒目，设置 h4 元素的 background-color 属性值为上面指定的 rgba()。</p><p>同时移除 h4 的 height 属性，并添加 padding 属性，值为 10px。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h4 &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    //height: 25px;</span><br><span class="line">    background-color:rgba(45, 45, 45, 0.1);</span><br><span class="line">    padding:10px;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="调整标题元素与段落元素的大小"><a href="#调整标题元素与段落元素的大小" class="headerlink" title="调整标题元素与段落元素的大小"></a>调整标题元素与段落元素的大小</h1><p>标题元素（h1 到 h6）的字体大小通常应大于段落标签的字体大小。 这使用户更容易直观地了解页面上所有内容的布局和重要性级别。 你可以使用 font-size 属性来调整元素中文本的大小。</p><p>调整标题元素与段落元素的大小</p><p>要使标题明显大于段落，请将 h4 元素的 font-size 更改为 27 像素。</p><h1 id="给卡片元素添加-box-shadow"><a href="#给卡片元素添加-box-shadow" class="headerlink" title="给卡片元素添加 box-shadow"></a>给卡片元素添加 box-shadow</h1><p>box-shadow 属性用来给元素添加阴影，该属性值是由逗号分隔的一个或多个阴影列表。</p><p>box-shadow 属性按顺序采用以下值：</p><ul><li>offset-x （阴影的水平偏移量），</li><li>offset-y （阴影的垂直偏移量），</li><li>blur-radius</li><li>spread-radius</li><li>color</li></ul><p>其中 blur-radius 和 spread-radius 是可选的。</p><p>可以通过逗号分隔每个 box-shadow 元素的属性来添加多个 box-shadow。</p><p>如下为添加了模糊效果的例子，它使用了透明度较高的黑色作为阴影：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</span><br></pre></td></tr></table></figure><p>给卡片元素添加 box-shadow</p><p>元素现在有一个 thumbnail id。 在这个选择器中，使用上面的示例 CSS 值在卡片上加一个 box-shadow。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> #thumbnail&#123;</span><br><span class="line">box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="降低元素的透明度"><a href="#降低元素的透明度" class="headerlink" title="降低元素的透明度"></a>降低元素的透明度</h1><p>CSS 里的 opacity 属性用来设置元素的透明度。</p><ul><li>属性值为 1 代表完全不透明。</li><li>属性值为 0.5 代表半透明。</li><li>属性值为 0 代表完全透明。</li></ul><p>透明度会应用到元素内的所有内容，不论是图片，还是文本，或是背景色。</p><p>降低元素的透明度</p><p>将 class 为 links 的所有超链接的 opacity 属性值设置 0.7。</p><h1 id="使用-text-transform-属性给文本添加大写效果"><a href="#使用-text-transform-属性给文本添加大写效果" class="headerlink" title="使用 text-transform 属性给文本添加大写效果"></a>使用 text-transform 属性给文本添加大写效果</h1><p>CSS 里的 text-transform 属性可以改变英文字母的大小写。 使用这个属性时，我们无需改变 HTML 元素中的文本也可以统一页面里英文的显示。</p><p>下面的表格展示了 text-transform 的不同值对文字 “Transform me” 的影响：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">值结果</span><br><span class="line">lowercase&quot;transform me&quot;</span><br><span class="line">uppercase&quot;TRANSFORM ME&quot;</span><br><span class="line">capitalize&quot;Transform Me&quot;</span><br><span class="line">initial使用默认值</span><br><span class="line">inherit使用父元素的 text-transform 值。</span><br><span class="line">noneDefault:不改变文字。</span><br></pre></td></tr></table></figure><p>使用 text-transform 属性给文本添加大写效果</p><p>请使用 text-transform 属性把 h4 内容文本中的所有字母变成大写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h4 &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  background-color: rgba(45, 45, 45, 0.1);</span><br><span class="line">  padding: 10px;</span><br><span class="line">  font-size: 27px;</span><br><span class="line">  text-transform:uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置多个标题元素的font-size"><a href="#设置多个标题元素的font-size" class="headerlink" title="设置多个标题元素的font-size"></a>设置多个标题元素的font-size</h1><p>font-size 属性用来指定元素内文字的大小。 我们可以为多个元素添加这个规则，让页面内不同元素的文字大小得以统一。 在本挑战里，你需要设置从 h1 到 h6 的文字大小。</p><p>设置多个标题元素的 font-size</p><p>在 style 标签中, 对各元素的 font-size 进行如下设置：</p><p>将 h1 标签的文字大小设为 68px。<br>将 h2 标签的文字大小设为 52px。<br>将 h3 标签的文字大小设为 40px<br>将 h4 标签的文字大小设为 32px<br>将 h5 标签的文字大小设为 21px<br>将 h6 标签的文字大小设为 14px</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123; font-size: 68px; &#125;  </span><br><span class="line">h2 &#123; font-size: 52px; &#125;  </span><br><span class="line">h3 &#123; font-size: 40px; &#125;  </span><br><span class="line">h4 &#123; font-size: 32px; &#125;  </span><br><span class="line">h5 &#123; font-size: 21px; &#125;  </span><br><span class="line">h6 &#123; font-size: 14px; &#125;  </span><br></pre></td></tr></table></figure><h1 id="设置多个标题元素的-font-weight"><a href="#设置多个标题元素的-font-weight" class="headerlink" title="设置多个标题元素的 font-weight"></a>设置多个标题元素的 font-weight</h1><p>在上一个挑战里我们已经为每个标题设置了 font-size，接下来我们将要设置 font-weight。</p><p>font-weight 属性用于设置文本中字体的粗细。</p><p>设置多个标题元素的 font-weight</p><p>设置 h1 标签的 font-weight 为 800。<br>设置 h2 标签的 font-weight 为 600。<br>设置 h3 标签的 font-weight 为 500。<br>设置 h4 标签的 font-weight 为 400。<br>设置 h5 标签的 font-weight 为 300。<br>设置 h6 标签的 font-weight 为 200。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">  font-size: 68px;</span><br><span class="line">  font-weight:800;</span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  font-size: 52px;</span><br><span class="line">  font-weight:600;</span><br><span class="line">&#125;</span><br><span class="line">h3 &#123;</span><br><span class="line">  font-size: 40px;</span><br><span class="line">  font-weight:500;</span><br><span class="line">&#125;</span><br><span class="line">h4 &#123;</span><br><span class="line">  font-size: 32px;</span><br><span class="line">  font-weight:400;</span><br><span class="line">&#125;</span><br><span class="line">h5 &#123;</span><br><span class="line">  font-size: 21px;</span><br><span class="line">  font-weight:300;</span><br><span class="line">&#125;</span><br><span class="line">h6 &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  font-weight:200;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置段落文本的-font-size"><a href="#设置段落文本的-font-size" class="headerlink" title="设置段落文本的 font-size"></a>设置段落文本的 font-size</h1><p>CSS 里面的 font-size 属性不只限于标题，还可以应用于任何包含文字的元素内。</p><p>设置段落文本的 font-size</p><p>把段落的 font-size 属性值设置为 16px，让它看起来更清晰。</p><h1 id="CSS-提供-line-height-属性来设置行间的距离。-行高，顾名思义，可以用来设置每行文字所占据的垂直空间。"><a href="#CSS-提供-line-height-属性来设置行间的距离。-行高，顾名思义，可以用来设置每行文字所占据的垂直空间。" class="headerlink" title="CSS 提供 line-height 属性来设置行间的距离。 行高，顾名思义，可以用来设置每行文字所占据的垂直空间。"></a>CSS 提供 line-height 属性来设置行间的距离。 行高，顾名思义，可以用来设置每行文字所占据的垂直空间。</h1><p>设置段落的 line-height<br>给 p 标签添加 line-height 属性并赋值 25px。</p><h1 id="调整锚点的悬停状态"><a href="#调整锚点的悬停状态" class="headerlink" title="调整锚点的悬停状态"></a>调整锚点的悬停状态</h1><p>本挑战将要涉及到伪类。 伪类是可以添加到选择器上的关键字，用来选择特定状态的元素。</p><p>比如，可以使用 :hover 伪类选择器来选取超链接的悬停状态。 下面的代码可以在鼠标悬停在超链接上时将其 color 变成红色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:hover &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调整锚点的悬停状态</p><p>代码编辑器里面已经有了一个 CSS 规则把所有的 a 标签定义成了黑色。 请添加一个规则，使得用户悬停在 a 标签时，标签的 color 变成蓝色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  a &#123;</span><br><span class="line">    color: #000;</span><br><span class="line">  &#125;</span><br><span class="line">a:hover &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="更改元素的相对位置"><a href="#更改元素的相对位置" class="headerlink" title="更改元素的相对位置"></a>更改元素的相对位置</h1><p>在 CSS 里一切 HTML 元素皆为盒子，也就是通常所说的盒模型。 块级元素自动从新的一行开始（比如标题、段落以及 div），行内元素排列在上一个元素后（比如图片以及 span）。 元素默认按照这种方式布局称为文档的普通流，同时 CSS 提供了 position 属性来覆盖它。</p><p>当元素的定位设置为 relative 时，它允许你通过 CSS 指定该元素在当前文档流页面下的相对偏移量。 CSS 里控制各个方向偏移量的属性是 left、right、top 和 bottom。 它们代表从原来位置向远离该方向偏移指定的像素、百分比或者 em。 下面的例子展示了段落向上偏移 10px：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  bottom: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把元素的位置设置成相对，并不会改变该元素在布局中所占的位置，也不会对其它元素的位置产生影响。</p><p>注意： 定位可以使页面布局更灵活、高效。 不管元素的定位是怎样的，HTML 标记在从上到下阅读起来时应该是整洁的、有意义的。 这样可以让视障人士（重度依赖辅助设备比如屏幕阅读软件的人们）也能够无障碍地浏览你的网页。</p><p>更改元素的相对位置</p><p>把 h2 的 position 设置成 relative，使用相应的 CSS 属性调整它的位置，使其相对 top 偏移 15px，同时还在文档流中处于原来的位置。 这不会对 h1 和 p 元素的位置产生影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  h2 &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-CSS-偏移移动相对定位的元素"><a href="#使用-CSS-偏移移动相对定位的元素" class="headerlink" title="使用 CSS 偏移移动相对定位的元素"></a>使用 CSS 偏移移动相对定位的元素</h1><p>CSS 里面的 top、bottom、left 和 right 定义了元素在相应方位的偏移距离。 元素将从当前位置向属性相反的方向偏移。 就像你在上一个挑战看到的，top 属性使 h2 向下移动。 同样，使用 left 将项目移动到右边。</p><p>使用 CSS 偏移移动相对定位的元素</p><p>请通过 CSS 属性把 h2 向上移动 10 像素，向右移动 15 像素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  h2 &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    bottom:10px;</span><br><span class="line">    left:15px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h1 id="绝对定位的参照物是元素的父元素"><a href="#绝对定位的参照物是元素的父元素" class="headerlink" title="绝对定位的参照物是元素的父元素"></a>绝对定位的参照物是元素的父元素</h1><p>接下来要介绍 CSS position 属性的取值选项 absolute，它的含义是相对于其包含块定位。 和 relative 定位不一样，绝对定位会将元素从当前的文档流里面移除，周围的元素会忽略它。 这样我们就可以用 CSS 的 top、bottom、left、right 属性来调整元素的位置。</p><p>绝对定位比较特殊的一点是元素的定位参照于最近的 positioned 祖先元素。 如果它的父元素没有添加定位规则（默认是 position: relative;），浏览器会继续寻找直到默认的 body 标签。</p><p>绝对定位的参照物是元素的父元素<br>通过设置 position 属性值为 absolute，将 #searchbar 元素固定到它的父元素 section 的右上角。 即设定其 top 和 right 为 50 像素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #searchbar &#123;</span><br><span class="line">  position:absolute;</span><br><span class="line">  top:50px;</span><br><span class="line">  right:50px;</span><br><span class="line">  &#125;</span><br><span class="line">  section &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Welcome!&lt;/h1&gt;</span><br><span class="line">  &lt;section&gt;</span><br><span class="line">    &lt;form id=&quot;searchbar&quot;&gt;</span><br><span class="line">      &lt;label for=&quot;search&quot;&gt;Search:&lt;/label&gt;</span><br><span class="line">      &lt;input type=&quot;search&quot; id=&quot;search&quot; name=&quot;search&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Go!&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="固定定位的参照物是浏览器的窗口"><a href="#固定定位的参照物是浏览器的窗口" class="headerlink" title="固定定位的参照物是浏览器的窗口"></a>固定定位的参照物是浏览器的窗口</h1><p>接下来要介绍的是 fixed 定位，它是一种特殊的绝对（absolute）定位，将元素相对于浏览器窗口定位。 类似于绝对位置，它与 CSS 偏移属性一起使用，并且也会将元素从当前的文档流里面移除。 其它元素会忽略它的存在，这样也许需要调整其他位置的布局。</p><p>但 fixed 和 absolute 的最明显的区别在于，前者定位的元素不会随着屏幕滚动而移动。</p><p>固定定位的参照物是浏览器的窗口</p><p>我们已经将代码里导航栏的 id 设置为了 navbar。 请把它的 position 设置成 fixed，同时分别设定其 top 和 left 属性值为 0 像素。 修改后，你可以滑动预览窗口，观察导航栏的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    min-height: 150vh;</span><br><span class="line">  &#125;</span><br><span class="line">  #navbar &#123;</span><br><span class="line">    position:fixed;</span><br><span class="line">    top:0px;</span><br><span class="line">    left:0px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background-color: #767676;</span><br><span class="line">  &#125;</span><br><span class="line">  nav ul &#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    padding: 5px 0px 5px 30px;</span><br><span class="line">  &#125;</span><br><span class="line">  nav li &#123;</span><br><span class="line">    display: inline;</span><br><span class="line">    margin-right: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  a &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;Welcome!&lt;/h1&gt;</span><br><span class="line">    &lt;nav id=&quot;navbar&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=&quot;&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;p&gt;I shift up when the #navbar is fixed to the browser window.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-float-属性将元素左浮动或右浮动"><a href="#使用-float-属性将元素左浮动或右浮动" class="headerlink" title="使用 float 属性将元素左浮动或右浮动"></a>使用 float 属性将元素左浮动或右浮动</h1><p>接下来要介绍的定位机制并不是 position 属性的选项，而是通过元素的 float 属性来设置。 浮动元素不在文档流中，它向 left 或 right 浮动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 通常需要用 width 属性来指定浮动元素占据的水平空间。</p><p>使用 float 属性将元素左浮动或右浮动</p><p>使这两个元素按两列布局，section 和 aside 左右排列。 设置 #left 元素的 float 属性值为 left，设置 #right 元素的 float 属性值为 right。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    #left &#123;</span><br><span class="line">      float:left;</span><br><span class="line">      width: 50%;</span><br><span class="line">    &#125;</span><br><span class="line">    #right &#123;</span><br><span class="line">      float:right;</span><br><span class="line">      width: 40%;</span><br><span class="line">    &#125;</span><br><span class="line">    aside, section &#123;</span><br><span class="line">      padding: 2px;</span><br><span class="line">      background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;Welcome!&lt;/h1&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;section id=&quot;left&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Content&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;Good stuff&lt;/p&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">  &lt;aside id=&quot;right&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Sidebar&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;Links&lt;/p&gt;</span><br><span class="line">  &lt;/aside&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-z-index-属性更改重叠元素的位置"><a href="#使用-z-index-属性更改重叠元素的位置" class="headerlink" title="使用 z-index 属性更改重叠元素的位置"></a>使用 z-index 属性更改重叠元素的位置</h1><p>当一些元素在位置上重叠时（例如，使用 position: absolute | relative | fixed | sticky 时），在 HTML 里后出现的元素会默认显示在更早出现的元素的上面。 你可以使用 z-index 属性指定元素的堆叠次序。 z-index 的取值是整数，数值大的元素会叠放到数值小的元素上面。</p><p>使用 z-index 属性更改重叠元素的位置</p><p>给 class 为 first 的元素（红色的方块）添加 z-index 属性并将属性值设置为 2，使它显示在蓝色方块的上方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .first &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index:2;</span><br><span class="line">  &#125;</span><br><span class="line">  .second &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 40px;</span><br><span class="line">    top: 50px;</span><br><span class="line">    z-index: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;first&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;second&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-margin-属性将元素水平居中"><a href="#使用-margin-属性将元素水平居中" class="headerlink" title="使用 margin 属性将元素水平居中"></a>使用 margin 属性将元素水平居中</h1><p>在应用设计中经常需要把一个块级元素水平居中显示。 一种常见的实现方式是把块级元素的 margin 值设置为 auto。</p><p>同样的，这个方法也对图片奏效。 图片默认是内联元素，但是可以通过设置其 display 属性为 block来把它变成块级元素。</p><p>使用 margin 属性将元素水平居中</p><p>通过添加一个值为 auto 的 margin 属性，将 div 在页面居中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    height: 100px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    margin:auto;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="了解互补色"><a href="#了解互补色" class="headerlink" title="了解互补色"></a>了解互补色</h1><p>色彩理论以及设计色彩学很复杂，这里将只涉及基础部分。 在网站设计里，颜色能让内容更醒目，能调动情绪，从而创造舒适的视觉体验。 不同的颜色组合对网站的视觉效果影响很大，精妙的设计都需要适宜的颜色来美化页面内容。</p><p>色环是我们认识颜色关系的好工具。它是一个近色相邻、异色相离的圆环。 当两个颜色恰好在色环的两端时，这两个颜色就互为补色。 两个互为补色的颜色会在混合后变成灰色。 然而，补色搭配能形成强烈的视觉对比效果。</p><p>下面是一些以 hex 形式表示的补色例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">红色（#FF0000）和蓝绿色 (#00FFFF)</span><br><span class="line">绿色（#00FF00）和品红色（#FF00FF）</span><br><span class="line">蓝色（#0000FF）和黄色（#FFFF00）</span><br></pre></td></tr></table></figure><p>这与我们许多人在学校学的过时的 RYB 色彩模式不同，RYB 有不同的原色和补色。 现代色彩理论使用 RGB 模型（如在计算机屏幕上）和 CMY（K）模型（如在印刷中）。</p><p>现在，很多在线选色工具也为我们提供了寻找补色的功能。</p><p>注意： 对于颜色相关的挑战：颜色搭配是提起用户兴趣或吸引用户注意的重要方式之一。 但我们不应让颜色作为传达重要信息的唯一方式，因为视觉障碍用户可能无法像其他人一样看出其中的含义。 我们将会在应用无障碍章节进行详细介绍。</p><p>了解互补色</p><p>把 class 为 blue 和 yellow 的元素的 background-color 属性改成相应的颜色。 注意观察这两个颜色的搭配效果，以及对比白色背景的视觉效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: #FFFFFF;</span><br><span class="line">  &#125;</span><br><span class="line">  .blue &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  .yellow &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">  div &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    height: 100px;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;blue&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;yellow&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="了解三次色"><a href="#了解三次色" class="headerlink" title="了解三次色"></a>了解三次色</h1><p>电脑显示器和各类屏幕都是基于颜色叠加的模型：将红（R）、绿（G）、蓝（B）三原色的色光以不同的比例相加，就可以产生各种色彩光。 这在现代色彩理论中叫作三原色光模式（RGB Color Model）。 红色（R）、绿色（G）和蓝色（B）叫作三原色。 如果把两种原色相加，就可以产生二次色：蓝绿（G+B）、品红（R+B）和黄色（R+G）， 我们在上一个挑战里已经见过这些颜色了。 这些二次色恰好是在合成它们时未使用的原色的补色，即在色环中位于两端。 例如，品红色是红色和蓝色相加产生，它是绿色的补色。</p><p>三次色是由原色和二次色相加产生的颜色， 例如，在 RGB 颜色模型中，红色（原色）和黄色（二次色）相加产生橙色（三次色）。 将这六种颜色中相邻的颜色相加，便产生了十二色色环。</p><p>设计里面有很多种颜色搭配方法。 涉及到三次色的一种配色方法是分裂补色搭配法。 选定主色之后，在色环上选择与它的补色相邻的两种颜色与之搭配。 此种搭配既有对比，又不失和谐。</p><p>下面是使用分裂补色搭配法创建的三个颜色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">颜色HEX 颜色码</span><br><span class="line">橙色#FF7F00</span><br><span class="line">蓝绿色#00FFFF</span><br><span class="line">树莓红#FF007F</span><br></pre></td></tr></table></figure><p>了解三次色</p><p>把 class 为 orange、cyan 和 raspberry 的 background-color 改成其对应的颜色。 在这个挑战中，请使用颜色的十六进制符号（即 hex code）来表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: #FFFFFF;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .orange &#123;</span><br><span class="line">    background-color: #FF7F00;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .cyan &#123;</span><br><span class="line">    background-color: #00FFFF;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .raspberry &#123;</span><br><span class="line">    background-color: #FF007F;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  div &#123;</span><br><span class="line">    height: 100px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    margin-bottom: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;orange&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;cyan&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;raspberry&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="将各种元素的颜色调整为互补色"><a href="#将各种元素的颜色调整为互补色" class="headerlink" title="将各种元素的颜色调整为互补色"></a>将各种元素的颜色调整为互补色</h1><p>通过前面关卡的学习，我们知道了补色搭配能形成强列的对比效果，让内容更富生机。 但是如果使用不当效果会适得其反：比如将文字背景色和文字颜色设置为互补色，这样文字会很难看清。 通常的做法是，一种颜色做为主要颜色，然后使用其补色用来装点那些需要用户特别注意的部分。</p><p>将各种元素的颜色调整为互补色</p><p>使用深青色（#09A7A1）做为页面主色，用其补色橙色（#FF790E）来装饰登录按钮。 把 header 和 footer 的 background-color 从黑色改成深青色。 然后把 h2 的文字 color 也改成深青色。 最后，把 button 的 background-color 改成橙色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">  &#125;</span><br><span class="line">  header &#123;</span><br><span class="line">    background-color: #09A7A1;</span><br><span class="line">    color: white;</span><br><span class="line">    padding: 0.25em;</span><br><span class="line">  &#125;</span><br><span class="line">  h2 &#123;</span><br><span class="line">    color:  #09A7A1;</span><br><span class="line">  &#125;</span><br><span class="line">  button &#123;</span><br><span class="line">    background-color: #FF790E;</span><br><span class="line">  &#125;</span><br><span class="line">  footer &#123;</span><br><span class="line">    background-color: #09A7A1;</span><br><span class="line">    color: white;</span><br><span class="line">    padding: 0.5em;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="调整颜色的色相"><a href="#调整颜色的色相" class="headerlink" title="调整颜色的色相"></a>调整颜色的色相</h1><p>颜色具有多种特性，包括色相、饱和度和亮度。 CSS3 引入了hsl()函数，作为直接说明这些特征来挑选颜色的替代方法。</p><p>色相 是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。 以颜色光谱为例，光谱左边从红色开始，移动到中间的绿色，一直到右边的蓝色，色相值就是沿着这条线的取值。 在 hsl() 里面，色相用色环来代替光谱，色相值就是色环里面的颜色对应的从 0 到 360 度的角度值。</p><p>饱和度 是指色彩的纯度，也就是颜色里灰色的占比。 饱和度越高则灰色占比越少，色彩也就越纯；反之则完全是灰色。 饱和度的取值范围是表示灰色所占百分比的 0 至 100。</p><p>亮度 决定颜色的明暗程度，也就是颜色里白色或者黑色的占比。 其中，100% 的亮度表示纯白色， 0% 的亮度则表示纯黑色；而 50% 的亮度就表示在色相中选取的颜色。</p><p>下面是一些使用 hsl() 描述颜色的例子，颜色都为满饱和度，中等亮度:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">颜色HSL</span><br><span class="line">红hsl(0, 100%, 50%)</span><br><span class="line">黄hsl(60, 100%, 50%)</span><br><span class="line">绿hsl(120, 100%, 50%)</span><br><span class="line">蓝绿hsl(180, 100%, 50%)</span><br><span class="line">蓝hsl(240, 100%, 50%)</span><br><span class="line">品红hsl(300, 100%, 50%)</span><br></pre></td></tr></table></figure><p>调整颜色的色相</p><p>将 class 为 green、cyan 和 blue 的 div 的 background-color 属性值设置为使用 hsl() 表示的颜色。 颜色都为满饱和度，亮度中等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: #FFFFFF;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .green &#123;</span><br><span class="line">    background-color: hsl(120, 100%, 50%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .cyan &#123;</span><br><span class="line">    background-color: hsl(180, 100%, 50%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blue &#123;</span><br><span class="line">    background-color: hsl(240, 100%, 50%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  div &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    height: 100px;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="调整颜色的色调"><a href="#调整颜色的色调" class="headerlink" title="调整颜色的色调"></a>调整颜色的色调</h1><p>hsl() 使 CSS 更改颜色色调更加方便。 比如，给一个纯色添加白色可以调出更浅的色调；添加黑色可以创造更深的色调。 另外，还可以通过给纯色添加灰色来同时改变颜色的深浅和明暗。 回忆下 hsl() 里面的 ‘s’ 和 ‘l’ 分别代表饱和度和亮度。 饱和度代表灰色的占比，亮度代表白色和黑色的占比。 这在你想获取一个基准色的变种的情景下会十分有用。</p><p>调整颜色的色调</p><p>所有元素的默认 background-color 都是 transparent。 当前页面的导航栏 nav 背景色之所以看起来是蓝绿色，是因为它背后的 header 的 background-color 属性值为 cyan。 给 nav 元素增加一个 background-color，使它的颜色也为 cyan，饱和度为 80%，亮度为 25%，以修改它的色调和阴影。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nav &#123;</span><br><span class="line">    background-color: hsl(180, 80%, 25%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建一个CSS线性渐变"><a href="#创建一个CSS线性渐变" class="headerlink" title="创建一个CSS线性渐变"></a>创建一个CSS线性渐变</h1><p>HTML 元素的背景色并不局限于单色。 CSS 还为我们提供了颜色渐变。 可通过 background 里的 linear-gradient() 实现线性渐变， 以下是它的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</span><br></pre></td></tr></table></figure><p>第一个参数指定了颜色过渡的方向——它的值是角度，90deg 表示垂直渐变（从左到右），45deg 表示沿对角线渐变（从左下方到右上方）。 其他参数指定了渐变颜色的顺序：</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</span><br></pre></td></tr></table></figure><p>创建一个 CSS 线性渐变</p><p>使用 linear-gradient() 给 div 元素添加 background 渐变色，渐变角度为 35 度，从 #CCFFFF 过渡到 #FFCCCC。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 400px;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    background: linear-gradient(35deg, #CCFFFF, #FFCCCC);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="使用CSS线性渐变创建条纹元素"><a href="#使用CSS线性渐变创建条纹元素" class="headerlink" title="使用CSS线性渐变创建条纹元素"></a>使用CSS线性渐变创建条纹元素</h1><p>repeating-linear-gradient() 函数和 linear-gradient() 很像，主要区别是前者会重复指定的渐变。 repeating-linear-gradient() 有很多参数，为了便于理解，本关只用到角度值和色标。</p><p>角度就是渐变的方向。 色标代表渐变颜色及发生渐变的位置，由百分比或者像素值表示。</p><p>在代码编辑器的例子里，渐变开始于 0 像素位置的 yellow，然后过渡到距离开始位置 40 像素的 blue。 由于下一个渐变颜色的起始位置也是 40 像素，所以颜色直接渐变成第三个颜色值 green，然后过渡到距离开始位置 80 像素的 red。</p><p>下面的代码可以帮助理解成对的起止渐变颜色值是如何过渡的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</span><br></pre></td></tr></table></figure><p>如果每对起止渐变颜色值的颜色都是相同的，由于是在两个相同的颜色间过渡，那么中间的过渡色也为同色，接着就是同色的过渡色和下一个起止颜色，最终产生的效果就是条纹。</p><p>使用 CSS 线性渐变创建条纹元素</p><p>使用 repeating-linear-gradient() 函数创建一个渐变角度为 45deg 的条纹，然后设置第一对渐变颜色为 yellow，第二对渐变颜色为 black。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">  div&#123;</span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 400px;</span><br><span class="line">    margin:  50 auto;</span><br><span class="line">    background: repeating-linear-gradient(</span><br><span class="line">      45deg,</span><br><span class="line">      yellow 0px,</span><br><span class="line">      yellow 40px,</span><br><span class="line">      black 40px,</span><br><span class="line">      black 80px</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="通过添加细微图案作为背景图像来创建纹理"><a href="#通过添加细微图案作为背景图像来创建纹理" class="headerlink" title="通过添加细微图案作为背景图像来创建纹理"></a>通过添加细微图案作为背景图像来创建纹理</h1><p>为了增加背景图的质感，我们可以为它添加一个不那么明显的纹理图案，这样可以让页面更讨喜。 但关键在于，我们需要找到一个平衡点，因为我们不希望背景图抢占了内容的风头，造成喧宾夺主的结果。 background 属性支持使用 url() 函数作为属性值，这让我们可以通过链接的方式引入纹理或样式的图片。 图片链接的地址应写在括号内，一般会用引号包起来。</p><p>通过添加细微图案作为背景图像来创建纹理</p><p>选取 body 元素，并设置整个页面的 background 为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png 的图片。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">     background:url(&quot;https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-CSS-Transform-scale-属性可以更改元素的大小"><a href="#使用-CSS-Transform-scale-属性可以更改元素的大小" class="headerlink" title="使用 CSS Transform scale 属性可以更改元素的大小"></a>使用 CSS Transform scale 属性可以更改元素的大小</h1><p>CSS 属性 transform 里面的 scale() 函数可以用来改变元素的显示比例。 下面的例子把页面的段落元素放大到了原来的 2 倍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  transform: scale(2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 CSS Transform scale 属性可以更改元素的大小</p><p>把 id 为 ball2 的元素放大到原始大小的 1.5 倍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .ball &#123;</span><br><span class="line">    width: 40px;</span><br><span class="line">    height: 40px;</span><br><span class="line">    margin: 50 auto;</span><br><span class="line">    position: fixed;</span><br><span class="line">    background: linear-gradient(</span><br><span class="line">      35deg,</span><br><span class="line">      #ccffff,</span><br><span class="line">      #ffcccc</span><br><span class="line">    );</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #ball1 &#123;</span><br><span class="line">    left: 20%;</span><br><span class="line">  &#125;</span><br><span class="line">  #ball2 &#123;</span><br><span class="line">    left: 65%;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;ball&quot; id= &quot;ball1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;ball&quot; id= &quot;ball2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用CSS-Transform-scale-属性在悬停时缩放元素"><a href="#使用CSS-Transform-scale-属性在悬停时缩放元素" class="headerlink" title="使用CSS Transform scale 属性在悬停时缩放元素"></a>使用CSS Transform scale 属性在悬停时缩放元素</h1><p>transform 属性有很多函数可以调用，可以对元素进行调整大小、移动、旋转、翻转等操作。 当使用伪类选取元素的指定状态（如 :hover）时，我们可以通过 transform 属性非常方便地给元素添加交互。</p><p>下面是当用户悬停在段落元素时，段落大小缩放到原始大小 2.1 倍的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p:hover &#123;</span><br><span class="line">  transform: scale(2.1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 给 div 元素添加 transform 也会影响这个 div 包裹的子元素。</p><p>使用CSS Transform scale 属性在悬停时缩放元素</p><p>通过伪类，给 div 的 hover 状态添加 transform 属性，使 div 当鼠标悬停时大小缩放到原始大小的 1.1 倍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin:  50px auto;</span><br><span class="line">    background: linear-gradient(</span><br><span class="line">      53deg,</span><br><span class="line">      #ccfffc,</span><br><span class="line">      #ffcccf</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> div:hover &#123;  </span><br><span class="line">    transform: scale(1.1);  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-CSS-Transform-skex-属性沿X轴倾斜元素"><a href="#使用-CSS-Transform-skex-属性沿X轴倾斜元素" class="headerlink" title="使用 CSS Transform skex 属性沿X轴倾斜元素"></a>使用 CSS Transform skex 属性沿X轴倾斜元素</h1><p>接下来要介绍的 transform 属性是 skewX()：它使选择的元素沿着 X 轴（横向）倾斜指定的角度。</p><p>下面的代码沿着 X 轴倾斜段落元素 -32 度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  transform: skewX(-32deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 CSS Transform skex 属性沿X轴倾斜元素</p><p>使用 transform 属性沿 X 轴倾斜 id 为 bottom 的元素 24 度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin:  50px auto;</span><br><span class="line">  &#125;</span><br><span class="line">  #top &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">  #bottom &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">     transform: skewX(24deg);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-CSS-Transform-skex-属性沿Y轴倾斜元素"><a href="#使用-CSS-Transform-skex-属性沿Y轴倾斜元素" class="headerlink" title="使用 CSS Transform skex 属性沿Y轴倾斜元素"></a>使用 CSS Transform skex 属性沿Y轴倾斜元素</h1><p>skewX 函数使指定元素沿 X 轴翻转指定的角度，想必你已经猜到了，skewY 属性使指定元素沿 Y 轴（垂直方向）翻转指定角度。</p><p>使用 CSS Transform skex 属性沿Y轴倾斜元素</p><p>使用 transform 属性沿 Y 轴翻转 id 为 top 的元素 -10 度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">  &#125;</span><br><span class="line">  #top &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    transform: skewY(-10deg);</span><br><span class="line">  &#125;</span><br><span class="line">  #bottom &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    transform: skewX(24deg);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-CSS-创建一个图形"><a href="#使用-CSS-创建一个图形" class="headerlink" title="使用 CSS 创建一个图形"></a>使用 CSS 创建一个图形</h1><p>通过使用不同的选择器和属性，你可以做出有趣的形状， 一个简单的例子是新月形状。 在这个挑战中，我们会学习如何使用 box-shadow 属性来设置元素的阴影，以及使用 border-radius 属性控制元素的圆角边框。</p><p>首先我们来创建一个圆的、透明的图形，它具有模糊阴影并略微向两边递减。 如你所见，这个阴影其实就是新月形狀。</p><p>为了创建一个圆形的对象，border-radius 应该被设置成 50%。</p><p>你应该还记得之前关卡的 box-shadow 属性以及它的依次取值 offset-x、offset-y、blur-radius、spread-radius 和 color 值。 其中 blur-radius 和 spread-radius 是可选的。</p><p>使用 CSS 创建一个图形</p><p>把编辑器里的正方形元素变成新月形状。 首先，把 background-color 改为 transparent，接着把 border-radius 属性设置成 50%，以创建一个圆形。 最后，更改 box-shadow 属性，使其 offset-x 为 25px，offset-y 为 10px，blur-radius 为 0，spread-radius 为 0，color 为 blue。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .center &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    margin: auto;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    box-shadow: 25px 10px 0px 0px blue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;center&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用CSS和HTML创建更复杂的形状"><a href="#使用CSS和HTML创建更复杂的形状" class="headerlink" title="使用CSS和HTML创建更复杂的形状"></a>使用CSS和HTML创建更复杂的形状</h1><p>世界上最流行的形状非心形莫属了，在本挑战中我们将用纯 CSS 创建一个心形。 但是首先你需要了解伪元素 ::before 和 ::after。 ::before 创建一个伪元素，它是所选元素的第一个子元素； ::after 创建一个伪元素，它是所选元素的最后一个子元素。 在下面的代码中，::before 伪元素用来给 class 为 heart 的元素添加一个正方形：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.heart::before &#123;</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">  border-radius: 25%;</span><br><span class="line">  position: absolute;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 70px;</span><br><span class="line">  top: -50px;</span><br><span class="line">  left: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>::before 和 ::after 必须配合 content 来使用。 这个属性通常用来给元素添加内容诸如图片或者文字。 尽管有时 ::before 和 ::after 是用来实现形状而非文字，但 content 属性仍然是必需的，此时它的值可以是空字符串。 在上面的例子里，class 为 heart 元素的 ::before 伪类添加了一个黄色的长方形，长方形的高和宽分别为 50px 和 70px。 这个矩形有圆角，因为它的 border-radius 为 25%，它的位置是绝对位置，位于离元素左边和顶部分别是 5px、50px 的位置。</p><p>使用 CSS 和 HTML 创建更复杂的形状</p><p>把屏幕里的元素变成心形。 在 .heart::after 选择器里，把 background-color 改成 pink，把 border-radius 改成 50%。</p><p>接下来，用类选择器选取 class 为 heart（只是 heart）的元素，为它添加 transform 属性。 使用 rotate() 函数并设置角度为 -45 度。</p><p>最后，在 ,heart::before 选择器里面，设置 content 属性值为空字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .heart &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    margin: auto;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    height: 50px;</span><br><span class="line">    width: 50px;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">  &#125;</span><br><span class="line">  .heart::after &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    top: 0px;</span><br><span class="line">    left: 25px;</span><br><span class="line">  &#125;</span><br><span class="line">  .heart::before &#123;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    top: -25px;</span><br><span class="line">    left: 0px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;heart&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="了解CSS的关键帧和动画是如何工作的"><a href="#了解CSS的关键帧和动画是如何工作的" class="headerlink" title="了解CSS的关键帧和动画是如何工作的"></a>了解CSS的关键帧和动画是如何工作的</h1><p>如果要给元素添加动画，你需要了解 animation 属性以及 @keyframes 规则。 animation 属性控制动画的外观，@keyframes 规则控制动画中各阶段的变化。 总共有 8 个 animation 属性。 为了便于理解，本挑战中我们只会暂时涉及到两个最常用的属性。</p><p>animation-name 用来设置动画的名称，也就是我们稍后要在 @keyframes 里用到的名称。</p><p>animation-duration 设置动画所花费的时间。</p><p>@keyframes 可以通过设置特定时间点的行为来创建动画。 为此，我们只需要给持续时间内的特定帧（从 0% 到 100%）加上 CSS 规则。 如果用一部电影来做类比，那么 CSS 里面的 0% 关键帧就像是电影里面的开场镜头；100% 关键帧就像是电影里的片尾，就是那个之后会出现演职人员列表的片尾。 在动画设定的时间内，CSS 会根据关键帧的规则来给元素添加动画效果。 100% 位置的 CSS 属性就是元素最后的样子，相当于电影里的演职员表或者鸣谢镜头。 然后CSS 应用魔法来在给定的时间内转换元素以使其脱离场景。 下面举例说明 @keyframes 和动画属性的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#anim &#123;</span><br><span class="line">  animation-name: colorful;</span><br><span class="line">  animation-duration: 3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes colorful &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>id 为 anim 的元素，我们在代码中将它的 animation-name 设置为 colorful，同时设置 animation-duration 为 3 秒。 然后我们把 @keyframes 规则添加到名为 colorful 的动画属性上。 在动画开始时（0%）的背景颜色为蓝色，在动画结束时（100%）的背景颜色为黄色。 注意我们不只可以设置开始和结束，而是从 0% 到 100% 间的任意位置都可以设置。</p><p>了解 CSS 的关键帧和动画是如何工作的</p><p>给 id 为 rect 的元素添加动画，设置其 animation-name 为 rainbow，设置其 animation-duration 为 4 秒。 然后声明 @keyframes 规则，设置动画开始时（0%）的 background-color 为蓝色，动画中间时（50%）为绿色，动画结束时（100%）为为黄色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    width: 70%;</span><br><span class="line">    background: black;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #rect &#123;</span><br><span class="line">      animation-name:rainbow;</span><br><span class="line">      animation-duration:4s;</span><br><span class="line">      @keyframes rainbow &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line">   100% &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;rect&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用CSS动画更改按钮的悬停状态"><a href="#使用CSS动画更改按钮的悬停状态" class="headerlink" title="使用CSS动画更改按钮的悬停状态"></a>使用CSS动画更改按钮的悬停状态</h1><p>你可以在按钮悬停时使用 @keyframes 改变按钮的颜色。</p><p>下面是在图片悬停时改变图片宽度的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  img &#123;</span><br><span class="line">    width: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">  img:hover &#123;</span><br><span class="line">    animation-name: width;</span><br><span class="line">    animation-duration: 500ms;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes width &#123;</span><br><span class="line">    100% &#123;</span><br><span class="line">      width: 40px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://cdn.freecodecamp.org/curriculum/applied-visual-design/google-logo.png&quot; alt=&quot;Google&#x27;s Logo&quot; /&gt;</span><br></pre></td></tr></table></figure><p>使用CSS动画更改按钮的悬停状态</p><p>注意 ms 代表毫秒，1000ms 等于 1s。</p><p>使用 @keyframes 来改变 button 元素的 background-color，使其在悬停时变成 #4791d0。 @keyframes 规则应该只有一个 100% 条目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button &#123;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    color: white;</span><br><span class="line">    background-color: #0F5897;</span><br><span class="line">    padding: 5px 10px 8px 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  button:hover &#123;</span><br><span class="line">    animation-name: background-color;</span><br><span class="line">    animation-duration: 500ms;</span><br><span class="line">  &#125;</span><br><span class="line">  @keyframes background-color</span><br><span class="line">  &#123;</span><br><span class="line">     100% &#123;</span><br><span class="line">      background-color: #4791d0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;button&gt;Register&lt;/button&gt;</span><br></pre></td></tr></table></figure><h1 id="修改动画的填充模式"><a href="#修改动画的填充模式" class="headerlink" title="修改动画的填充模式"></a>修改动画的填充模式</h1><p>太棒了，但是现在还不完美。 注意动画在 500ms 之后重置了，所以按钮又变成了之前的颜色。 而我们想要的效果是按钮在悬停时始终高亮。</p><p>为此，我们可以通过把 animation-fill-mode 设置成 forwards 来实现。 animation-fill-mode 指定了在动画结束时元素的样式： 你可以这样设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-fill-mode: forwards;</span><br></pre></td></tr></table></figure><p>修改动画的填充模式<br>设置 button:hover 的 animation-fill-mode 属性为 forwards，使用户把鼠标悬停在按钮上时，按钮保持高亮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  button &#123;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    color: white;</span><br><span class="line">    background-color: #0F5897;</span><br><span class="line">    padding: 5px 10px 8px 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  button:hover &#123;</span><br><span class="line">    animation-name: background-color;</span><br><span class="line">    animation-duration: 500ms;</span><br><span class="line">    /* 只修改这一行下面的代码 */</span><br><span class="line">    animation-fill-mode: forwards;</span><br><span class="line">    /* 只修改这一行上面的代码 */</span><br><span class="line">  &#125;</span><br><span class="line">  @keyframes background-color &#123;</span><br><span class="line">    100% &#123;</span><br><span class="line">      background-color: #4791d0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;button&gt;Register&lt;/button&gt;</span><br></pre></td></tr></table></figure><h1 id="使用CSS动画创建动画"><a href="#使用CSS动画创建动画" class="headerlink" title="使用CSS动画创建动画"></a>使用CSS动画创建动画</h1><p>在元素的 position 已有指定值（如 fixed 或者 relative）时，CSS 偏移属性 right、left、top、bottom 可以用在动画规则里创建动作。</p><p>就像下面的例子展示的那样，你可以在 50% keyframe 处设置 top 属性为 50px，在开始（0%）和结束（100%）keyframe 处设置为 0px，以实现元素先向下运动，然后返回的动作效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@keyframes rainbow &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    top: 0px;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">    top: 50px;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    top: 0px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 CSS 动画创建动画</p><p>请实现让 div 水平运动的效果。 使用 left 偏移属性，添加 @keyframes 规则，让 rainbow 在 0% 处偏移 0px，在 50% 处偏移 25px，在 100% 处偏移 -25px。 不要修改编辑器里的 top 属性，元素应该同时在水平和竖直方向运动。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  div &#123;</span><br><span class="line">    height: 40px;</span><br><span class="line">    width: 70%;</span><br><span class="line">    background: black;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #rect &#123;</span><br><span class="line">    animation-name: rainbow;</span><br><span class="line">    animation-duration: 4s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes rainbow &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      background-color: blue;</span><br><span class="line">      left: 0px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">      background-color: green;</span><br><span class="line">      left: 25px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      background-color: yellow;</span><br><span class="line">      left: -25px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;rect&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="通过从左到右淡化元素来创建视觉方向"><a href="#通过从左到右淡化元素来创建视觉方向" class="headerlink" title="通过从左到右淡化元素来创建视觉方向"></a>通过从左到右淡化元素来创建视觉方向</h1><p>在本挑战中，我们需要改变动画元素的 opacity 属性值，使其在到达屏幕右侧时渐隐。</p><p>在示例动画中，具有渐变背景的圆形元素在 @keyframes 为 50% 的节点向右移动。</p><p>通过从左到右淡化元素来创建视觉方向</p><p>使用 id 选择器选择 id 为 ball 的元素，在 @keyframes 为 50% 的节点里添加 opacity 属性并设置属性值为 0.1，使其在向右移动时渐隐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">  #ball &#123;</span><br><span class="line">    width: 70px;</span><br><span class="line">    height: 70px;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    position: fixed;</span><br><span class="line">    left: 20%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: linear-gradient(</span><br><span class="line">      35deg,</span><br><span class="line">      #ccffff,</span><br><span class="line">      #ffcccc</span><br><span class="line">    );</span><br><span class="line">    animation-name: fade;</span><br><span class="line">    animation-duration: 3s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes fade &#123;</span><br><span class="line">    50% &#123;</span><br><span class="line">      left: 60%;</span><br><span class="line">      opacity:0.1;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;ball&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用无限的动画计数制作永不停止的动画"><a href="#使用无限的动画计数制作永不停止的动画" class="headerlink" title="使用无限的动画计数制作永不停止的动画"></a>使用无限的动画计数制作永不停止的动画</h1><p>之前的关卡里介绍了一些动画属性以及 @keyframes 规则的用法。 还有一个常用的动画属性是 animation-iteration-count，这个属性允许你控制动画循环的次数。 下面是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-iteration-count: 3;</span><br></pre></td></tr></table></figure><p>在这里动画会在运行 3 次后停止，如果想让动画一直运行，可以把值设置成 infinite。</p><p>使用无限的动画计数制作永不停止的动画</p><p>把 animation-iteration-count 属性改成 infinite，使右边的球一直跳跃。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">  #ball &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin: 50px auto;</span><br><span class="line">    position: relative;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: linear-gradient(</span><br><span class="line">      35deg,</span><br><span class="line">      #ccffff,</span><br><span class="line">      #ffcccc</span><br><span class="line">    );</span><br><span class="line">    animation-name: bounce;</span><br><span class="line">    animation-duration: 1s;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes bounce&#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      top: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">      top: 249px;</span><br><span class="line">      width: 130px;</span><br><span class="line">      height: 70px;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      top: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;ball&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用无限的动画计数制作CSS心跳"><a href="#使用无限的动画计数制作CSS心跳" class="headerlink" title="使用无限的动画计数制作CSS心跳"></a>使用无限的动画计数制作CSS心跳</h1><p>这也是一个用 animation-iteration-count 属性创造持续动画的例子，它基于我们在前面挑战中创建的心形。</p><p>心跳动画的每一秒包含两个部分。 heart 元素（包括 :before 和 :after）使用 transform 属性改变其大小，背景 div 使用 background 属性改变其颜色。</p><p>使用无限的动画计数制作 CSS 心跳</p><p>给 back class 和 the heart class 添加 animation-iteration-count 属性，将属性值设置为 infinite，使心保持跳动。 heart:before 和 heart:after 所选择的元素则不需要添加动画属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .back &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: white;</span><br><span class="line">    animation-name: backdiv;</span><br><span class="line">    animation-duration: 1s;</span><br><span class="line">    animation-iteration-count:infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .heart &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    margin: auto;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    height: 50px;</span><br><span class="line">    width: 50px;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    animation-name: beat;</span><br><span class="line">    animation-duration: 1s;</span><br><span class="line">    animation-iteration-count:infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  .heart:after &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    top: 0px;</span><br><span class="line">    left: 25px;</span><br><span class="line">  &#125;</span><br><span class="line">  .heart:before &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    top: -25px;</span><br><span class="line">    left: 0px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes backdiv &#123;</span><br><span class="line">    50% &#123;</span><br><span class="line">      background: #ffe6f2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes beat &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      transform: scale(1) rotate(-45deg);</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">      transform: scale(0.6) rotate(-45deg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;back&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;heart&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="以可变速率来给元素添加动画"><a href="#以可变速率来给元素添加动画" class="headerlink" title="以可变速率来给元素添加动画"></a>以可变速率来给元素添加动画</h1><p>改变相似元素的动画频率的方法有很多。 目前我们接触到的就有 animation-iteration-count 和 @keyframes。</p><p>举例说明，右边的动画包含了两个小星星，每个小星星都在 @keyframes 为 20% 处变小并且透明度变低，也就是一闪一闪的动画效果。 你可以通过改变其中一个元素的 @keyframes 规则以使两个小星星以不同的频率闪烁。</p><p>以可变速率来给元素添加动画</p><p>请将 class 为 star-1 的元素的 @keyframes 为设置为 50%，以此改变其动画频率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .stars &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">    height: 30px;</span><br><span class="line">    width: 30px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .star-1 &#123;</span><br><span class="line">    margin-top: 15%;</span><br><span class="line">    margin-left: 60%;</span><br><span class="line">    animation-name: twinkle-1;</span><br><span class="line">    animation-duration: 1s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .star-2 &#123;</span><br><span class="line">    margin-top: 25%;</span><br><span class="line">    margin-left: 25%;</span><br><span class="line">    animation-name: twinkle-2;</span><br><span class="line">    animation-duration: 1s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes twinkle-1 &#123;</span><br><span class="line">    50% &#123;</span><br><span class="line">      transform: scale(0.5);</span><br><span class="line">      opacity: 0.5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes twinkle-2 &#123;</span><br><span class="line">    20% &#123;</span><br><span class="line">      transform: scale(0.5);</span><br><span class="line">      opacity: 0.5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #back &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;back&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;star-1 stars&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;star-2 stars&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="以可变速率来给多个元素添加动画"><a href="#以可变速率来给多个元素添加动画" class="headerlink" title="以可变速率来给多个元素添加动画"></a>以可变速率来给多个元素添加动画</h1><p>在前面的关卡里，我们通过修改 @keyframes 改变了两个相似动画元素的频率。 你也可以通过改变多个元素的 animation-duration 来达到同样的效果。</p><p>在代码编辑器里运行的动画中，天空中有三颗以同样频率不停闪烁的星星。 你可以设置每一个星星的 animation-duration 属性为不同的值，以使其具有不同的闪烁频率。</p><p>以可变速率来给多个元素添加动画</p><p>依次设置 class 为 star-1、star-2、star-3 的元素的 animation-duration 为 1s、0.9s、1.1s。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .stars &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">    height: 30px;</span><br><span class="line">    width: 30px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .star-1 &#123;</span><br><span class="line">    margin-top: 15%;</span><br><span class="line">    margin-left: 60%;</span><br><span class="line">    animation-duration: 1s;</span><br><span class="line">    animation-name: twinkle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .star-2 &#123;</span><br><span class="line">    margin-top: 25%;</span><br><span class="line">    margin-left: 25%;</span><br><span class="line">    animation-duration: 0.9s;</span><br><span class="line">    animation-name: twinkle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .star-3 &#123;</span><br><span class="line">    margin-top: 10%;</span><br><span class="line">    margin-left: 50%;</span><br><span class="line">    animation-duration: 1.1s;</span><br><span class="line">    animation-name: twinkle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes twinkle &#123;</span><br><span class="line">    20% &#123;</span><br><span class="line">      transform: scale(0.5);</span><br><span class="line">      opacity: 0.5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #back &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;back&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;star-1 stars&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;star-2 stars&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;star-3 stars&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用关键字更改动画定时器"><a href="#使用关键字更改动画定时器" class="headerlink" title="使用关键字更改动画定时器"></a>使用关键字更改动画定时器</h1><p>在 CSS 动画里，animation-timing-function 用来定义动画的速度曲线。 速度曲线决定了动画从一套 CSS 样式变为另一套所用的时间。 如果要描述的动画是一辆车在指定时间内（animation-duration）从 A 运动到 B，那么 animation-timing-function 表述的就是车在运动中的加速和减速等过程。</p><p>有一些预定义的关键字可用于常见的选项。 比如，默认值是 ease，动画以低速开始，然后加快，在结束前变慢。 其它常用的值包括 ease-out：动画以高速开始，以低速结束；ease-in，动画以低速开始，以高速结束；linear：动画从头到尾的速度是相同的。</p><p>使用关键字更改动画定时器</p><p>给 id 为 ball1 和 ball2 的元素添加 animation-timing-function，ball1 的属性值为 linear，ball2 的属性值为 ease-out。 它们的 animation-duration 都为 2 秒，注意观察它们在开始和结束时的不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">  .balls &#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: linear-gradient(</span><br><span class="line">      35deg,</span><br><span class="line">      #ccffff,</span><br><span class="line">      #ffcccc</span><br><span class="line">    );</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-top: 50px;</span><br><span class="line">    animation-name: bounce;</span><br><span class="line">    animation-duration: 2s;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  #ball1 &#123;</span><br><span class="line">    left:27%;</span><br><span class="line">    animation-timing-function:linear;</span><br><span class="line">    animation-duration:2s;</span><br><span class="line">  &#125;</span><br><span class="line">  #ball2 &#123;</span><br><span class="line">    left:56%;</span><br><span class="line">    animation-timing-function:ease-out;</span><br><span class="line">    animation-duration:2s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes bounce &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      top: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      top: 249px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;balls&quot; id=&quot;ball1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;balls&quot; id=&quot;ball2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="学习贝塞尔曲线的原理"><a href="#学习贝塞尔曲线的原理" class="headerlink" title="学习贝塞尔曲线的原理"></a>学习贝塞尔曲线的原理</h1><p>上一个挑战中，我们介绍了 animation-timing-function 以及它的一些预设值，这些值定义了不同时间内的动画速度。 除了预定义值之外，CSS 还提供了贝塞尔曲线（Bezier curves）来更细致地控制动画的速度曲线。</p><p>在 CSS 动画里，我们可以用 cubic-bezier 来定义贝塞尔曲线。 曲线的形状代表了动画的速度。 曲线在 1 * 1 的坐标系统内， 其中 X 轴代表动画的时间间隔（类似于时间比例尺），Y 轴代表动画的改变。</p><p>cubic-bezier 函数包含了 1 * 1 网格里的4个点：p0、p1、p2、p3。 其中 p0 和 p3 是固定值，代表曲线的起始点和结束点，坐标值依次为 (0, 0) 和 (1, 1)。 你只需设置另外两点的 x 值和 y 值，设置的这两点确定了曲线的形状从而确定了动画的速度曲线。 在 CSS 里面通过 (x1, y1, x2, y2) 来确定 p1 和 p2。 以下就是 CSS 贝塞尔曲线的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</span><br></pre></td></tr></table></figure><p>在上面的例子里，两个点的 x 和 y 值相等（x1 &#x3D; 0.25 &#x3D; y1 和 x2 &#x3D; 0.75 &#x3D; y2）。如果你还记得几何课的知识，结果是从原点到点 (1, 1) 的一条直线。 元素在动画中的速度呈线性，效果和使用 linear 关键词的效果一致。 换言之，元素匀速运动。</p><p>学习贝塞尔曲线的原理</p><p>对于 id 为 ball1 的元素，把 animation-timing-function 属性的值从 linear 改为等价的 cubic-bezier 函数值。 也就是说使用上面例子给的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">  .balls&#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background: linear-gradient(</span><br><span class="line">      35deg,</span><br><span class="line">      #ccffff,</span><br><span class="line">      #ffcccc</span><br><span class="line">    );</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-top: 50px;</span><br><span class="line">    animation-name: bounce;</span><br><span class="line">    animation-duration: 2s;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  #ball1 &#123;</span><br><span class="line">    left: 27%;</span><br><span class="line">    animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</span><br><span class="line">  &#125;</span><br><span class="line">  #ball2 &#123;</span><br><span class="line">    left: 56%;</span><br><span class="line">    animation-timing-function: ease-out;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes bounce &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      top: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      top: 249px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;balls&quot; id=&quot;ball1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;balls&quot; id=&quot;ball2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用贝塞尔曲线移动图形"><a href="#使用贝塞尔曲线移动图形" class="headerlink" title="使用贝塞尔曲线移动图形"></a>使用贝塞尔曲线移动图形</h1><p>前面的关卡涉及了使用 ease-out 预定义值描述了动画以高速开始低速结束。 右边的动画展示了 ease-out 效果（蓝色的元素）和 linear 效果（红色的元素）的区别。 同样的，ease-out 预定义值也可以用贝塞尔曲线函数实现。</p><p>通俗的讲，将一条直线放在范围只有 1 的坐标轴中，并从中间拿 p1 和 p2 两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的贝塞尔速度曲线。 下面是一个使用值来模仿 ease-out 样式的 Bezier 曲线示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</span><br></pre></td></tr></table></figure><p>记住所有的 cubic-bezier 函数都是从坐标为 (0, 0) 的 p0 开始，在坐标为 (1, 1) 的 p3 结束。 在这个例子里，曲线在 y 轴（从 0 开始，运动到 p1 的 0，然后运动到 p2 的 1）上移动得比在 x 轴（从 0 开始，运动到 p1 的 0，到 p2 的 0.58）上移动得快。 结果是，在这一段动画内元素运动得快。 到曲线的结尾，x 和 y 之间的关系反过来了，y 值保持为 1，没有变化，x 值从 0.58 变为 1，元素运动得慢。</p><p>使用贝塞尔曲线移动图形</p><p>要查看此贝塞尔曲线的实际效果，请将 id 为 red 的元素的 animation-timing-function 更改为 cubic-bezier 函数，x1、y1、x2、y2 的值分别设置为 0, 0, 0.58, 1。 这会使两个元素运动过程类似。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .balls&#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-top: 50px;</span><br><span class="line">    animation-name: bounce;</span><br><span class="line">    animation-duration: 2s;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  #red &#123;</span><br><span class="line">    background: red;</span><br><span class="line">    left: 27%;</span><br><span class="line">    animation-timing-function: cubic-bezier(0,0,0.58,1);</span><br><span class="line">  &#125;</span><br><span class="line">  #blue &#123;</span><br><span class="line">    background: blue;</span><br><span class="line">    left: 56%;</span><br><span class="line">    animation-timing-function: ease-out;</span><br><span class="line">  &#125;</span><br><span class="line">  @keyframes bounce &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      top: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      top: 249px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;balls&quot; id= &quot;red&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;balls&quot; id= &quot;blue&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用贝塞尔曲线让运动更加自然"><a href="#使用贝塞尔曲线让运动更加自然" class="headerlink" title="使用贝塞尔曲线让运动更加自然"></a>使用贝塞尔曲线让运动更加自然</h1><p>在这个挑战中，我们需要给元素添加动画来模拟杂耍中被抛接的球。 之前的挑战中，我们学习了 linear 和 ease-out 的贝塞尔曲线描述，但这两个都无法完美地描述杂耍球的运动。 在本关里你需要定制贝塞尔曲线。</p><p>当 animation-iteration-count 值为 infinite 时，animation-timing-function 会自动循环 keyframe。 由于我们是在动画周期的中间点（50% 处）设置的 keyframe 规则，最终的结果是球向上和球向下是两个同样的动画过程。</p><p>下面的例子模拟了杂耍球运动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cubic-bezier(0.3, 0.4, 0.5, 1.6);</span><br></pre></td></tr></table></figure><p>注意 y2 的值是大于 1 的。 虽然贝塞尔曲线是在 1*1 的坐标系统内，x 值只能在 0 到 1，但是 y 值是可以大于 1 的。 这样才能模拟杂耍球运动。</p><p>使用贝塞尔曲线让运动更加自然<br>把 id 为 green 的元素的 </p><p>animation-timing-function 值改成 cubic-bezier 函数，函数的参数 x1，y1，x2，y2 值依次为 0.311、0.441、0.444、1.649。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .balls &#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    top: 60%;</span><br><span class="line">    animation-name: jump;</span><br><span class="line">    animation-duration: 2s;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  #red &#123;</span><br><span class="line">    background: red;</span><br><span class="line">    left: 25%;</span><br><span class="line">    animation-timing-function: linear;</span><br><span class="line">  &#125;</span><br><span class="line">  #blue &#123;</span><br><span class="line">    background: blue;</span><br><span class="line">    left: 50%;</span><br><span class="line">    animation-timing-function: ease-out;</span><br><span class="line">  &#125;</span><br><span class="line">  #green &#123;</span><br><span class="line">    background: green;</span><br><span class="line">    left: 75%;</span><br><span class="line">    animation-timing-function: cubic-bezier( 0.311,0.441,0.444,1.649);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes jump &#123;</span><br><span class="line">    50% &#123;</span><br><span class="line">      top: 10%;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;balls&quot; id=&quot;red&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;balls&quot; id=&quot;blue&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;balls&quot; id=&quot;green&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2024/07/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/07/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>正则表达式，常常缩写为 “regex” 或 “regexp”，是帮助程序员匹配、搜索和替换文本的模式。正则表达式非常强大，但可能难以阅读，因为它们使用特殊字符来做更复杂更灵活的匹配。 在这个课程中，你将学习如何使用特殊字符、捕获组、正向或负向先行断言以及其他技巧来匹配你想要的文本。</p><h1 id="使用测试方法"><a href="#使用测试方法" class="headerlink" title="使用测试方法"></a>使用测试方法</h1><p>在编程语言中，正则表达式用于匹配指定的字符串。 通过正则表达式创建匹配模式（规则）可以帮你完成指定匹配。</p><p>如果想要在字符串 The dog chased the cat 中匹配到 the 这个单词，可以使用如下正则表达式：&#x2F;the&#x2F;。 注意，正则表达式中不需要引号。</p><p>JavaScript 中有多种使用正则表达式的方法。 测试正则表达式的一种方法是使用 .test() 方法。 .test() 方法会把编写的正则表达式和字符串（即括号内的内容）匹配，如果成功匹配到字符，则返回 true，反之，返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let testStr = &quot;freeCodeCamp&quot;;</span><br><span class="line">let testRegex = /Code/;</span><br><span class="line">testRegex.test(testStr);</span><br><span class="line">test 方法会返回 true。</span><br></pre></td></tr></table></figure><p>使用测试方法</p><p>使用 .test() 方法，检测字符串 myString 是否符合正则表达式 myRegex 定义的规则。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let myString = &quot;Hello, World!&quot;;</span><br><span class="line">let myRegex = /Hello/;</span><br><span class="line">let result = myRegex.test(myString); // 修改这一行 // 修改这一行</span><br></pre></td></tr></table></figure><h1 id="匹配文字字符串"><a href="#匹配文字字符串" class="headerlink" title="匹配文字字符串"></a>匹配文字字符串</h1><p>在上一个挑战中，使用正则表达式 &#x2F;Hello&#x2F; 搜索到了字符串 Hello。 那个正则表达式在字符串中搜寻 Hello 的文字匹配。 下面是另一个在字符串中搜寻 Kevin 的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testStr = &quot;Hello, my name is Kevin.&quot;;</span><br><span class="line">let testRegex = /Kevin/;</span><br><span class="line">testRegex.test(testStr);</span><br></pre></td></tr></table></figure><p>test 方法会返回 true。</p><p>任何其他形式的 Kevin 都不会被匹配。 例如，正则表达式 &#x2F;Kevin&#x2F; 不会匹配 kevin 或者KEVIN。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let wrongRegex = /kevin/;</span><br><span class="line">wrongRegex.test(testStr);</span><br></pre></td></tr></table></figure><p>此 test 调用将返回 false。</p><p>后续的挑战将为你展示如何匹配其他形式的字符串。</p><p>匹配文字字符串</p><p>完成正则表达式 waldoRegex，在字符串 waldoIsHiding 中匹配到文本 “Waldo”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let waldoIsHiding = &quot;Somewhere Waldo is hiding in this text.&quot;;</span><br><span class="line">let waldoRegex = /Waldo/; // 修改这一行</span><br><span class="line">let result = waldoRegex.test(waldoIsHiding);</span><br></pre></td></tr></table></figure><h1 id="同时用多种模式匹配文字字符串"><a href="#同时用多种模式匹配文字字符串" class="headerlink" title="同时用多种模式匹配文字字符串"></a>同时用多种模式匹配文字字符串</h1><p>使用正则表达式&#x2F;coding&#x2F;，你可以在其他字符串中查找coding。</p><p>这对于搜寻单个字符串非常有用，但仅限于一种匹配模式。 你可以使用 alternation 或 OR 操作符搜索多个模式： |</p><p>此操作符匹配操作符前面或后面的字符。 例如，如果你想匹配 yes 或 no，你需要的正则表达式是 &#x2F;yes|no&#x2F;。</p><p>你还可以匹配多个规则，这可以通过添加更多的匹配模式来实现。 这些匹配模式将包含更多的 OR 操作符来分隔它们，比如&#x2F;yes|no|maybe&#x2F;。</p><p>同时用多种模式匹配文字字符串</p><p>完成正则表达式 petRegex 以匹配 dog、cat、bird 或者 fish。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let petString = &quot;James has a pet cat.&quot;;</span><br><span class="line">let petRegex = /dog|cat|bird|fish/; // 修改这一行</span><br><span class="line">let result = petRegex.test(petString);</span><br></pre></td></tr></table></figure><h1 id="匹配时忽略大小写"><a href="#匹配时忽略大小写" class="headerlink" title="匹配时忽略大小写"></a>匹配时忽略大小写</h1><p>到目前为止，已经了解了如何用正则表达式来执行字符串的匹配。 但有时候，并不关注匹配字母的大小写。</p><p>大小写即大写字母和小写字母。 大写字母如 A、B 和 C。 小写字母如 a、b 和 c。</p><p>可以使用标志（flag）来匹配这两种情况。 标志有很多，不过这里我们只关注忽略大小写的标志——i。 可以通过将它附加到正则表达式之后来使用它。 这里给出使用该标志的一个实例 &#x2F;ignorecase&#x2F;i。 这个字符串可以匹配字符串 ignorecase、igNoreCase 和 IgnoreCase。</p><p>匹配时忽略大小写</p><p>编写正则表达式 fccRegex 以匹配 freeCodeCamp，忽略大小写。 正则表达式不应与任何缩写或带有空格的变体匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let myString = &quot;freeCodeCamp&quot;;</span><br><span class="line">let fccRegex = /freeCodeCamp/i; // 修改这一行</span><br><span class="line">let result = fccRegex.test(myString);</span><br></pre></td></tr></table></figure><h1 id="提取匹配项"><a href="#提取匹配项" class="headerlink" title="提取匹配项"></a>提取匹配项</h1><p>到目前为止，只是检查了一个匹配模式是否存在于字符串中。 还可以使用 .match() 方法来提取找到的实际匹配项。</p><p>可以使用字符串来调用 .match() 方法，并在括号内传入正则表达式。</p><p>请看下面的举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;Hello, World!&quot;.match(/Hello/);</span><br><span class="line">let ourStr = &quot;Regular expressions&quot;;</span><br><span class="line">let ourRegex = /expressions/;</span><br><span class="line">ourStr.match(ourRegex);</span><br></pre></td></tr></table></figure><p>这里第一个 match 将返回 [“Hello”] 第二个将返回 [“expressions”]。</p><p>请注意， .match 语法是目前为止一直使用的 .test 方法中的“反向”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;string&#x27;.match(/regex/);</span><br><span class="line">/regex/.test(&#x27;string&#x27;);</span><br></pre></td></tr></table></figure><p>提取匹配项</p><p>利用 .match() 方法提取单词 coding。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let extractStr = &quot;Extract the word &#x27;coding&#x27; from this string.&quot;;</span><br><span class="line">let codingRegex = /coding/; // 修改这一行</span><br><span class="line">let result = extractStr.match(codingRegex); // 修改这一行</span><br></pre></td></tr></table></figure><h1 id="全局匹配"><a href="#全局匹配" class="headerlink" title="全局匹配"></a>全局匹配</h1><p>到目前为止，只能提取或搜寻一次模式匹配。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testStr = &quot;Repeat, Repeat, Repeat&quot;;</span><br><span class="line">let ourRegex = /Repeat/;</span><br><span class="line">testStr.match(ourRegex);</span><br></pre></td></tr></table></figure><p>在这里 match 将返回 [“Repeat”]。</p><p>要多次搜索或提取模型，你可以使用全局搜索标志： g。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let repeatRegex = /Repeat/g;</span><br><span class="line">testStr.match(repeatRegex);</span><br></pre></td></tr></table></figure><p>这里 match 返回值 [“Repeat”, “Repeat”, “Repeat”]</p><p>全局匹配</p><p>使用正则表达式 starRegex，从字符串 twinkleStar 中匹配所有的 Twinkle 单词并提取出来。</p><p>注意：<br>在正则表达式上可以有多个标志，比如 &#x2F;search&#x2F;gi</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let twinkleStar = &quot;Twinkle, twinkle, little star&quot;;</span><br><span class="line">let starRegex = /Twinkle/gi; // 修改这一行</span><br><span class="line">let result = twinkleStar.match(starRegex); // 修改这一行</span><br></pre></td></tr></table></figure><h1 id="用通配符匹配任何内容"><a href="#用通配符匹配任何内容" class="headerlink" title="用通配符匹配任何内容"></a>用通配符匹配任何内容</h1><p>有时不（或不需要）知道匹配模式中的确切字符。 如果要精确匹配到完整的单词，那出现一个拼写错误就会匹配不到。 幸运的是，可以使用通配符 . 来处理这种情况。</p><p>通配符 . 将匹配任何一个字符。 通配符也叫 dot 或 period。 可以像使用正则表达式中任何其他字符一样使用通配符。 例如，如果想匹配 hug、huh、hut 和 hum，可以使用正则表达式 &#x2F;hu.&#x2F; 匹配以上四个单词。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let humStr = &quot;I&#x27;ll hum a song&quot;;</span><br><span class="line">let hugStr = &quot;Bear hug&quot;;</span><br><span class="line">let huRegex = /hu./;</span><br><span class="line">huRegex.test(humStr);</span><br><span class="line">huRegex.test(hugStr);</span><br></pre></td></tr></table></figure><p>上面的 test 都会返回 true。</p><p>用通配符匹配任何内容</p><p>完成正则表达式 unRegex 以匹配字符串 run、sun、fun、pun、nun 和 bun。 正则表达式中应该使用通配符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let exampleStr = &quot;Let&#x27;s have fun with regular expressions!&quot;;</span><br><span class="line">let unRegex = /.un/; // 修改这一行</span><br><span class="line">let result = unRegex.test(exampleStr);</span><br></pre></td></tr></table></figure><h1 id="将单个字符与多种可能性匹配"><a href="#将单个字符与多种可能性匹配" class="headerlink" title="将单个字符与多种可能性匹配"></a>将单个字符与多种可能性匹配</h1><p>已经了解了文字匹配模式（&#x2F;literal&#x2F;）和通配符（&#x2F;.&#x2F;）。 这是正则表达式的两种极端情况，一种是精确匹配，而另一种则是匹配所有。 在这两种极端情况之间有一个平衡选项。</p><p>可以使用字符集 （character classes）更灵活的匹配字符。 可以把字符集放在方括号（[ 和 ]）之间来定义一组需要匹配的字符串。</p><p>例如，如果想要匹配 bag、big 和 bug，但是不想匹配 bog。 可以创建正则表达式 &#x2F;b[aiu]g&#x2F; 来执行此操作。 [aiu] 是只匹配字符 a、i 或者 u 的字符集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let bigStr = &quot;big&quot;;</span><br><span class="line">let bagStr = &quot;bag&quot;;</span><br><span class="line">let bugStr = &quot;bug&quot;;</span><br><span class="line">let bogStr = &quot;bog&quot;;</span><br><span class="line">let bgRegex = /b[aiu]g/;</span><br><span class="line">bigStr.match(bgRegex);</span><br><span class="line">bagStr.match(bgRegex);</span><br><span class="line">bugStr.match(bgRegex);</span><br><span class="line">bogStr.match(bgRegex);</span><br></pre></td></tr></table></figure><p>按顺序排列，四次 match 调用将返回值 [“big”]、[“bag”]、[“bug”] 和 null。</p><p>将单个字符与多种可能性匹配</p><p>使用元音字符集（a、e、i、o、u）在正则表达式 vowelRegex 中匹配到字符串 quoteSample 中的所有元音。</p><p>**注意:**一定要同时匹配大小写元音。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let quoteSample = &quot;Beware of bugs in the above code; I have only proved it correct, not tried it.&quot;;</span><br><span class="line">let vowelRegex = /[aeiou]/gi; // 修改这一行</span><br><span class="line">let result = quoteSample.match(vowelRegex); // 修改这一行</span><br></pre></td></tr></table></figure><h1 id="匹配字母表中的字母"><a href="#匹配字母表中的字母" class="headerlink" title="匹配字母表中的字母"></a>匹配字母表中的字母</h1><p>了解了如何使用字符集（character sets）来指定要匹配的一组字符串，但是有时需要匹配大量字符（例如，字母表中的每个字母）。 有一种写法可以让实现这个功能变得简短。</p><p>在字符集中，可以使用连字符（-）来定义要匹配的字符范围。</p><p>例如，要匹配小写字母 a 到 e，你可以使用 [a-e]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let catStr = &quot;cat&quot;;</span><br><span class="line">let batStr = &quot;bat&quot;;</span><br><span class="line">let matStr = &quot;mat&quot;;</span><br><span class="line">let bgRegex = /[a-e]at/;</span><br><span class="line">catStr.match(bgRegex);</span><br><span class="line">batStr.match(bgRegex);</span><br><span class="line">matStr.match(bgRegex);</span><br></pre></td></tr></table></figure><p>按顺序排列，三次 match 调用将返回值 [“cat”]，[“bat”] 和 null。</p><p>匹配字母表中的字母</p><p>匹配字符串 quoteSample 中的所有字母。</p><p>注意：一定要同时匹配大小写字母。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let quoteSample = &quot;The quick brown fox jumps over the lazy dog.&quot;;</span><br><span class="line">let alphabetRegex = /[a-z]/gi; // 修改这一行</span><br><span class="line">let result = quoteSample.match(alphabetRegex); // 修改这一行</span><br></pre></td></tr></table></figure><h1 id="匹配字母表中的数字和字母"><a href="#匹配字母表中的数字和字母" class="headerlink" title="匹配字母表中的数字和字母"></a>匹配字母表中的数字和字母</h1><p>使用连字符（-）匹配字符范围并不仅限于字母。 它还可以匹配一系列数字。</p><p>例如，&#x2F;[0-5]&#x2F; 匹配 0 和 5 之间的任意数字，包含 0 和 5。</p><p>此外，还可以在单个字符集中组合一系列字母和数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let jennyStr = &quot;Jenny8675309&quot;;</span><br><span class="line">let myRegex = /[a-z0-9]/ig;</span><br><span class="line">jennyStr.match(myRegex);</span><br></pre></td></tr></table></figure><p>匹配字母表中的数字和字母</p><p>创建一个正则表达式，使其可以匹配 h 和 s 之间的一系列字母，以及 2 和 6 之间的一系列数字。 请记得在正则表达式中包含恰当的标志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let quoteSample = &quot;Blueberry 3.141592653s are delicious.&quot;;</span><br><span class="line">let myRegex = /[h-s]|[2-6]/gi; // 修改这一行</span><br><span class="line">let result = quoteSample.match(myRegex); // 修改这一行</span><br></pre></td></tr></table></figure><h1 id="匹配单个未指定的字符"><a href="#匹配单个未指定的字符" class="headerlink" title="匹配单个未指定的字符"></a>匹配单个未指定的字符</h1><p>到目前为止，已经创建了一个想要匹配的字符集合，但也可以创建一个不想匹配的字符集合。 这些类型的字符集称为否定字符集（ negated character sets）。</p><p>要创建否定字符集，需要在开始括号后面和不想匹配的字符前面放置脱字符（即^）。</p><p>例如，&#x2F;[^aeiou]&#x2F;gi 匹配所有非元音字符。 注意，字符 .、!、[、@、&#x2F; 和空白字符等也会被匹配，该否定字符集仅排除元音字符。</p><p>匹配单个未指定的字符</p><p>创建一个匹配所有非数字或元音字符的正则表达式。 请记得在正则表达式中包含恰当的标志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let quoteSample = &quot;3 blind mice.&quot;;</span><br><span class="line">let myRegex = /[^aeiou0-9]/gi; // 修改这一行</span><br><span class="line">let result = quoteSample.match(myRegex); // 修改这一行</span><br></pre></td></tr></table></figure><h1 id="匹配出现一次或多次的字符"><a href="#匹配出现一次或多次的字符" class="headerlink" title="匹配出现一次或多次的字符"></a>匹配出现一次或多次的字符</h1><p>有时，需要匹配出现一次或者连续多次的的字符（或字符组）。 这意味着它至少出现一次，并且可能重复出现。</p><p>可以使用 + 符号来检查情况是否如此。 记住，字符或匹配模式必须一个接一个地连续出现。 这就是说，字符必须一个接一个地重复。</p><p>例如，&#x2F;a+&#x2F;g 会在 abc 中匹配到一个匹配项，并且返回 [“a”]。 因为 + 的存在，它也会在 aabc 中匹配到一个匹配项，然后返回 [“aa”]。</p><p>如果它是检查字符串 abab，它将匹配到两个匹配项并且返回[“a”, “a”]，因为a字符不连续，在它们之间有一个b字符。 最后，因为在字符串 bcd 中没有 a，因此找不到匹配项。</p><p>匹配出现一次或多次的字符</p><p>想要在字符串 Mississippi 中匹配到出现一次或多次的字母 s 的匹配项。 编写一个使用 + 符号的正则表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let difficultSpelling = &quot;Mississippi&quot;;</span><br><span class="line">let myRegex = /s+/g; // 修改这一行</span><br><span class="line">let result = difficultSpelling.match(myRegex);</span><br></pre></td></tr></table></figure><h1 id="匹配出现零次或多次的字符"><a href="#匹配出现零次或多次的字符" class="headerlink" title="匹配出现零次或多次的字符"></a>匹配出现零次或多次的字符</h1><p>上一次的挑战中使用了加号 + 来查找出现一次或多次的字符。 还有一个选项可以匹配出现零次或多次的字符。</p><p>执行该操作的字符叫做星号，即*。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let soccerWord = &quot;gooooooooal!&quot;;</span><br><span class="line">let gPhrase = &quot;gut feeling&quot;;</span><br><span class="line">let oPhrase = &quot;over the moon&quot;;</span><br><span class="line">let goRegex = /go*/;</span><br><span class="line">soccerWord.match(goRegex);</span><br><span class="line">gPhrase.match(goRegex);</span><br><span class="line">oPhrase.match(goRegex);</span><br></pre></td></tr></table></figure><p>按顺序排列，三次 match 调用将返回值 [“goooooooo”]，[“g”] 和 null。</p><p>匹配出现零次或多次的字符</p><p>在这个挑战里，chewieQuote 已经被初始化为 Aaaaaaaaaaaaaaaarrrgh!。 创建一个变量为 chewieRegex 的正则表达式，使用 * 在 chewieQuote 中匹配 A 及其之后出现的零个或多个a。 你的正则表达式不需要使用修饰符，也不需要匹配引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 只修改这一行下面的代码</span><br><span class="line">let chewieRegex = /Aa*/; // 修改这一行</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">let result = chewieQuote.match(chewieRegex);</span><br></pre></td></tr></table></figure><h1 id="用惰性匹配来查找字符"><a href="#用惰性匹配来查找字符" class="headerlink" title="用惰性匹配来查找字符"></a>用惰性匹配来查找字符</h1><p>在正则表达式中，贪婪（greedy）匹配会匹配到符合正则表达式匹配模式的字符串的最长可能部分，并将其作为匹配项返回。 另一种方案称为懒惰（lazy）匹配，它会匹配到满足正则表达式的字符串的最小可能部分。</p><p>可以将正则表达式 &#x2F;t[a-z]*i&#x2F; 应用于字符串 “titanic”。 这个正则表达式是一个以 t 开始，以 i 结束，并且中间有一些字母的匹配模式。</p><p>正则表达式默认是贪婪匹配，因此匹配返回为 [“titani”]。 它会匹配到适合该匹配模式的最大子字符串。</p><p>但是，你可以使用 ? 字符来将其变成懒惰匹配。 调整后的正则表达式 &#x2F;t[a-z]*?i&#x2F; 匹配字符串 “titanic” 返回 [“ti”]。</p><p><strong>注意：</strong>应该避免使用正则表达式解析 HTML，但是可以用正则表达式匹配 HTML 字符串。</p><p>用惰性匹配来查找字符</p><p>修复正则表达式 &#x2F;&lt;.*&gt;&#x2F;，让它返回 HTML 标签 &lt;h1&gt;，而不是文本 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;h1&gt;Winter is coming&lt;/h1&gt;&quot;。 </span><br></pre></td></tr></table></figure><p>请记得在正则表达式中使用通配符 . 来匹配任意字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let text = &quot;&lt;h1&gt;Winter is coming&lt;/h1&gt;&quot;;</span><br><span class="line">//let myRegex = /&lt;h1\b[^&gt;]*&gt;/; // \b 确保 &lt;h1 后面不是另一个字母（即单词边界），[^&gt;]* 匹配任意非 &gt; 字符  </span><br><span class="line">let myRegex = /&lt;([^&gt;].*?)&gt;/; // 注意这里我稍微修改了正则表达式以避免匹配到空的标签名 </span><br><span class="line">let result = text.match(myRegex);  </span><br><span class="line">  </span><br><span class="line">if (result) &#123;  </span><br><span class="line">    console.log(result[0]); // 输出 &lt;h1&gt;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在狩猎中找到一个或多个罪犯"><a href="#在狩猎中找到一个或多个罪犯" class="headerlink" title="在狩猎中找到一个或多个罪犯"></a>在狩猎中找到一个或多个罪犯</h1><p>是时候停一停来测试你的正则表达式使用能力了。 一群罪犯越狱逃跑了，但你不知道有多少人。 然而，你知道他们不在一起时会保持紧密联系。 你有责任立刻找到所有的罪犯。</p><p>这里有一个示例来提示如何做到这一点：</p><p>当字母z在一行中出现一次或连续多次时，正则表达式&#x2F;z+&#x2F;会匹配到它。 它会在以下所有字符串中找到匹配项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;z&quot;</span><br><span class="line">&quot;zzzzzz&quot;</span><br><span class="line">&quot;ABCzzzz&quot;</span><br><span class="line">&quot;zzzzABC&quot;</span><br><span class="line">&quot;abczzzzzzzzzzzzzzzzzzzzzabc&quot;</span><br></pre></td></tr></table></figure><p>但是它不会在以下字符串中找到匹配项，因为它们中没有字母z：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;</span><br><span class="line">&quot;ABC&quot;</span><br><span class="line">&quot;abcabc&quot;</span><br></pre></td></tr></table></figure><p>在狩猎中找到一个或多个罪犯</p><p>编写一个贪婪正则表达式，在一组其他人中匹配到一个或多个罪犯。 罪犯由大写字母C表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let reCriminals = /C+/; // 匹配一个或多个连续的&quot;C&quot;字符</span><br></pre></td></tr></table></figure><h1 id="匹配字符串的开头"><a href="#匹配字符串的开头" class="headerlink" title="匹配字符串的开头"></a>匹配字符串的开头</h1><p>回顾一下之前的挑战，正则表达式可以用于查找多项匹配。 还可以查询字符串中符合指定匹配模式的字符。</p><p>在之前的挑战中，使用字符集中前插入符号（^）来创建一个否定字符集，形如 [^thingsThatWillNotBeMatched]。 除了在字符集中使用之外，插入符号（^）用于匹配文本是否在字符串的开始位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let firstString = &quot;Ricky is first and can be found.&quot;;</span><br><span class="line">let firstRegex = /^Ricky/;</span><br><span class="line">firstRegex.test(firstString);</span><br><span class="line">let notFirst = &quot;You can&#x27;t find Ricky now.&quot;;</span><br><span class="line">firstRegex.test(notFirst);</span><br></pre></td></tr></table></figure><p>第一次 test 调用将返回 true，而第二次调用将返回 false。</p><p>匹配字符串的开头</p><p>在正则表达式中使用脱字符来找到 Cal 在字符串 rickyAndCal 中的开始位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let rickyAndCal = &quot;Cal and Ricky both like racing.&quot;;</span><br><span class="line">let calRegex = /^Cal/; // 修改这一行</span><br><span class="line">let result = calRegex.test(rickyAndCal);</span><br></pre></td></tr></table></figure><h1 id="匹配字符串的末尾"><a href="#匹配字符串的末尾" class="headerlink" title="匹配字符串的末尾"></a>匹配字符串的末尾</h1><p>在上一个挑战中，学习了使用脱字符号来搜寻字符串的开始位置。 还有一种方法可以搜寻字符串末尾的匹配模式。</p><p>可以使用正则表达式的美元符号 $ 来搜寻字符串的结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let theEnding = &quot;This is a never ending story&quot;;</span><br><span class="line">let storyRegex = /story$/;</span><br><span class="line">storyRegex.test(theEnding);</span><br><span class="line">let noEnding = &quot;Sometimes a story will have to end&quot;;</span><br><span class="line">storyRegex.test(noEnding);</span><br></pre></td></tr></table></figure><p>第一次 test 调用将返回 true, 而第二次调用将返回 false。</p><p>匹配字符串的末尾</p><p>使用锚点字符 $ 来匹配字符串 caboose 在字符串末尾 caboose。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let caboose = &quot;The last car on a train is the caboose&quot;;</span><br><span class="line">let lastRegex = /caboose$/; // 修改这一行</span><br><span class="line">let result = lastRegex.test(caboose);</span><br></pre></td></tr></table></figure><h1 id="匹配所有的字母和数字"><a href="#匹配所有的字母和数字" class="headerlink" title="匹配所有的字母和数字"></a>匹配所有的字母和数字</h1><p>使用元字符，可以使用 [a-z] 搜寻字母表中的所有字母。 这种元字符是很常见的，它有一个缩写，但这个缩写也包含额外的字符。</p><p>JavaScript 中与字母表匹配的最接近的元字符是\w。 这个缩写等同于[A-Za-z0-9_]。 此字符类匹配大写字母和小写字母以及数字。 注意，这个字符类也包含下划线字符 (_)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let longHand = /[A-Za-z0-9_]+/;</span><br><span class="line">let shortHand = /\w+/;</span><br><span class="line">let numbers = &quot;42&quot;;</span><br><span class="line">let varNames = &quot;important_var&quot;;</span><br><span class="line">longHand.test(numbers);</span><br><span class="line">shortHand.test(numbers);</span><br><span class="line">longHand.test(varNames);</span><br><span class="line">shortHand.test(varNames);</span><br></pre></td></tr></table></figure><p>上面的 test 都会返回 true。</p><p>这些元字符缩写也被称为短语元字符 shorthand character classes。</p><p>匹配所有的字母和数字</p><p>使用元字符 \w 来计算所有引号中字母和数字字符的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let quoteSample = &quot;The five boxing wizards jump quickly.&quot;;</span><br><span class="line">let alphabetRegexV2 = /\w/g; // 修改这一行</span><br><span class="line">let result = quoteSample.match(alphabetRegexV2).length;</span><br></pre></td></tr></table></figure><h1 id="匹配除了字母和数字的所有符号"><a href="#匹配除了字母和数字的所有符号" class="headerlink" title="匹配除了字母和数字的所有符号"></a>匹配除了字母和数字的所有符号</h1><p>已经了解到可以使用缩写 \w 来匹配字母和数字 [A-Za-z0-9_]。 不过，有可能想要搜寻的匹配模式是非字母数字字符。</p><p>可以使用 \W 搜寻和 \w 相反的匹配模式。 注意，相反匹配模式使用大写字母。 此缩写与 [^A-Za-z0-9_] 是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let shortHand = /\W/;</span><br><span class="line">let numbers = &quot;42%&quot;;</span><br><span class="line">let sentence = &quot;Coding!&quot;;</span><br><span class="line">numbers.match(shortHand);</span><br><span class="line">sentence.match(shortHand);</span><br></pre></td></tr></table></figure><p>第一次 match 调用将返回值 [“%”] 而第二次调用将返回 [“!”]。</p><p>匹配除了字母和数字的所有符号</p><p>使用缩写 \W 来计算引号中所有非字符字母和数字字符的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let quoteSample = &quot;The five boxing wizards jump quickly.&quot;;</span><br><span class="line">let nonAlphabetRegex = /\W/g; // 修改这一行</span><br><span class="line">let result = quoteSample.match(nonAlphabetRegex).length;</span><br></pre></td></tr></table></figure><h1 id="匹配所有数字"><a href="#匹配所有数字" class="headerlink" title="匹配所有数字"></a>匹配所有数字</h1><p>已经了解了常见字符串匹配模式的元字符，如字母数字。 另一个常见的匹配模式是只寻找数字。</p><p>查找数字字符的缩写是 \d，注意是小写的 d。 这等同于元字符 [0-9]，它查找 0 到 9 之间任意数字的单个字符。</p><p>匹配所有数字</p><p>使用缩写 \d 来计算电影标题中有多少个数字。 书面数字（”six” 而不是 6）不计算在内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let movieName = &quot;2001: A Space Odyssey&quot;;</span><br><span class="line">let numRegex = /\d/g; // 修改这一行</span><br><span class="line">let result = movieName.match(numRegex).length;</span><br></pre></td></tr></table></figure><h1 id="匹配所有非数字"><a href="#匹配所有非数字" class="headerlink" title="匹配所有非数字"></a>匹配所有非数字</h1><p>上一项挑战中展示了如何使用带有小写 d 的缩写 \d 来搜寻数字。 也可以使用类似的缩写来搜寻非数字，该缩写使用大写的 D。</p><p>查找非数字字符的缩写是 \D。 这等同于字符串 [^0-9]，它查找不是 0 - 9 之间数字的单个字符。</p><p>匹配所有非数字</p><p>使用非数字缩写 \D 来计算电影标题中有多少非数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let movieName = &quot;2001: A Space Odyssey&quot;;</span><br><span class="line">let noNumRegex = /\D/g; // 修改这一行</span><br><span class="line">let result = movieName.match(noNumRegex).length;</span><br></pre></td></tr></table></figure><h1 id="限制可能的用户名"><a href="#限制可能的用户名" class="headerlink" title="限制可能的用户名"></a>限制可能的用户名</h1><p>用户名在互联网上随处可见。 它们是用户在自己喜欢的网站上的唯一身份。</p><p>需要检索数据库中的所有用户名。 以下是用户在创建用户名时必须遵守的一些简单规则。</p><p>用户名仅能使用数字字母。</p><p>用户名中的数字必须在最后。 数字可以有零个或多个。 用户名不能以数字开头。</p><p>用户名字母可以是小写字母和大写字母。</p><p>用户名长度必须至少为两个字符。 两位用户名只能使用字母。</p><p>限制可能的用户名</p><p>修改正则表达式 userCheck 以满足上面列出的约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let username = &quot;JackOfAllTrades&quot;;</span><br><span class="line">let userCheck = /^[a-zA-Z]&#123;2,&#125;\d*$|^[a-zA-Z]\d&#123;2,&#125;$/;</span><br><span class="line">let result = userCheck.test(username);</span><br></pre></td></tr></table></figure><h1 id="匹配空白字符"><a href="#匹配空白字符" class="headerlink" title="匹配空白字符"></a>匹配空白字符</h1><p>迄今为止的挑战包括匹配字母和数字。 还可以匹配字符之间的空格。</p><p>可以使用 \s 搜寻空格，其中 s 是小写。 此匹配模式将匹配空格、回车符、制表符、换页符和换行符。 可以认为这类似于元字符 [ \r\t\f\n\v]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let whiteSpace = &quot;Whitespace. Whitespace everywhere!&quot;</span><br><span class="line">let spaceRegex = /\s/g;</span><br><span class="line">whiteSpace.match(spaceRegex);</span><br></pre></td></tr></table></figure><p>这个 match 调用将返回 [“ “, “ “]。</p><p>匹配空白字符</p><p>修改正则表达式 countWhiteSpace 查找字符串中的多个空白字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let sample = &quot;Whitespace is important in separating words&quot;;</span><br><span class="line">let countWhiteSpace = /\s/g; // 修改这一行</span><br><span class="line">let result = sample.match(countWhiteSpace);</span><br></pre></td></tr></table></figure><h1 id="匹配非空白字符"><a href="#匹配非空白字符" class="headerlink" title="匹配非空白字符"></a>匹配非空白字符</h1><p>已经学会了如何使用带有小写 s 的缩写 \s 来搜寻空白字符。 还可以搜寻除了空格之外的所有内容。</p><p>使用 \S 搜寻非空白字符，其中 s 是大写。 此匹配模式将不匹配空格、回车符、制表符、换页符和换行符。 可以认为这类似于元字符 [^ \r\t\f\n\v]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let whiteSpace = &quot;Whitespace. Whitespace everywhere!&quot;</span><br><span class="line">let nonSpaceRegex = /\S/g;</span><br><span class="line">whiteSpace.match(nonSpaceRegex).length;</span><br></pre></td></tr></table></figure><p>返回值的 .length 应该是 32。</p><p>匹配非空白字符</p><p>修改正则表达式 countNonWhiteSpace 以查找字符串中的多个非空字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let sample = &quot;Whitespace is important in separating words&quot;;</span><br><span class="line">let countNonWhiteSpace = /\S/g; // 修改这一行</span><br><span class="line">let result = sample.match(countNonWhiteSpace);</span><br></pre></td></tr></table></figure><h1 id="指定匹配的上限和下限"><a href="#指定匹配的上限和下限" class="headerlink" title="指定匹配的上限和下限"></a>指定匹配的上限和下限</h1><p>回想一下，使用加号 + 查找一个或多个字符，使用星号 * 查找零个或多个字符。 这些都很方便，但有时需要匹配一定范围的匹配模式。</p><p>可以使用数量说明符（quantity specifiers）指定匹配模式的上下限。 数量说明符与花括号（{ 和 }）一起使用。 可以在花括号之间放两个数字，这两个数字代表匹配模式的上限和下限。</p><p>例如，要匹配出现 3 到 5 次字母 a 的在字符串 ah，正则表达式应为&#x2F;a{3,5}h&#x2F;。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let A4 = &quot;aaaah&quot;;</span><br><span class="line">let A2 = &quot;aah&quot;;</span><br><span class="line">let multipleA = /a&#123;3,5&#125;h/;</span><br><span class="line">multipleA.test(A4);</span><br><span class="line">multipleA.test(A2);</span><br></pre></td></tr></table></figure><p>第一次 test 调用将返回 true，而第二次调用将返回 false。</p><p>指定匹配的上限和下限</p><p>修改正则表达式 ohRegex 以匹配出现 3 到 6 次字母 h 的字符串 Oh no。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let ohStr = &quot;Ohhh no&quot;;</span><br><span class="line">let ohRegex = /Oh&#123;3,6&#125;\sno/; // 修改这一行</span><br><span class="line">let result = ohRegex.test(ohStr);</span><br></pre></td></tr></table></figure><h1 id="只指定匹配的下限"><a href="#只指定匹配的下限" class="headerlink" title="只指定匹配的下限"></a>只指定匹配的下限</h1><p>可以使用带有花括号的数量说明符来指定匹配模式的上下限。 但有时候只想指定匹配模式的下限而不需要指定上限。</p><p>为此，在第一个数字后面跟一个逗号即可。</p><p>例如，要匹配至少出现 3 次字母 a 的字符串 hah，正则表达式应该是 &#x2F;ha{3,}h&#x2F;。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let A4 = &quot;haaaah&quot;;</span><br><span class="line">let A2 = &quot;haah&quot;;</span><br><span class="line">let A100 = &quot;h&quot; + &quot;a&quot;.repeat(100) + &quot;h&quot;;</span><br><span class="line">let multipleA = /ha&#123;3,&#125;h/;</span><br><span class="line">multipleA.test(A4);</span><br><span class="line">multipleA.test(A2);</span><br><span class="line">multipleA.test(A100);</span><br></pre></td></tr></table></figure><p>按顺序排列，三次 test 调用将返回值 true，false 和 true。</p><p>只指定匹配的下限</p><p>修改正则表达式 haRegex，匹配包含四个或更多字母 z 的单词 Hazzah。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let haStr = &quot;Hazzzzah&quot;;</span><br><span class="line">let haRegex = /Haz&#123;4,&#125;ah/; // 修改这一行</span><br><span class="line">let result = haRegex.test(haStr);</span><br></pre></td></tr></table></figure><h1 id="指定匹配的确切数量"><a href="#指定匹配的确切数量" class="headerlink" title="指定匹配的确切数量"></a>指定匹配的确切数量</h1><p>可以使用带有花括号的数量说明符来指定匹配模式的上下限。 但有时只需要特定数量的匹配。</p><p>要指定一定数量的匹配模式，只需在大括号之间放置一个数字。</p><p>例如，要只匹配字母 a 出现 3 次的单词hah，正则表达式应为&#x2F;ha{3}h&#x2F;。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let A4 = &quot;haaaah&quot;;</span><br><span class="line">let A3 = &quot;haaah&quot;;</span><br><span class="line">let A100 = &quot;h&quot; + &quot;a&quot;.repeat(100) + &quot;h&quot;;</span><br><span class="line">let multipleHA = /ha&#123;3&#125;h/;</span><br><span class="line">multipleHA.test(A4);</span><br><span class="line">multipleHA.test(A3);</span><br><span class="line">multipleHA.test(A100);</span><br></pre></td></tr></table></figure><p>按顺序排列，三次 test 调用将返回值 false，true 和 false。</p><p>指定匹配的确切数量</p><p>修改正则表达式timRegex，以匹配仅有四个字母 m 的单词 Timber。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let timStr = &quot;Timmmmber&quot;;</span><br><span class="line">let timRegex = /Tim&#123;4&#125;ber/; // 修改这一行</span><br><span class="line">let result = timRegex.test(timStr);</span><br></pre></td></tr></table></figure><h1 id="检查全部或无"><a href="#检查全部或无" class="headerlink" title="检查全部或无"></a>检查全部或无</h1><p>有时，想要搜寻的匹配模式可能有不确定是否存在的部分。 尽管如此，还是想检查它们。</p><p>为此，可以使用问号 ? 指定可能存在的元素。 这将检查前面的零个或一个元素。 可以将此符号视为前面的元素是可选的。</p><p>例如，美式英语和英式英语略有不同，可以使用问号来匹配两种拼写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let american = &quot;color&quot;;</span><br><span class="line">let british = &quot;colour&quot;;</span><br><span class="line">let rainbowRegex= /colou?r/;</span><br><span class="line">rainbowRegex.test(american);</span><br><span class="line">rainbowRegex.test(british);</span><br></pre></td></tr></table></figure><p>上面的 test 都会返回 true。</p><p>检查全部或无</p><p>修改正则表达式 favRegex 以匹配美式英语（favorite）和英式英语（favourite）的单词版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let favWord = &quot;favorite&quot;;</span><br><span class="line">let favRegex = /favou?rite/; // 修改这一行</span><br><span class="line">let result = favRegex.test(favWord);</span><br></pre></td></tr></table></figure><h1 id="正向先行断言和负向先行断言"><a href="#正向先行断言和负向先行断言" class="headerlink" title="正向先行断言和负向先行断言"></a>正向先行断言和负向先行断言</h1><p>先行断言 （Lookaheads）是告诉 JavaScript 在字符串中向前查找的匹配模式。 当想要在同一个字符串上搜寻多个匹配模式时，这可能非常有用。</p><p>有两种先行断言：正向先行断言（positive lookahead）和负向先行断言（negative lookahead）。</p><p>正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。 正向先行断言的用法是 (?&#x3D;…)，其中 … 就是需要存在但不会被匹配的部分。</p><p>另一方面，负向先行断言会查看并确保搜索匹配模式中的元素不存在。 负向先行断言的用法是 (?!…)，其中 … 是希望不存在的匹配模式。 如果负向先行断言部分不存在，将返回匹配模式的其余部分。</p><p>尽管先行断言有点儿令人困惑，但是这些示例会有所帮助。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let quit = &quot;qu&quot;;</span><br><span class="line">let noquit = &quot;qt&quot;;</span><br><span class="line">let quRegex= /q(?=u)/;</span><br><span class="line">let qRegex = /q(?!u)/;</span><br><span class="line">quit.match(quRegex);</span><br><span class="line">noquit.match(qRegex);</span><br></pre></td></tr></table></figure><p>这两次 match 调用都将返回 [“q”]。</p><p>先行断言的更实际用途是检查一个字符串中的两个或更多匹配模式。 这里有一个简单的密码检查器，密码规则是 3 到 6 个字符且至少包含一个数字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let password = &quot;abc123&quot;;</span><br><span class="line">let checkPass = /(?=\w&#123;3,6&#125;)(?=\D*\d)/;</span><br><span class="line">checkPass.test(password);</span><br></pre></td></tr></table></figure><p>正向先行断言和负向先行断言</p><p>在正则表达式 pwRegex 中使用先行断言以匹配大于 5 个字符且有两个连续数字的密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let sampleWord = &quot;astronaut&quot;;</span><br><span class="line">let pwRegex = /(?=\w&#123;6,&#125;)(?=\D*\d&#123;2&#125;)/;</span><br><span class="line">let result = pwRegex.test(sampleWord);</span><br></pre></td></tr></table></figure><h1 id="检查混合字符组"><a href="#检查混合字符组" class="headerlink" title="检查混合字符组"></a>检查混合字符组</h1><p>有时候我们想使用正则表达式里的括号 () 来检查字符组。</p><p>如果想在字符串找到 Penguin 或 Pumpkin，可以用这个正则表达式：&#x2F;P(engu|umpk)in&#x2F;g。</p><p>然后使用 test() 方法检查 test 字符串里面是否包含字符组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let testStr = &quot;Pumpkin&quot;;</span><br><span class="line">let testRegex = /P(engu|umpk)in/;</span><br><span class="line">testRegex.test(testStr);</span><br></pre></td></tr></table></figure><p>test 方法会返回 true。</p><p>检查混合字符组</p><p>完善正则表达式，使其以区分大小写的方式检查 Franklin Roosevelt 或 Eleanor Roosevelt 的名字，并且应该忽略 middle names。</p><p>然后完善代码，使创建的正则检查 myString，根据正则是否匹配返回 true 或 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let myString = &quot;Eleanor Roosevelt&quot;;</span><br><span class="line">let myRegex = /(Franklin|Eleanor)(\s[A-Za-z]+\.)?\sRoosevelt/g; // 添加了可选的中间名和点号  // 修改这一行</span><br><span class="line">let result = myRegex.test(myString); // 修改这一行</span><br><span class="line">// 使用 myString 通过挑战后，了解分组如何运行</span><br></pre></td></tr></table></figure><h1 id="使用捕获组重用模式"><a href="#使用捕获组重用模式" class="headerlink" title="使用捕获组重用模式"></a>使用捕获组重用模式</h1><p>当你想要匹配一个像下面这样多次出现的单词，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let repeatStr = &quot;row row row your boat&quot;;</span><br></pre></td></tr></table></figure><p>你可以使用 &#x2F;row row row&#x2F;。但如果你不知道重复的特定单词，怎么办？ 捕获组 可以用于找到重复的子字符串。</p><p>捕获组是通过把要捕获的正则表达式放在括号中来构建的。 在这个例子里， 目标是捕获一个包含字母数字字符的词，所以捕获组是将 \w+ 放在括号中：&#x2F;(\w+)&#x2F;。</p><p>分组匹配的子字符串被保存到一个临时的“变量”， 可以使用同一正则表达式和反斜线及捕获组的编号来访问它（例如：\1）。 捕获组按其开头括号的位置自动编号（从左到右），从 1 开始。</p><p>下面的示例是匹配被空格隔开的两个相同单词：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let repeatRegex = /(\w+) \1 \1/;</span><br><span class="line">repeatRegex.test(repeatStr); // Returns true</span><br><span class="line">repeatStr.match(repeatRegex); // Returns [&quot;row row row&quot;, &quot;row&quot;]</span><br></pre></td></tr></table></figure><p>在字符串上调用 .match() 方法将返回一个数组，其中包含它最终匹配到的子字符串及其捕获组。</p><p>使用捕获组重用模式</p><p>在 reRegex 中使用捕获组来匹配一个只由相同的数字重复三次组成的由空格分隔字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let repeatNum = &quot;42 42 42&quot;;</span><br><span class="line">let reRegex = /^(\d+) \1 \1$/; // 修改这一行</span><br><span class="line">let result = reRegex.test(repeatNum);</span><br></pre></td></tr></table></figure><h1 id="使用捕获组搜索和替换"><a href="#使用捕获组搜索和替换" class="headerlink" title="使用捕获组搜索和替换"></a>使用捕获组搜索和替换</h1><p>搜索功能是很有用的。 但是，当搜索同时也执行更改（或替换）匹配文本的操作时，搜索功能就会显得更加强大。</p><p>可以在字符串上使用 .replace() 方法来搜索并替换字符串中的文本。 .replace() 的输入首先是想要搜索的正则表达式匹配模式。 第二个参数是用于替换匹配的字符串或用于执行某些操作的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let wrongText = &quot;The sky is silver.&quot;;</span><br><span class="line">let silverRegex = /silver/;</span><br><span class="line">wrongText.replace(silverRegex, &quot;blue&quot;);</span><br></pre></td></tr></table></figure><p>replace 调用将返回字符串 The sky is blue.。</p><p>你还可以使用美元符号（$）访问替换字符串中的捕获组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Code Camp&quot;.replace(/(\w+)\s(\w+)/, &#x27;$2 $1&#x27;);</span><br></pre></td></tr></table></figure><p>调用 replace 将返回字符串 Camp Code。</p><p>使用捕获组搜索和替换</p><p>使用三个捕获组编写一个正则表达式 fixRegex，这三个捕获组将搜索字符串 one two three 中的每个单词。 然后更新 replaceText 变量，以字符串 three two one 替换 one two three，并将结果分配给 result 变量。 确保使用美元符号（$）语法在替换字符串中使用捕获组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;one two three&quot;;</span><br><span class="line">let fixRegex = /(\w+)\s(\w+)\s(\w+)/; // 修改这一行</span><br><span class="line">let replaceText = (&#x27;$3 $2 $1&#x27;); // 修改这一行</span><br><span class="line">let result = str.replace(fixRegex, replaceText);</span><br></pre></td></tr></table></figure><h1 id="删除开头和结尾的空白"><a href="#删除开头和结尾的空白" class="headerlink" title="删除开头和结尾的空白"></a>删除开头和结尾的空白</h1><p>有时字符串周围存在的空白字符并不是必需的。 字符串的典型处理是删除字符串开头和结尾处的空格。</p><p>删除开头和结尾的空白</p><p>编写一个正则表达式并使用适当的字符串方法删除字符串开头和结尾的空格。</p><p>注意： String.prototype.trim() 方法在这里也可以实现同样的效果，但是你需要使用正则表达式来完成此项挑战。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let hello = &quot;   Hello, World!  &quot;;  </span><br><span class="line">let wsRegex = /^\s+|\s+$/g; // 这个正则表达式匹配字符串开头和结尾的空格  </span><br><span class="line">let result = hello.replace(wsRegex, &#x27;&#x27;); // 使用replace方法将匹配到的空格替换为空字符串</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2024/07/17/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/07/17/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>函数式编程是另一种软件开发方法。在函数式编程中，代码被组织成较小的基本的函数，可以结合起来构建复杂的程序。 在这个课程中，你将学习函数式编程的核心概念，包括纯函数、如何避免突变、如何使用 .map() 和 .filter() 等方法编写更整洁的代码。</p><h1 id="学习函数式编程"><a href="#学习函数式编程" class="headerlink" title="学习函数式编程"></a>学习函数式编程</h1><p>函数式编程是一种方案简单、功能独立、对作用域外没有任何副作用的编程范式：INPUT -&gt; PROCESS -&gt; OUTPUT。</p><p>函数式编程：</p><p>1）功能独立——不依赖于程序的状态（比如可能发生变化的全局变量）；</p><p>2）纯函数——同一个输入永远能得到同一个输出；</p><p>3）有限的副作用——可以严格地限制函数外部对状态的更改。</p><p>学习函数式编程</p><p>freeCodeCamp 的成员们爱喝茶。</p><p>在代码编辑器中，已经为你定义好了prepareTea和getTea函数。 调用 getTea 函数为团队准备 40 杯茶，并将它们存储在 tea4TeamFCC 变量里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 函数返回表示“一杯绿茶（green tea）”的字符串</span><br><span class="line">const prepareTea = () =&gt; &#x27;greenTea&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">有一个函数（代表茶的种类）和需要几杯茶，下面的函数返回一个数组，包含字符串（每个字符串表示一杯特别种类的茶）。</span><br><span class="line">*/</span><br><span class="line">const getTea = (numOfCups) =&gt; &#123;</span><br><span class="line">  const teaCups = [];</span><br><span class="line"></span><br><span class="line">  for(let cups = 1; cups &lt;= numOfCups; cups += 1) &#123;</span><br><span class="line">    const teaCup = prepareTea();</span><br><span class="line">    teaCups.push(teaCup);</span><br><span class="line">  &#125;</span><br><span class="line">  return teaCups;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">const tea4TeamFCC = getTea(40);</span><br><span class="line">// 只修改这一行上面的代码</span><br></pre></td></tr></table></figure><h1 id="了解函数式编程术语"><a href="#了解函数式编程术语" class="headerlink" title="了解函数式编程术语"></a>了解函数式编程术语</h1><p>FCC 团队需求有变更，现在想要两种茶：绿茶（green tea）和红茶（black tea）。 事实证明，用户需求变更是很常见的。</p><p>基于以上信息，我们需要重构上一节挑战中的 getTea 函数来处理多种茶的请求。 我们可以修改 getTea 接受一个函数作为参数，使它能够修改茶的类型。 这让 getTea 更灵活，也使需求变更时为程序员提供更多控制权。</p><p>首先，我们将介绍一些术语：</p><p>Callbacks 是被传递到另一个函数中调用的函数。 你应该已经在其他函数中看过这个写法，例如在 filter 中，回调函数告诉 JavaScript 以什么规则过滤数组。</p><p>函数就像其他正常值一样，可以赋值给变量、传递给另一个函数，或从其它函数返回，这种函数叫做头等 first class 函数。 在 JavaScript 中，所有函数都是头等函数。</p><p>将函数作为参数或将函数作为返回值返回的函数叫作高阶函数。</p><p>当函数被传递给另一个函数或从另一个函数返回时，那些传入或返回的函数可以叫作 lambda。</p><p>了解函数式编程术语</p><p>准备 27 杯绿茶和 13 杯红茶，分别存入 tea4GreenTeamFCC 和 tea4BlackTeamFCC 变量。 请注意，getTea 函数已经变了，现在它接收一个函数作为第一个参数。</p><p>注意：数据（茶的数量）作为最后一个参数。 我们将在后面的课程中对此进行更多讨论。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 函数返回表示“一杯绿茶（green tea）”的字符串</span><br><span class="line">const prepareGreenTea = () =&gt; &#x27;greenTea&#x27;;</span><br><span class="line"></span><br><span class="line">// 函数返回表示“一杯红茶（black tea）”的字符串</span><br><span class="line">const prepareBlackTea = () =&gt; &#x27;blackTea&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">有一个函数（代表茶的种类）和需要几杯茶，下面的函数返回一个数组，包含字符串（每个字符串表示一杯特别种类的茶）。</span><br><span class="line">*/</span><br><span class="line">const getTea = (prepareTea, numOfCups) =&gt; &#123;</span><br><span class="line">  const teaCups = [];</span><br><span class="line"></span><br><span class="line">  for(let cups = 1; cups &lt;= numOfCups; cups += 1) &#123;</span><br><span class="line">    const teaCup = prepareTea();</span><br><span class="line">    teaCups.push(teaCup);</span><br><span class="line">  &#125;</span><br><span class="line">  return teaCups;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">const tea4GreenTeamFCC = getTea(prepareGreenTea,27);</span><br><span class="line">const tea4BlackTeamFCC = getTea(prepareBlackTea,13);</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">console.log(</span><br><span class="line">  tea4GreenTeamFCC,</span><br><span class="line">  tea4BlackTeamFCC</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="了解使用命令式编程的危害"><a href="#了解使用命令式编程的危害" class="headerlink" title="了解使用命令式编程的危害"></a>了解使用命令式编程的危害</h1><p>使用函数式编程是一个好的习惯。 它使你的代码易于管理，避免潜在的 bug。 但在开始之前，先看看命令式编程方法，以强调你可能有什么问题。</p><p>在英语 (以及许多其他语言) 中，命令式时态用来发出指令。 同样，命令式编程是向计算机提供一套执行任务的声明。</p><p>命令式编程常常改变程序状态，例如更新全局变量。 一个典型的例子是编写 for 循环，它为一个数组的索引提供了准确的迭代方向。</p><p>相反，函数式编程是声明式编程的一种形式。 通过调用方法或函数来告诉计算机要做什么。</p><p>JavaScript 提供了许多处理常见任务的方法，所以你无需写出计算机应如何执行它们。 例如，你可以用 map 函数替代上面提到的 for 循环来处理数组迭代。 这有助于避免语义错误，如调试章节介绍的 “Off By One Errors”。</p><p>考虑这样的场景：你正在浏览器中浏览网页，并想操作你打开的标签。 下面我们来试试用面向对象的思路来描述这种情景。</p><p>窗口对象由选项卡组成，通常会打开多个窗口。 窗口对象中每个打开网站的标题都保存在一个数组中。 在对浏览器进行了如打开新标签、合并窗口、关闭标签之类的操作后，你需要输出所有打开的标签。 关掉的标签将从数组中删除，新打开的标签（为简单起见）则添加到数组的末尾。</p><p>代码编辑器中显示了此功能的实现，其中包含 tabOpen()，tabClose()，和 join() 函数。 tabs 数组是窗口对象的一部分用于储存打开页面的名称。</p><p>了解使用命令式编程的危害</p><p>在编辑器中运行代码。 它使用了有副作用的方法，导致输出错误。 存储在 finalTabs.tabs 中的打开标签的最终列表应该是 [‘FB’, ‘Gitter’, ‘Reddit’, ‘Twitter’, ‘Medium’, ‘new tab’, ‘Netflix’, ‘YouTube’, ‘Vine’, ‘GMail’, ‘Work mail’, ‘Docs’, ‘freeCodeCamp’, ‘new tab’]，但输出会略有不同。</p><p>修改 Window.prototype.tabClose 使其删除正确的标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// tabs 是在窗口中打开的每个站点的 title 的数组</span><br><span class="line">const Window = function(tabs) &#123;</span><br><span class="line">  this.tabs = tabs; // 我们记录对象内部的数组</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 当你将两个窗口合并为一个窗口时</span><br><span class="line">Window.prototype.join = function(otherWindow) &#123;</span><br><span class="line">  this.tabs = this.tabs.concat(otherWindow.tabs);</span><br><span class="line">  return this;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 当你在最后打开一个选项卡时</span><br><span class="line">Window.prototype.tabOpen = function(tab) &#123;</span><br><span class="line">  this.tabs.push(&#x27;new tab&#x27;); // 我们现在打开一个新的选项卡</span><br><span class="line">  return this;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 当你关闭一个选项卡时</span><br><span class="line">Window.prototype.tabClose = function(index) &#123;</span><br><span class="line"></span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"></span><br><span class="line"> const tabsBeforeIndex = this.tabs.slice(0, index); // get the tabs before the tab</span><br><span class="line"> const tabsAfterIndex = this.tabs.slice(index + 1); // get the tabs after the tab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // 将它们合并起来</span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">  return this;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">// 我们创建三个浏览器窗口</span><br><span class="line">const workWindow = new Window([&#x27;GMail&#x27;, &#x27;Inbox&#x27;, &#x27;Work mail&#x27;, &#x27;Docs&#x27;, &#x27;freeCodeCamp&#x27;]); // 你的邮箱、Google Drive 和其他工作地点</span><br><span class="line">const socialWindow = new Window([&#x27;FB&#x27;, &#x27;Gitter&#x27;, &#x27;Reddit&#x27;, &#x27;Twitter&#x27;, &#x27;Medium&#x27;]); // 社交网站</span><br><span class="line">const videoWindow = new Window([&#x27;Netflix&#x27;, &#x27;YouTube&#x27;, &#x27;Vimeo&#x27;, &#x27;Vine&#x27;]); // 娱乐网站</span><br><span class="line"></span><br><span class="line">// 现在执行打开选项卡，关闭选项卡和其他操作</span><br><span class="line">const finalTabs = socialWindow</span><br><span class="line">  .tabOpen() // 打开一个新的选项卡，显示猫的图片</span><br><span class="line">  .join(videoWindow.tabClose(2)) // 关闭视频窗口的第三个选项卡，并合并</span><br><span class="line">  .join(workWindow.tabClose(1).tabOpen());</span><br><span class="line">console.log(finalTabs.tabs);</span><br></pre></td></tr></table></figure><h1 id="使用函数式编程避免变化和副作用"><a href="#使用函数式编程避免变化和副作用" class="headerlink" title="使用函数式编程避免变化和副作用"></a>使用函数式编程避免变化和副作用</h1><p>如果你还没想通，上一个挑战的问题出在 tabClose() 函数里的 splice。 不幸的是，splice 修改了调用它的原始数组，所以第二次调用它时是基于修改后的数组，才给出了意料之外的结果。</p><p>这是一个小例子，还有更广义的定义——在变量，数组或对象上调用一个函数，这个函数会改变对象中的变量或其他东西。</p><p>函数式编程的核心原则之一是不改变任何东西。 变化会导致错误。 如果一个函数不改变传入的参数、全局变量等数据，那么它造成问题的可能性就会小很多。</p><p>前面的例子没有任何复杂的操作，但是 splice 方法改变了原始数组，导致 bug 产生。</p><p>回想一下，在函数式编程中，改变或变更叫做 mutation，这种改变的结果叫做“副作用”（side effect）。 理想情况下，函数应该是不会产生任何副作用的 pure function。</p><p>让我们尝试掌握这个原则：不要改变代码中的任何变量或对象。</p><p>使用函数式编程避免变化和副作用</p><p>填写 incrementer 函数的代码，使其返回值为全局变量 fixedValue 增加 1 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">let fixedValue = 4;</span><br><span class="line"></span><br><span class="line">function incrementer() &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"> // 创建一个fixedValue的副本  </span><br><span class="line">  let tempValue = fixedValue;  </span><br><span class="line">  // 对副本进行操作  </span><br><span class="line">  tempValue = tempValue + 1;  </span><br><span class="line">  // 返回操作后的副本值，而不改变全局的fixedValue  </span><br><span class="line">  return tempValue;  </span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="传递参数以避免函数中的外部依赖"><a href="#传递参数以避免函数中的外部依赖" class="headerlink" title="传递参数以避免函数中的外部依赖"></a>传递参数以避免函数中的外部依赖</h1><p>上一个挑战是更接近函数式编程原则的挑战，但是仍然缺少一些东西。</p><p>虽然我们没有改变全局变量值，但在没有全局变量 fixedValue 的情况下，incrementer 函数将不起作用。</p><p>函数式编程的另一个原则是：总是显式声明依赖关系。 如果函数依赖于一个变量或对象，那么将该变量或对象作为参数直接传递到函数中。</p><p>这样做会有很多好处。 其中一点是让函数更容易测试，因为你确切地知道参数是什么，并且这个参数也不依赖于程序中的任何其他内容。</p><p>其次，这样做可以让你更加自信地更改，删除或添加新代码。 因为你很清楚哪些是可以改的，哪些是不可以改的，这样你就知道哪里可能会有潜在的陷阱。</p><p>最后，无论代码的哪一部分执行它，函数总是会为同一组输入生成相同的输出。</p><p>传递参数以避免函数中的外部依赖</p><p>更新 incrementer 函数，明确声明其依赖项。</p><p>编写 incrementer 函数，获取它的参数，然后将值增加 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">let fixedValue = 4;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">function incrementer(value) &#123;  </span><br><span class="line">  // 明确声明了依赖项：虽然此函数不直接依赖于fixedValue，但它依赖于传入的value参数  </span><br><span class="line">  return value + 1; // 将传入的参数值增加1后返回  </span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在函数中重构全局变量"><a href="#在函数中重构全局变量" class="headerlink" title="在函数中重构全局变量"></a>在函数中重构全局变量</h1><p>目前为止，我们已经看到了函数式编程的两个原则：</p><p>不要更改变量或对象 - 创建新变量和对象，并在需要时从函数返回它们。 提示：使用类似 const newArr &#x3D; arrVar 的东西，其中 arrVar 是一个数组，只会创建对现有变量的引用，而不是副本。 所以更改 newArr 中的值会同时更改 arrVar 中的值。</p><p>声明函数参数 - 函数内的任何计算仅取决于参数，而不取决于任何全局对象或变量。</p><p>给数字增加 1 不够有意思，但是我们可以在处理数组或更复杂的对象时应用这些原则。</p><p>在函数中重构全局变量</p><p>重构代码，使全局数组 bookList 在函数内部不会被改变。 add 函数可以将指定的 bookName 增加到数组末尾并返回一个新的数组（列表）。 remove 函数可以从数组中移除指定 bookName。</p><p>注意： 两个函数都应该返回一个数组，任何新参数都应该在 bookName 参数之前添加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">const bookList = [&quot;The Hound of the Baskervilles&quot;, &quot;On The Electrodynamics of Moving Bodies&quot;, &quot;Philosophiæ Naturalis Principia Mathematica&quot;, &quot;Disquisitiones Arithmeticae&quot;];</span><br><span class="line"></span><br><span class="line">// 修改这行下面的代码</span><br><span class="line">function add(bL,bookName) &#123;</span><br><span class="line"></span><br><span class="line"> const newBookList = [...bL, bookName];</span><br><span class="line"> return newBookList;</span><br><span class="line"></span><br><span class="line">  // 修改这行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 修改这行下面的代码</span><br><span class="line">function remove(bL,bookName) &#123;</span><br><span class="line">const newBookList = bL.filter(book =&gt; book !== bookName);</span><br><span class="line"> return newBookList;</span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="使用-map-方法从数组中提取数据"><a href="#使用-map-方法从数组中提取数据" class="headerlink" title="使用 map 方法从数组中提取数据"></a>使用 map 方法从数组中提取数据</h1><p>目前为止，我们已经学会了使用纯函数来避免程序中的副作用。 此外，我们已经看到函数的值仅取决于其输入参数。</p><p>这仅仅是个开始。 顾名思义，函数式编程以函数理论为中心。</p><p>能够将它们作为参数传递给其他函数，从另一个函数返回一个函数是有意义的。 函数在 JavaScript 中被视为 First Class Objects，它们可以像任何其他对象一样使用。 它们可以保存在变量中，存储在对象中，也可以作为函数参数传递。</p><p>让我们从一些简单的数组函数开始，这些函数是数组对象原型上的方法。 在本练习中，我们来了解下数组的 map 方法（即 Array.prototype.map()）。</p><p>请记住，map方法是迭代数组中每一项的方式之一。 在对每个元素应用回调函数后，它会创建一个新数组(不改变原来的数组)。 它这样做时没有改变原始数组。</p><p>当调用回调函数时，传入了三个参数。 第一个参数是当前正在处理的数组项。 第二个参数是当前数组项的索引值，第三个参数是在其上调用 map 方法的数组。</p><p>看下在 users 上使用 map 方法的例子，返回了一个新数组只包含了用户的名字。 为了简化，例子里只使用了回调函数的第一个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const users = [</span><br><span class="line">  &#123; name: &#x27;John&#x27;, age: 34 &#125;,</span><br><span class="line">  &#123; name: &#x27;Amy&#x27;, age: 20 &#125;,</span><br><span class="line">  &#123; name: &#x27;camperCat&#x27;, age: 10 &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const names = users.map(user =&gt; user.name);</span><br><span class="line">console.log(names);</span><br><span class="line">控制台将显示值 [ &#x27;John&#x27;, &#x27;Amy&#x27;, &#x27;camperCat&#x27; ]。</span><br></pre></td></tr></table></figure><p>使用 map 方法从数组中提取数据</p><p>watchList 数组保存了包含一些电影信息的对象。 在 watchList 上使用 map，将一个新的对象数组赋值给 ratings 变量。 新数组中的每个电影都只能有一个值为电影名称的 title 键，和一个值为 IMDB 评级的 rating 键。 目前编辑器中的代码是使用 for 循环实现，你应该使用 map 表达式替换循环功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 只修改这一行下面的代码</span><br><span class="line">/*</span><br><span class="line">const ratings = [];</span><br><span class="line"></span><br><span class="line">for (let i = 0; i &lt; watchList.length; i++) &#123;</span><br><span class="line">  ratings.push(&#123;title: watchList[i][&quot;Title&quot;], rating: watchList[i][&quot;imdbRating&quot;]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">const ratings = watchList.map(movie =&gt; (&#123;  </span><br><span class="line">  title: movie.Title, </span><br><span class="line">  rating: movie.imdbRating</span><br><span class="line">&#125;));  </span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(ratings));</span><br></pre></td></tr></table></figure><h1 id="在原型上实现map方法"><a href="#在原型上实现map方法" class="headerlink" title="在原型上实现map方法"></a>在原型上实现map方法</h1><p>之前用到了 Array.prototype.map() 方法（即 map()），通过 map 返回一个与调用它的数组长度相同的数组。 只要它的回调函数不改变原始数组，它就不会改变原始数组。</p><p>换句话说，map 是一个纯函数，它的输出仅取决于输入的数组和作为参数传入的回调函数。 此外，它接收另一个函数作为它的参数。</p><p>实现一个 map，加深对它的了解。 你可以用 for 循环或者 Array.prototype.forEach() 方法。</p><p>在原型上实现 map 方法</p><p>写一个和 Array.prototype.map() 一样的 Array.prototype.myMap()。 不能使用内置的 map 方法。 在 myMap 方法内，可以使用 this 访问 Array 实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.myMap = function(callback) &#123;</span><br><span class="line">  const newArray = [];</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">// 使用 for 循环遍历数组  </span><br><span class="line">  for (let i = 0; i &lt; this.length; i++) &#123;  </span><br><span class="line">    // 调用回调函数，并将当前元素和索引（可选）作为参数传递  </span><br><span class="line">    // 将回调函数的返回值添加到新数组中  </span><br><span class="line">    newArray.push(callback(this[i], i, this));  </span><br><span class="line">  &#125;  </span><br><span class="line">  // 返回新数组  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">  return newArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-filter-方法从数组中提取数据"><a href="#使用-filter-方法从数组中提取数据" class="headerlink" title="使用 filter 方法从数组中提取数据"></a>使用 filter 方法从数组中提取数据</h1><p>另一个有用的数组方法是 filter()（即 Array.prototype.filter()）。</p><p>filter 在一个数组的每个元素上调用一个函数，并返回一个新的数组，其中只包含该函数返回一个真值的元素，也就是说，一个被传递给 Boolean() 构造函数后返回 true 的值。 换言之，它根据传递给它的函数过滤数组。 和 map 一样，filter 不会改变原始数组。</p><p>回调函数接收三个参数。 第一个参数是当前正在被处理的元素。 第二个参数是这个元素的索引，第三个参数是在其上调用 filter 方法的数组。</p><p>看下在 users 上使用 filter 方法的例子，返回了一个包含了 30 岁以下的用户新数组。 为了简化，例子里只使用了回调函数的第一个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const users = [</span><br><span class="line">  &#123; name: &#x27;John&#x27;, age: 34 &#125;,</span><br><span class="line">  &#123; name: &#x27;Amy&#x27;, age: 20 &#125;,</span><br><span class="line">  &#123; name: &#x27;camperCat&#x27;, age: 10 &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const usersUnder30 = users.filter(user =&gt; user.age &lt; 30);</span><br><span class="line">console.log(usersUnder30); </span><br></pre></td></tr></table></figure><p>控制台将显示值 [ { name: ‘Amy’, age: 20 }, { name: ‘camperCat’, age: 10 } ]</p><p>使用 filter 方法从数组中提取数据</p><p>watchList 变量中包含一组存有多部电影信息对象。 结合 filter 和 map 返回一个 watchList 只包含 title 和 rating 属性的新数组。 新数组只包含 imdbRating 值大于或等于 8.0 的对象。 请注意，rating 值在对象中保存为字符串，你可能需要将它转换成数字来执行运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">// 使用 filter 和 map 返回一个只包含 title 和 rating（且 rating &gt;= 8.0）的新数组  </span><br><span class="line">const filteredList = watchList.filter(movie =&gt; parseFloat(movie.imdbRating) &gt;= &quot;8.0&quot;)  </span><br><span class="line"> .map(movie =&gt; (&#123;  </span><br><span class="line"> title: movie.Title, // 注意这里使用 Title 而不是 title，除非您的数据中使用的是小写  </span><br><span class="line">//rating: parseFloat(movie.imdbRating) // 将字符串转换为数字  </span><br><span class="line"> rating: movie.imdbRating </span><br><span class="line">&#125;));  </span><br><span class="line">  </span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">console.log(filteredList);</span><br></pre></td></tr></table></figure><h1 id="在原型上实现-filter-方法"><a href="#在原型上实现-filter-方法" class="headerlink" title="在原型上实现 filter 方法"></a>在原型上实现 filter 方法</h1><p>为了加深对 filter 的理解，可以自己实现一个。 可以用 for 循环或 Array.prototype.forEach()。</p><p>在原型上实现 filter 方法</p><p>编写一个和 Array.prototype.filter() 功能一样的 Array.prototype.myFilter() 方法。 不能使用内置的 filter 方法。 在 myFilter 方法内部，可以使用 this 访问 Array 实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.myFilter = function(callback) &#123;</span><br><span class="line">  const newArray = [];</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  // 使用 for 循环遍历数组  </span><br><span class="line">  for (let i = 0; i &lt; this.length; i++) &#123;  </span><br><span class="line">    // 调用回调函数，并将当前元素和索引作为参数传递  </span><br><span class="line">    // 如果回调函数返回 true，则将当前元素添加到新数组中  </span><br><span class="line">    if (callback(this[i], i, this)) &#123;  </span><br><span class="line">      newArray.push(this[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">  return newArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-slice-方法返回数组的一部分"><a href="#使用-slice-方法返回数组的一部分" class="headerlink" title="使用 slice 方法返回数组的一部分"></a>使用 slice 方法返回数组的一部分</h1><p>slice 方法可以从已有数组中返回指定元素。 它接受两个参数，第一个规定从何处开始选取，第二个规定从何处结束选取（不包括该元素）。 如果没有传参，则默认为从数组的开头开始到结尾结束，这是复制整个数组的简单方式。 slice 返回一个新数组，不会修改原始数组。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [&quot;Cat&quot;, &quot;Dog&quot;, &quot;Tiger&quot;, &quot;Zebra&quot;];</span><br><span class="line">const newArray = arr.slice(1, 3);</span><br></pre></td></tr></table></figure><p>newArray 值为 [“Dog”, “Tiger”]</p><p>使用 slice 方法返回数组的一部分<br>在 sliceArray 函数中使用 slice 方法，给出 beginSlice 和 endSlice 索引，返回 anim 数组的一部分。 这个函数应返回一个数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function sliceArray(anim, beginSlice, endSlice) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">return anim.slice(beginSlice, endSlice);</span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const inputAnim = [&quot;Cat&quot;, &quot;Dog&quot;, &quot;Tiger&quot;, &quot;Zebra&quot;, &quot;Ant&quot;];</span><br><span class="line">sliceArray(inputAnim, 1, 3);</span><br></pre></td></tr></table></figure><h1 id="使用-slice-而不是-splice-从数组中移除元素"><a href="#使用-slice-而不是-splice-从数组中移除元素" class="headerlink" title="使用 slice 而不是 splice 从数组中移除元素"></a>使用 slice 而不是 splice 从数组中移除元素</h1><p>使用数组时经常遇到要删除一些元素并保留数组剩余部分的情况。 为此，JavaScript 提供了 splice 方法，它接收两个参数：从哪里开始删除项目的索引，和要删除的项目数。 如果没有提供第二个参数，默认情况下是移除一直到结尾的所有元素。 但 splice 方法会改变调用它的原始数组。 举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const cities = [&quot;Chicago&quot;, &quot;Delhi&quot;, &quot;Islamabad&quot;, &quot;London&quot;, &quot;Berlin&quot;];</span><br><span class="line">cities.splice(3, 1);</span><br></pre></td></tr></table></figure><p>在这里 splice 返回字符串 London 并从城市数组中删除它。 cities 将有值 [“Chicago”, “Delhi”, “Islamabad”, “Berlin”]。</p><p>正如我们在上一次挑战中看到的那样，slice 方法不会改变原始数组，而是返回一个可以保存到变量中的新数组。 回想一下，slice 方法接收两个参数，从开始索引开始选取到结束（不包括该元素），并在新数组中返回这些元素。 使用 slice 方法替代 splice 有助于避免数组变化产生的副作用。</p><p>使用 slice 而不是 splice 从数组中移除元素</p><p>用 slice 代替 splice 重写 nonMutatingSplice 函数。 将 cities 数组长度限制为 3，并返回一个仅包含前 3 项的新数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function nonMutatingSplice(cities) &#123;</span><br><span class="line"></span><br><span class="line">  //return cities.splice(3);</span><br><span class="line">   return cities.slice(0, 3);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-concat-方法组合两个数组"><a href="#使用-concat-方法组合两个数组" class="headerlink" title="使用 concat 方法组合两个数组"></a>使用 concat 方法组合两个数组</h1><p>Concatenation 意思是将元素连接到尾部。 同理，JavaScript 为字符串和数组提供了concat方法。 对数组来说，在一个数组上调用 concat 方法，然后提供另一个数组作为参数添加到第一个数组末尾。 它返回一个新数组，不会改变任何一个原始数组。 举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].concat([4, 5, 6]);</span><br></pre></td></tr></table></figure><p>返回的数组将是 [1, 2, 3, 4, 5, 6]。</p><p>使用 concat 方法组合两个数组</p><p>在 nonMutatingConcat 函数里使用 concat，将 attach 拼接到 original 尾部。 函数返回拼接后的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function nonMutatingConcat(original, attach) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"></span><br><span class="line">   return original.concat (attach);</span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const first = [1, 2, 3];</span><br><span class="line">const second = [4, 5];</span><br><span class="line">nonMutatingConcat(first, second);</span><br></pre></td></tr></table></figure><h1 id="使用-concat-而不是-push-将元素添加到数组的末尾"><a href="#使用-concat-而不是-push-将元素添加到数组的末尾" class="headerlink" title="使用 concat 而不是 push 将元素添加到数组的末尾"></a>使用 concat 而不是 push 将元素添加到数组的末尾</h1><p>函数式编程就是创建和使用具有不变性的函数。</p><p>上一个挑战介绍了 concat 方法，这是一种在不改变原始数组的前提下，将数组组合成一个新数组的方法。 将 concat 方法与 push 方法做比较。 push 将一个元素添加到调用它的数组的末尾，这样会改变该数组。 举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [1, 2, 3];</span><br><span class="line">arr.push(4, 5, 6);</span><br></pre></td></tr></table></figure><p>arr 的值被修改为 [1, 2, 3, 4, 5, 6]，这不是函数编程方式。</p><p>concat 方法可以将新项目添加到数组末尾，而不附带改变数组。</p><p>使用 concat 而不是 push 将元素添加到数组的末尾</p><p>修改 nonMutatingPush 函数，用 concat 将 newItem 添加到 original 末尾，而不改变 original 或 newItem 数组。 该函数应返回一个数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function nonMutatingPush(original, newItem) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  //return original.push(newItem);</span><br><span class="line">  return original.concat(newItem);</span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const first = [1, 2, 3];</span><br><span class="line">const second = [4, 5];</span><br><span class="line">nonMutatingPush(first, second);</span><br></pre></td></tr></table></figure><h1 id="使用-reduce-方法分析数据"><a href="#使用-reduce-方法分析数据" class="headerlink" title="使用 reduce 方法分析数据"></a>使用 reduce 方法分析数据</h1><p>reduce()（即Array.prototype.reduce()），是 JavaScript 所有数组操作中最常用的方法。 几乎可以用reduce方法解决所有数组处理问题。</p><p>reduce 方法是处理数组更通用的方式，而且 filter 和 map 方法都可以当作是 reduce 的特殊实现。 reduce 方法遍历数组中的每个项目并返回单个值（即字符串、数字、对象、数组）。 这是通过在每次迭代中调用一个回调函数来实现的。</p><p>回调函数接受四个参数。 第一个参数称为叠加器，它是上一次迭代中回调函数的返回值，第二个参数是当前正在处理的数组元素，第三个参数是该参数的索引，第四个参数是在其上调用 reduce 方法的数组。</p><p>除了回调函数，reduce 还有一个额外的参数作为叠加器的初始值。 如果没有第二个参数，会跳过第一次迭代，第二次迭代给叠加器传入数组的第一个元素。</p><p>见下面的例子，给 users 数组使用 reduce 方法，返回所有用户数组的和。 为了简化，例子仅使用了回调函数的第一个参数和第二个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const users = [</span><br><span class="line">  &#123; name: &#x27;John&#x27;, age: 34 &#125;,</span><br><span class="line">  &#123; name: &#x27;Amy&#x27;, age: 20 &#125;,</span><br><span class="line">  &#123; name: &#x27;camperCat&#x27;, age: 10 &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const sumOfAges = users.reduce((sum, user) =&gt; sum + user.age, 0);</span><br><span class="line">console.log(sumOfAges);</span><br></pre></td></tr></table></figure><p>这里控制台将显示值 64。</p><p>在另一个例子里，查看如何返回一个包含用户名称做为属性，其年龄做为值的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const users = [</span><br><span class="line">  &#123; name: &#x27;John&#x27;, age: 34 &#125;,</span><br><span class="line">  &#123; name: &#x27;Amy&#x27;, age: 20 &#125;,</span><br><span class="line">  &#123; name: &#x27;camperCat&#x27;, age: 10 &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">const usersObj = users.reduce((obj, user) =&gt; &#123;</span><br><span class="line">  obj[user.name] = user.age;</span><br><span class="line">  return obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line">console.log(usersObj);</span><br></pre></td></tr></table></figure><p>控制台将显示值 { John: 34, Amy: 20, camperCat: 10 }。</p><p>使用 reduce 方法分析数据</p><p>watchList 是包含一些电影信息的对象。 使用 reduce 查找由 Christopher Nolan 导演的电影的 IMDB 评级平均值。 回想一下之前的挑战，如何 filter 数据，以及使用 map 来获取你想要的数据。 您可能需要创建其他变量，并从 getRating 函数返回平均评分。 请注意，评级在对象中是字符串，需要将其转换为数字再用于数学运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getRating(watchList) &#123;  </span><br><span class="line"></span><br><span class="line">var averageRating = watchList.filter(x =&gt; x.Director === &quot;Christopher Nolan&quot;).map(x =&gt; Number(x.imdbRating)).reduce((x, y) =&gt; x + y) / watchList.filter(x =&gt; x.Director === &quot;Christopher Nolan&quot;).length;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  return averageRating;  </span><br><span class="line">&#125;  </span><br><span class="line">console.log(getRating(watchList));</span><br></pre></td></tr></table></figure><h1 id="使用高阶函数-map、filter-或者-reduce-来解决复杂问题"><a href="#使用高阶函数-map、filter-或者-reduce-来解决复杂问题" class="headerlink" title="使用高阶函数 map、filter 或者 reduce 来解决复杂问题"></a>使用高阶函数 map、filter 或者 reduce 来解决复杂问题</h1><p>已经接触了高阶函数如 map()、 filter() 和 reduce()的使用，是时候用它们来完成一些复杂的挑战了。</p><p>使用高阶函数 map、filter 或者 reduce 来解决复杂问题</p><p>使用 map()、filter() 和 reduce() 的任何组合完成 squareList 函数的代码。 传递一个包含实数的数组给函数时，函数应返回一个新的数组，只包含正整数（小数不是整数）的平方值， 例如 [-3, 4.8, 5, 3, -3.2] 这样一个包含实数的数组。</p><p>注意： 函数不应该包含任何形式的 for 或者 while 循环或者 forEach() 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const squareList = arr =&gt; &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  return arr.filter(num =&gt; Number.isInteger(num) &amp;&amp; num &gt; 0).map(num =&gt; num * num); </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);</span><br><span class="line">console.log(squaredIntegers);</span><br></pre></td></tr></table></figure><h1 id="使用-sort-方法按字母顺序给数组排序"><a href="#使用-sort-方法按字母顺序给数组排序" class="headerlink" title="使用 sort 方法按字母顺序给数组排序"></a>使用 sort 方法按字母顺序给数组排序</h1><p>sort 方法可以根据回调函数对数组元素进行排序。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function ascendingOrder(arr) &#123;</span><br><span class="line">  return arr.sort(function(a, b) &#123;</span><br><span class="line">    return a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ascendingOrder([1, 5, 2, 3, 4]);</span><br></pre></td></tr></table></figure><p>这将返回值 [1, 2, 3, 4, 5]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function reverseAlpha(arr) &#123;</span><br><span class="line">  return arr.sort(function(a, b) &#123;</span><br><span class="line">    return a === b ? 0 : a &lt; b ? 1 : -1;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reverseAlpha([&#x27;l&#x27;, &#x27;h&#x27;, &#x27;z&#x27;, &#x27;b&#x27;, &#x27;s&#x27;]);</span><br></pre></td></tr></table></figure><p>这将返回值 [‘z’, ‘s’, ‘l’, ‘h’, ‘b’]。</p><p>JavaScript 的默认排序方法是 Unicode 值顺序排序，有时可能会得到意想不到的结果。 因此，建议提供一个回调函数来指定如何对数组项目排序。 这个回调函数通常叫做 compareFunction，它根据 compareFunction 的返回值决定数组元素的排序方式： 如果两个元素 a 和 b，compareFunction(a,b) 返回一个比 0 小的值，那么 a 会在 b 的前面。 如果两个元素 a 和 b，compareFunction(a,b) 返回一个比 0 大的值，那么 b 会在 a 的前面。 如果两个元素 a 和 b，compareFunction(a,b) 返回等于 0 的值，那么 a 和 b 的位置保持不变。</p><p>使用 sort 方法按字母顺序给数组排序</p><p>在 alphabeticalOrder 函数中使用 sort 方法对 arr 中的元素按照字母顺序排列。 该函数应返回一个排序的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function alphabeticalOrder(arr) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"> // 使用 sort 方法对 arr 中的元素进行字母顺序排序  </span><br><span class="line">  arr.sort();  </span><br><span class="line">  // 返回排序后的数组  </span><br><span class="line">  return arr;  </span><br><span class="line">  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alphabeticalOrder([&quot;a&quot;, &quot;d&quot;, &quot;c&quot;, &quot;a&quot;, &quot;z&quot;, &quot;g&quot;]);</span><br></pre></td></tr></table></figure><h1 id="在不更改原始数组的前提下返回排序后的数组"><a href="#在不更改原始数组的前提下返回排序后的数组" class="headerlink" title="在不更改原始数组的前提下返回排序后的数组"></a>在不更改原始数组的前提下返回排序后的数组</h1><p>sort 方法会产生改变原始数组中元素顺序的副作用。 换句话说，它会改变数组的位置。 避免这种情况的一种方法是先将空数组连接到正在排序的数组上（记住 slice 和 concat 返回一个新数组），再用sort方法。</p><p>在不更改原始数组的前提下返回排序后的数组</p><p>在 nonMutatingSort 函数中使用 sort 方法对数组中的元素按升序进行排列。 函数不能改变 globalArray 变量，应返回一个新数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const globalArray = [5, 6, 3, 2, 9];</span><br><span class="line"></span><br><span class="line">function nonMutatingSort(arr) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  let sortedArray = [...arr]; // 使用扩展运算符或slice方法复制数组  </span><br><span class="line">  sortedArray.sort((a, b) =&gt; a - b); // 对复制后的数组进行升序排序  </span><br><span class="line">  return sortedArray; // 返回新的已排序数组  </span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nonMutatingSort(globalArray);</span><br></pre></td></tr></table></figure><h1 id="使用-split-方法将字符串拆分成数组"><a href="#使用-split-方法将字符串拆分成数组" class="headerlink" title="使用 split 方法将字符串拆分成数组"></a>使用 split 方法将字符串拆分成数组</h1><p>split 方法将一个字符串分割成一个字符串数组。 它需要一个参数作为分隔符，它可以是用于拆分字符串或正则表达式的一个字符。 举个例子，如果分隔符是空格，你会得到一个单词数组；如果分隔符是空字符串，你会得到一个由字符串中每个字符组成的数组。</p><p>下面是两个用空格分隔一个字符串的例子，另一个是用数字的正则表达式分隔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const str = &quot;Hello World&quot;;</span><br><span class="line">const bySpace = str.split(&quot; &quot;);</span><br><span class="line"></span><br><span class="line">const otherString = &quot;How9are7you2today&quot;;</span><br><span class="line">const byDigits = otherString.split(/\d/);</span><br><span class="line">bySpace 将有值 [&quot;Hello&quot;, &quot;World&quot;]，byDigits 将有值 [&quot;How&quot;, &quot;are&quot;, &quot;you&quot;, &quot;today&quot;]。</span><br></pre></td></tr></table></figure><p>因为字符串是不可变的，split 方法操作它们更方便。</p><p>使用 split 方法将字符串拆分成数组</p><p>在 splitify 函数中用 split 方法将 str 分割成单词数组。 这个方法应该返回一个数组。 单词不一定都是用空格分隔，所以数组中不应包含标点符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function splitify(str) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"></span><br><span class="line">  // 首先，将所有非字母数字字符替换为一个空格  </span><br><span class="line">  let tempStr = str.replace(/[^\w\s]/g, &#x27; &#x27;);  </span><br><span class="line">    </span><br><span class="line">  // 然后，将多个连续的空格替换为一个空格  </span><br><span class="line">  tempStr = tempStr.replace(/\s+/g, &#x27; &#x27;);  </span><br><span class="line">    </span><br><span class="line">  // 最后，按空格分割字符串  </span><br><span class="line">  return tempStr.trim().split(/\s+/).filter(Boolean);  </span><br><span class="line">    </span><br><span class="line">  // 使用 trim() 来移除字符串开头和结尾的空格（如果有的话）  </span><br><span class="line">  // 使用 filter(Boolean) 来移除空字符串（如果它们存在的话）</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">splitify(&quot;Hello World,I-am code&quot;);</span><br></pre></td></tr></table></figure><h1 id="使用-join-方法将数组组合成字符串"><a href="#使用-join-方法将数组组合成字符串" class="headerlink" title="使用 join 方法将数组组合成字符串"></a>使用 join 方法将数组组合成字符串</h1><p>join 方法用来把数组中的所有元素放入一个字符串。 并通过指定的分隔符参数进行分隔。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const arr = [&quot;Hello&quot;, &quot;World&quot;];</span><br><span class="line">const str = arr.join(&quot; &quot;);</span><br></pre></td></tr></table></figure><p>str 的值应该是字符串 Hello World。</p><p>使用 join 方法将数组组合成字符串</p><p>在函数 sentensify 内用 join 方法（及其他方法）用字符串 str 中的单词造句，这个函数应返回一个字符串。 该函数应返回一个数组。 举个例子，I-like-Star-Wars 会被转换成 I like Star Wars。 在此挑战中请勿使用 replace 方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function sentensify(str) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"> </span><br><span class="line">  // 使用正则表达式来匹配任何非字母数字字符（除了空格）作为分隔符  </span><br><span class="line">  // 这将匹配连字符 -、点 .、逗号 , 以及其他任何非字母数字字符  </span><br><span class="line">  let words = str.split(/[^\w\s]+/); // 注意使用 + 来确保连续的分隔符只产生一个分割  </span><br><span class="line">  </span><br><span class="line">  // 通常不需要再次分割空格，因为上面的正则表达式已经处理了这个问题  </span><br><span class="line">  // 但如果由于某种原因需要确保数组中没有空字符串，可以使用 filter  </span><br><span class="line">  words = words.filter(Boolean); // 移除空字符串  </span><br><span class="line">  </span><br><span class="line">  // 使用 join 方法将数组中的单词用空格连接起来  </span><br><span class="line">  return words.join(&#x27; &#x27;);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sentensify(&quot;May-the-force-be-with-you&quot;);</span><br></pre></td></tr></table></figure><h1 id="应用函数式编程将字符串转换为URL片段"><a href="#应用函数式编程将字符串转换为URL片段" class="headerlink" title="应用函数式编程将字符串转换为URL片段"></a>应用函数式编程将字符串转换为URL片段</h1><p>最后几个挑战中涵盖了许多符合函数式编程原则并在处理数组和字符串中非常有用的方法。 我们还学习了强大的、可以将问题简化为更简单形式的 reduce 方法。 从计算平均值到排序，任何数组操作都可以用它来实现。 回想一下，map 和 filter 方法都是 reduce 的特殊实现。</p><p>让我们把学到的知识结合起来解决一个实际问题。</p><p>许多内容管理站点（CMS）为了让添加书签更简单，会将帖子的标题添加到 URL 上。 举个例子，如果你写了一篇标题为 Stop Using Reduce 的帖子，URL很可能会包含标题字符串的某种形式 (如：…&#x2F;stop-using-reduce)。 你可能已经在 freeCodeCamp 网站上注意到了这一点。</p><p>应用函数式编程将字符串转换为URL片段</p><p>填写 urlSlug 函数，将字符串 title 转换成带有连字符号的 URL。 您可以使用本节中介绍的任何方法，但不要用 replace 方法。 以下是本次挑战的要求：</p><p>输入包含空格和标题大小写单词的字符串</p><p>输出字符串，单词之间的空格用连字符 (-) 替换</p><p>输出应该是小写字母</p><p>输出不应有任何空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 只修改这一行下面的代码</span><br><span class="line">function urlSlug(title) &#123;  </span><br><span class="line"> return title.toLowerCase().trim().split(/\s+/).join(&#x27;-&#x27;);</span><br><span class="line">&#125;  </span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line">urlSlug(&quot;A Mind Needs Books Like A Sword Needs A Whetstone&quot;);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">str.toLowerCase(): 字符串字母均变为小写。</span><br><span class="line">str.trim():消除开头与结尾的空格。</span><br><span class="line">arr.join(&quot;&quot;):将数组连接为字符串。例如arr.join(’-’),用-连接数组中的每个元素。</span><br><span class="line">str.split():将字符串以指定的分隔符分割为一个数组。</span><br><span class="line">str.split(/\s+/) ： /\s+/ 匹配任何空白符，包括\n,\r,\f,\t,\v等（换行、回车、空格、tab等）</span><br><span class="line"></span><br><span class="line">str.split(/\w/): /\w/匹配“-”这一类的字符</span><br><span class="line"></span><br><span class="line">str.split(/\d/)：/\d/匹配数字。</span><br><span class="line">例如：a=“abcd2sees3ss”;</span><br><span class="line">a.split(/\d/)后的结果为[“abcd”,“sees”,“ss”]这样</span><br><span class="line"></span><br><span class="line">点str.split(&quot;[.]&quot;)</span><br><span class="line">竖线str.split(&quot;\|&quot;)</span><br><span class="line">星号 str.split(&quot;\*&quot;)</span><br><span class="line">斜线 str.split(&quot;\ \ \ \ “)</span><br><span class="line">中括号 str.split(”\ \ [\ \ ]&quot;)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h1 id="使用-every-方法检查数组中的每个元素是否符合条件"><a href="#使用-every-方法检查数组中的每个元素是否符合条件" class="headerlink" title="使用 every 方法检查数组中的每个元素是否符合条件"></a>使用 every 方法检查数组中的每个元素是否符合条件</h1><p>every 方法用于检测数组中所有元素是否都符合指定条件。 如果所有元素满足条件，返回布尔值 true，反之返回 false。</p><p>举个例子，下面的代码检测数组 numbers 的所有元素是否都小于 10：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 5, 8, 0, 10, 11];</span><br><span class="line"></span><br><span class="line">numbers.every(function(currentValue) &#123;</span><br><span class="line">  return currentValue &lt; 10;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>every 方法在这里会返回 false。</p><p>使用 every 方法检查数组中的每个元素是否符合条件</p><p>在 checkPositive 函数中使用 every 方法检查 arr 中是否所有元素都是正数。 函数应返回一个布尔值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function checkPositive(arr) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"></span><br><span class="line">return arr.every(function(currentValue) &#123;//注意这里也要写一个return </span><br><span class="line">  return currentValue &gt; 0;</span><br><span class="line">&#125;);</span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkPositive([1, 2, 3, -4, 5]);</span><br></pre></td></tr></table></figure><h1 id="使用-some-方法检查数组中是否有元素是否符合条件"><a href="#使用-some-方法检查数组中是否有元素是否符合条件" class="headerlink" title="使用 some 方法检查数组中是否有元素是否符合条件"></a>使用 some 方法检查数组中是否有元素是否符合条件</h1><p>some 方法用于检测数组中任何元素是否满足指定条件。 如果有一个元素满足条件，返回布尔值 true，反之返回 false。</p><p>举个例子，下面的代码检测数组numbers中是否有元素小于 10：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [10, 50, 8, 220, 110, 11];</span><br><span class="line"></span><br><span class="line">numbers.some(function(currentValue) &#123;</span><br><span class="line">  return currentValue &lt; 10;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>some 方法将返回 true。</p><p>使用 some 方法检查数组中是否有元素是否符合条件</p><p>在 checkPositive 函数值中使用 some 检查 arr 中是否有元素为正数。 函数应返回一个布尔值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function checkPositive(arr) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line"></span><br><span class="line">return arr.some(function(currentValue) &#123;</span><br><span class="line">  return currentValue &gt; 0;</span><br><span class="line">&#125;);</span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkPositive([1, 2, 3, -4, 5]);</span><br></pre></td></tr></table></figure><h1 id="函数柯里化和局部调用"><a href="#函数柯里化和局部调用" class="headerlink" title="函数柯里化和局部调用"></a>函数柯里化和局部调用</h1><p>arity（参数个数）是函数所需的形参的数量。 函数柯里化（Currying）意思是把接受多个 arity 的函数变换成接受单一 arity 的函数。</p><p>换句话说，就是重构函数让它接收一个参数，然后返回接收下一个参数的函数，依此类推。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function unCurried(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function curried(x) &#123;</span><br><span class="line">  return function(y) &#123;</span><br><span class="line">    return x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const curried = x =&gt; y =&gt; x + y</span><br><span class="line"></span><br><span class="line">curried(1)(2)</span><br><span class="line">curried(1)(2) 会返回 3。</span><br></pre></td></tr></table></figure><p>柯里化在不能一次为函数提供所有参数情况下很有用。 因为它可以将每个函数的调用保存到一个变量中，该变量将保存返回的函数引用，该引用在下一个参数可用时接受该参数。 下面是使用柯里化函数的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const funcForY = curried(1);</span><br><span class="line">console.log(funcForY(2)); // 3</span><br></pre></td></tr></table></figure><p>类似地，局部调用（ partial application）的意思是一次对一个函数应用几个参数，然后返回另一个应用更多参数的函数。 这是一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function impartial(x, y, z) &#123;</span><br><span class="line">  return x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const partialFn = impartial.bind(this, 1, 2);</span><br><span class="line">partialFn(10); // 13</span><br></pre></td></tr></table></figure><p>函数柯里化和局部调用</p><p>填写 add 函数主体部分，用柯里化添加参数 x，y 和 z.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function add(x) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  return function(y) &#123;  </span><br><span class="line">    return function(z) &#123;  </span><br><span class="line">      return x + y + z;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  &#125;; </span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(10)(20)(30);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础数据结构</title>
      <link href="/2024/07/16/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/07/16/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>我们可以通过多种方式存储和访问数据。你已经知道数组和对象了，它们都是常见的 JavaScript 数据结构。 在基础数据结构课程中，你会更深入地了解数组和对象之间的差异，以及在不同情况下应该使用哪个。你还将学习到一些好用的 JS 方法，例如 splice()，以及使用 Object.keys() 来访问和操作数据。</p><h1 id="使用数组存储不同类型的数据"><a href="#使用数组存储不同类型的数据" class="headerlink" title="使用数组存储不同类型的数据"></a>使用数组存储不同类型的数据</h1><p>以下是最简单的数组（Array）示例： 这是一个一维数组（one-dimensional array），它只有一层，或者说它里面没有包含其它数组。 可以观察到，这个数组中只包含了布尔值（booleans）、字符串（strings）、数字（numbers）以及 JavaScript 中的其他数据类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let simpleArray = [&#x27;one&#x27;, 2, &#x27;three&#x27;, true, false, , null];</span><br><span class="line">console.log(simpleArray.length);</span><br></pre></td></tr></table></figure><p>调用 console.log 显示 7。</p><p>所有数组都有一个表示长度的属性，我们可以通过 Array.length 来访问它。 下面是一个关于数组的更复杂的例子。 这是一个多维数组 （multi-dimensional Array），或者说是一个包含了其他数组的数组。 可以注意到，在它的内部还包含了 JavaScript 中的对象（objects）结构。 我们会在后面的小节中讨论该数据结构，但现在你只需要知道数组能够存储复杂的对象类型数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let complexArray = [</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      one: 1,</span><br><span class="line">      two: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      three: 3,</span><br><span class="line">      four: 4</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      a: &quot;a&quot;,</span><br><span class="line">      b: &quot;b&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      c: &quot;c&quot;,</span><br><span class="line">      d: &quot;d&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>使用数组存储不同类型的数据</p><p>我们已经定义了一个名为 yourArray 的变量。 请修改代码，将一个含有至少 5 个元素的数组赋值给 yourArray 变量。 你的数组中应包含至少一个 string 类型的数据、一个 number 类型的数据和一个 boolean 类型的数据。</p><h1 id="使用方括号访问数组的元素"><a href="#使用方括号访问数组的元素" class="headerlink" title="使用方括号访问数组的元素"></a>使用方括号访问数组的元素</h1><p>所有数据结构的基本特性是，它们不仅可以存储数据，还可以让我们按需访问存放在其中的数据。 我们已经学习了如何创建数组，现在让我们来学习如何访问数组中的数据。</p><p>我们先定义一个包含 3 个元素的数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let ourArray = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</span><br></pre></td></tr></table></figure><p>在数组中，内部的每个元素都有一个与之对应的索引（index）。 索引既是该元素在数组中的位置，也是我们访问该元素的引用。 需要注意的是，JavaScript 数组的索引是从 0 开始的（这种从 0 开始的规则叫做 zero-indexed），即数组的第一个元素是在数组中的第 0 个位置，而不是第 1 个位置。 要从数组中获取一个元素，我们可以在数组字面量后面加一个用方括号括起来的索引。不过习惯上，我们会通过表示数组的变量名来访问，而不是直接通过字面量。 这种从数组中读取元素的方式叫做方括号表示法（bracket notation）。 如果我们要从数组 ourArray 中取出数据 a 并将其赋值给另一个变量，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let ourVariable = ourArray[0];</span><br></pre></td></tr></table></figure><p>现在，变量 ourVariable 的值也为 a。</p><p>通过索引，我们不仅可以获取某个元素值，还可以用类似的写法来设置一个索引位置的元素值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ourArray[1] = &quot;not b anymore&quot;;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们用方括号表示法把索引为 1 的元素从 b 改成了 not b anymore。 现在 ourArray 的值是 [“a”, “not b anymore”, “c”]。</p><p>使用方括号访问数组的元素</p><p>在本挑战中，请将 myArray 中的第二个元素（索引为 1）设置为除了 b 以外的任意值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let myArray = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;];</span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">myArray[1] =&quot;IloveYou&quot;;</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line">console.log(myArray);</span><br></pre></td></tr></table></figure><h1 id="使用-push-和-unshift-为数组添加元素"><a href="#使用-push-和-unshift-为数组添加元素" class="headerlink" title="使用 push() 和 unshift() 为数组添加元素"></a>使用 push() 和 unshift() 为数组添加元素</h1><p>数组的长度与数组能包含的数据类型一样，都是不固定的。 数组可以包含任意数量的元素，可以不限次数地往数组中添加元素或者从中移除元素。 总之，数组是可变的（mutable）。 在本挑战中，我们要学习两种修改数组的方法：Array.push() 和 Array.unshift()。</p><p>这两个方法都接收一个或多个元素作为参数，并会将参数中的元素添加到该数组中。 push() 方法会将元素插入到数组的末尾，而 unshift() 方法会将元素插入到数组的开头。 请看以下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let twentyThree = &#x27;XXIII&#x27;;</span><br><span class="line">let romanNumerals = [&#x27;XXI&#x27;, &#x27;XXII&#x27;];</span><br><span class="line"></span><br><span class="line">romanNumerals.unshift(&#x27;XIX&#x27;, &#x27;XX&#x27;);</span><br></pre></td></tr></table></figure><p>romanNumerals 的值就变成了 [‘XIX’, ‘XX’, ‘XXI’, ‘XXII’]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">romanNumerals.push(twentyThree);</span><br></pre></td></tr></table></figure><p>romanNumerals 的值现在就变成了 [‘XIX’, ‘XX’, ‘XXI’, ‘XXII’, ‘XXIII’]。 请注意这里，我们也可以使用变量作为参数，这让我们在动态修改数组数据时更加灵活。</p><p>使用 push() 和 unshift() 为数组添加元素</p><p>我们已经定义了一个 mixedNumbers 函数，它接收一个数组作为参数。 请修改这个函数，使用 push() 和 unshift() 来将 ‘I’, 2, ‘three’ 插入到数组开头；将 7, ‘VIII’, 9 插入到数组的末尾。最终这个函数的返回值就会是一个依次包含不同形式的 1-9 的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function mixedNumbers(arr) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">arr.unshift(&#x27;I&#x27;,2,&#x27;three&#x27;);</span><br><span class="line">arr.push(7, &#x27;VIII&#x27;, 9);</span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(mixedNumbers([&#x27;IV&#x27;, 5, &#x27;six&#x27;]));</span><br></pre></td></tr></table></figure><h1 id="使用-pop-和-shift-从数组中删除元素"><a href="#使用-pop-和-shift-从数组中删除元素" class="headerlink" title="使用 pop() 和 shift() 从数组中删除元素"></a>使用 pop() 和 shift() 从数组中删除元素</h1><p>push() 和 unshift() 都有一个与它们作用相反的函数：pop() 和 shift()。 与插入元素相反，pop() 会从数组的末尾移除一个元素，而 shift() 会从数组的开头移除一个元素。 pop() 和 shift() 与 push() 和 unshift() 的关键区别在于，用于删除元素的方法不接收参数，而且每次只能删除数组中的一个元素。</p><p>让我们来看以下的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let greetings = [&#x27;whats up?&#x27;, &#x27;hello&#x27;, &#x27;see ya!&#x27;];</span><br><span class="line"></span><br><span class="line">greetings.pop();</span><br></pre></td></tr></table></figure><p>greetings 值为 [‘whats up?’, ‘hello’]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greetings.shift();</span><br></pre></td></tr></table></figure><p>greetings 值为 [‘hello’]。</p><p>这些用于删除数组元素的方法会返回被删除的元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let popped = greetings.pop();</span><br></pre></td></tr></table></figure><p>greetings 值为 []，popped 值为 hello。</p><p>使用 pop() 和 shift() 从数组中删除元素</p><p>我们已经定义了一个 popShift 函数，它接收一个数组作为输入参数并返回一个新的数组。 请修改这个函数，使用 pop() 和 shift() 来移除输入的数组中的第一个元素和最后一个元素，并将这两个被移除的元素分别赋值给对应的变量，使得最终返回的数组里包含这两个值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function popShift(arr) &#123;</span><br><span class="line">  let popped=arr.pop();; // 修改这一行</span><br><span class="line">  let shifted=arr.shift();; // 修改这一行</span><br><span class="line">  return [shifted, popped];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(popShift([&#x27;challenge&#x27;, &#x27;is&#x27;, &#x27;not&#x27;, &#x27;complete&#x27;]));</span><br></pre></td></tr></table></figure><h1 id="使用-splice-删除元素"><a href="#使用-splice-删除元素" class="headerlink" title="使用 splice() 删除元素"></a>使用 splice() 删除元素</h1><p>在之前的挑战中，我们已经学习了如何用 shift() 和 pop() 从数组的开头或末尾移除元素。 但如果我们想删除数组中间的一个元素， 或者想一次删除多个元素，该如何操作呢？ 这时候我们就需要使用 splice() 方法了， splice() 可以让我们从数组中的任意位置连续删除任意数量的元素。</p><p>splice() 最多可以接受 3 个参数，但现在我们先关注前两个。 splice() 的前两个参数是整数，表示数组中调用 splice() 的项的索引或位置。 别忘了，数组的索引是从 0 开始的，所以我们要用 0 来表示数组中的第一个元素。 splice() 的第一个参数代表从数组中的哪个索引开始移除元素，而第二个参数表示要从数组中的这个位置开始删除多少个元素。 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let array = [&#x27;today&#x27;, &#x27;was&#x27;, &#x27;not&#x27;, &#x27;so&#x27;, &#x27;great&#x27;];</span><br><span class="line"></span><br><span class="line">array.splice(2, 2);</span><br></pre></td></tr></table></figure><p>这里我们移除 2 个元素，首先是第三个元素（索引为 2）。 array 会有值 [‘today’, ‘was’, ‘great’]。</p><p>splice() 不仅会修改调用该方法的数组，还会返回一个包含被移除元素的数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let array = [&#x27;I&#x27;, &#x27;am&#x27;, &#x27;feeling&#x27;, &#x27;really&#x27;, &#x27;happy&#x27;];</span><br><span class="line"></span><br><span class="line">let newArray = array.splice(3, 2);</span><br></pre></td></tr></table></figure><p>newArray 值为 [‘really’, ‘happy’]。</p><p>使用 splice() 删除元素</p><p>我们已经定义了数组 arr。 请使用 splice() 从 arr 里移除元素，使剩余的元素之和为 10。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const arr = [2, 4, 5, 1, 7, 5, 2, 1];</span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">arr.splice(1,4);</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><h1 id="使用-splice-添加元素"><a href="#使用-splice-添加元素" class="headerlink" title="使用 splice() 添加元素"></a>使用 splice() 添加元素</h1><p>还记得在上个挑战中我们提到 splice() 方法最多可以接收 3 个参数吗？ 第三个参数可以是一个或多个元素，这些元素会被添加到数组中。 这样，我们能够便捷地将数组中的一个或多个连续元素换成其他的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [10, 11, 12, 12, 15];</span><br><span class="line">const startIndex = 3;</span><br><span class="line">const amountToDelete = 1;</span><br><span class="line"></span><br><span class="line">numbers.splice(startIndex, amountToDelete, 13, 14);</span><br><span class="line">console.log(numbers);</span><br></pre></td></tr></table></figure><p>第二个 12 已被删除，我们在同一索引处添加 13 和 14。 numbers 数组现在将会是 [ 10, 11, 12, 13, 14, 15 ]。</p><p>在上面的代码中，数组一开始包含了若干数字。 接着，我们调用 splice() 方法，索引为 (3) 的地方开始删除元素，删除的元素数量是 (1)。然后，(13, 14) 是在删除位置插入的元素。 可以在 amountToDelete 后面传入任意数量的元素（以逗号分隔），每个都会被插入到数组中。</p><p>使用 splice() 添加元素</p><p>我们已经定义了一个 htmlColorNames 函数，它以一个 HTML 颜色的数组作为输入参数。 请修改这个函数，使用 splice() 来移除数组中的前两个元素，并在对应的位置上添加 ‘DarkSalmon’ 和 ‘BlanchedAlmond’。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function htmlColorNames(arr) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">arr.splice(0,2,&#x27;DarkSalmon&#x27;,&#x27;BlanchedAlmond&#x27;);</span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(htmlColorNames([&#x27;DarkGoldenRod&#x27;, &#x27;WhiteSmoke&#x27;, &#x27;LavenderBlush&#x27;, &#x27;PaleTurquoise&#x27;, &#x27;FireBrick&#x27;]));</span><br></pre></td></tr></table></figure><h1 id="使用-slice-复制数组元素"><a href="#使用-slice-复制数组元素" class="headerlink" title="使用 slice() 复制数组元素"></a>使用 slice() 复制数组元素</h1><p>接下来我们要介绍 slice() 方法。 slice() 不会修改数组，而是会复制，或者说<em>提取（extract）</em>给定数量的元素到一个新数组。 slice() 只接收 2 个输入参数：第一个是开始提取元素的位置（索引），第二个是提取元素的结束位置（索引）。 提取的元素中不包括第二个参数所对应的元素。 如下示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let weatherConditions = [&#x27;rain&#x27;, &#x27;snow&#x27;, &#x27;sleet&#x27;, &#x27;hail&#x27;, &#x27;clear&#x27;];</span><br><span class="line"></span><br><span class="line">let todaysWeather = weatherConditions.slice(1, 3);</span><br></pre></td></tr></table></figure><p>todaysWeather 值为 [‘snow’, ‘sleet’]，weatherConditions 值仍然为 [‘rain’, ‘snow’, ‘sleet’, ‘hail’, ‘clear’]。</p><p>在上面的代码中，我们从一个数组中提取了一些元素，并用这些元素创建了一个新数组。</p><p>使用 slice() 复制数组元素</p><p>我们已经定义了一个 forecast 函数，它接受一个数组作为参数。 请修改这个函数，利用 slice() 从输入的数组中提取信息，最终返回一个包含元素 warm 和 sunny 的新数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function forecast(arr) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">   let arr1=arr.slice(2,4);</span><br><span class="line">  return arr1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line">console.log(forecast([&#x27;cold&#x27;, &#x27;rainy&#x27;, &#x27;warm&#x27;, &#x27;sunny&#x27;, &#x27;cool&#x27;, &#x27;thunderstorms&#x27;]));</span><br></pre></td></tr></table></figure><h1 id="使用展开运算符复制数组"><a href="#使用展开运算符复制数组" class="headerlink" title="使用展开运算符复制数组"></a>使用展开运算符复制数组</h1><p>slice() 可以让我们从一个数组中选择一些元素来复制到新数组中，而 ES6 中又引入了一个简洁且可读性强的语法：展开运算符（spread operator），它能让我们方便地复制数组中的所有元素。 展开语法写出来是这样：…</p><p>我们可以用展开运算符来复制数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let thisArray = [true, true, , false, null];</span><br><span class="line">let thatArray = [...thisArray];</span><br></pre></td></tr></table></figure><p>thatArray 等于 [true, true, , false, null]。 thisArray 保持不变， thatArray 包含与 thisArray 相同的元素。</p><p>使用展开运算符复制数组</p><p>我们已经定义了一个 copyMachine 函数，它接受 arr（一个数组）和 num（一个数字）作为输入参数。 该函数需要返回一个由 num 个 arr 组成的新的二维数组。 同时，我们写好了大致的流程，只是细节实现还没有写完。 请修改这个函数，使用展开语法，使该函数能正常工作（提示：我们已经学到过的一个方法很适合用在这里）！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function copyMachine(arr, num) &#123;</span><br><span class="line">  let newArr = [];</span><br><span class="line">  while (num &gt;= 1) &#123;</span><br><span class="line">    // 只修改这一行下面的代码</span><br><span class="line">  newArr.push([...arr]);</span><br><span class="line">    // 只修改这一行上面的代码</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line">  return newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(copyMachine([true, false, true], 2));</span><br></pre></td></tr></table></figure><h1 id="使用展开运算符合并数组"><a href="#使用展开运算符合并数组" class="headerlink" title="使用展开运算符合并数组"></a>使用展开运算符合并数组</h1><p>展开语法（spread）的另一个重要用途是合并数组，或者将某个数组的所有元素插入到另一个数组的任意位置。 我们也可以使用 ES5 的语法连接两个数组，但只能让它们首尾相接。 而展开语法可以让这样的操作变得极其简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let thisArray = [&#x27;sage&#x27;, &#x27;rosemary&#x27;, &#x27;parsley&#x27;, &#x27;thyme&#x27;];</span><br><span class="line"></span><br><span class="line">let thatArray = [&#x27;basil&#x27;, &#x27;cilantro&#x27;, ...thisArray, &#x27;coriander&#x27;];</span><br><span class="line">thatArray 会有值 [&#x27;basil&#x27;, &#x27;cilantro&#x27;, &#x27;sage&#x27;, &#x27;rosemary&#x27;, &#x27;parsley&#x27;, &#x27;thyme&#x27;, &#x27;coriander&#x27;]</span><br></pre></td></tr></table></figure><p>使用展开语法，我们就可以很方便的实现一个用传统方法会写得很复杂且冗长的操作。</p><p>使用展开运算符合并数组</p><p>我们已经定义了一个返回 sentence 变量的 spreadOut 函数。 请修改这个函数，利用 spread 使该函数返回数组 [‘learning’, ‘to’, ‘code’, ‘is’, ‘fun’]。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function spreadOut() &#123;</span><br><span class="line">  let fragment = [&#x27;to&#x27;, &#x27;code&#x27;];</span><br><span class="line">  let sentence = [&#x27;learning&#x27;, ...fragment, &#x27;is&#x27;, &#x27;fun&#x27;]; // 修改这一行</span><br><span class="line">  return sentence;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(spreadOut());</span><br></pre></td></tr></table></figure><h1 id="使用-indexOf-检查元素是否存在"><a href="#使用-indexOf-检查元素是否存在" class="headerlink" title="使用 indexOf() 检查元素是否存在"></a>使用 indexOf() 检查元素是否存在</h1><p>由于数组随时都可以修改或发生 mutated，我们很难保证某个数据始终处于数组中的特定位置，甚至不能保证该元素是否还存在于该数组中。 好消息是，JavaScript 为我们提供了内置方法 indexOf()。 这个方法让我们可以方便地检查某个元素是否存在于数组中。 indexOf() 方法接受一个元素作为输入参数，并返回该元素在数组中的位置（索引）；若该元素不存在于数组中则返回 -1。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let fruits = [&#x27;apples&#x27;, &#x27;pears&#x27;, &#x27;oranges&#x27;, &#x27;peaches&#x27;, &#x27;pears&#x27;];</span><br><span class="line"></span><br><span class="line">fruits.indexOf(&#x27;dates&#x27;);</span><br><span class="line">fruits.indexOf(&#x27;oranges&#x27;);</span><br><span class="line">fruits.indexOf(&#x27;pears&#x27;);</span><br></pre></td></tr></table></figure><p>indexOf(‘dates’) 返回 -1，indexOf(‘oranges’) 返回 2，indexOf(‘pears’) 返回 1 (每个元素存在的第一个索引)。</p><p>使用 indexOf() 检查元素是否存在</p><p>indexOf() 在快速检查一个数组中是否存在某个元素时非常有用。 我们已经定义了一个 quickCheck 函数，它接受一个数组和一个元素作为输入参数。 请通过 indexOf() 方法修改这个函数，使得当传入的参数在数组中存在时返回 true，否则返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function quickCheck(arr, elem) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  if (arr.indexOf(elem)==-1)</span><br><span class="line">  return false;</span><br><span class="line">  else</span><br><span class="line">  return true;</span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(quickCheck([&#x27;squash&#x27;, &#x27;onions&#x27;, &#x27;shallots&#x27;], &#x27;mushrooms&#x27;));</span><br></pre></td></tr></table></figure><h1 id="使用-for-循环遍历数组中的全部元素"><a href="#使用-for-循环遍历数组中的全部元素" class="headerlink" title="使用 for 循环遍历数组中的全部元素"></a>使用 for 循环遍历数组中的全部元素</h1><p>使用数组时，我们经常需要遍历数组的所有元素来找出我们需要的一个或多个元素，抑或是对数组执行一些特定的操作。 JavaScript 为我们提供了几个内置的方法，它们以不同的方式遍历数组，以便我们可以用于不同的场景（如 every()、forEach()、map() 等等）。 然而，最简单的 for 循环不仅能实现上述这些方法的功能，而且相比之下也会更加灵活。</p><p>请看以下的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function greaterThanTen(arr) &#123;</span><br><span class="line">  let newArr = [];</span><br><span class="line">  for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if (arr[i] &gt; 10) &#123;</span><br><span class="line">      newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greaterThanTen([2, 12, 8, 14, 80, 0, 1]);</span><br></pre></td></tr></table></figure><p>在这个函数中，我们用一个 for 循环来遍历数组，逐一对其中的元素进行判断。 通过上面的代码，我们可以找出数组中大于 10 的所有元素，并返回一个包含这些元素的新数组 [12, 14, 80]。</p><p>使用 for 循环遍历数组中的全部元素</p><p>我们已经定义了 filteredArray 函数，它接受一个嵌套的数组 arr 和一个 elem 作为参数，并要返回一个新数组。 arr 数组中嵌套的数组里可能包含 elem 元素，也可能不包含。 请修改该函数，用一个 for 循环来做筛选，使函数返回一个由 arr 中不包含 elem 的数组所组成的新数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function filteredArray(arr, elem) &#123;</span><br><span class="line">  let newArr = [];</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">    if (arr[i].indexOf(elem)==-1) </span><br><span class="line">    &#123;</span><br><span class="line">      newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">  return newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));</span><br></pre></td></tr></table></figure><h1 id="创建复杂的多维数组"><a href="#创建复杂的多维数组" class="headerlink" title="创建复杂的多维数组"></a>创建复杂的多维数组</h1><p>很好！ 你现在已经学到很多关于数组的知识了， 但这些只是个开始。我们将在接下来的中挑战中学到更多与数组相关的知识。 但在继续查看 对象 之前，让我们再看一下，看看数组如何变得比我们在之前的挑战中看到的更复杂一些。</p><p>数组的一个强大的特性是，它可以包含其他数组，甚至完全由其他数组组成。 在上一个挑战中，我们已经接触到了包含数组的数组，但它还算是比较简单的。 数组中的数组还可以再包含其他数组，即可以嵌套任意多层数组。 通过这种方式，数组可以很快成为非常复杂的数据结构，称为多维（multi-dimensional）数组，或嵌套（nested）数组。 请看如下的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let nestedArray = [</span><br><span class="line">  [&#x27;deep&#x27;],</span><br><span class="line">  [</span><br><span class="line">    [&#x27;deeper&#x27;], [&#x27;deeper&#x27;] </span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    [</span><br><span class="line">      [&#x27;deepest&#x27;], [&#x27;deepest&#x27;]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [&#x27;deepest-est?&#x27;]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>deep 数组已嵌套 2 层。 deeper 数组嵌套了 3 层。 deepest 数组嵌套了 3 层， deepest-est? 嵌套了 5 层。</p><p>虽然这个例子看起来错综复杂，不过，尤其是在处理大量数据的时候，这种数据结构还是会用到的。 尽管结构复杂，不过我们仍可以通过方括号表示法来访问嵌套得最深的数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(nestedArray[2][1][0][0][0]);</span><br></pre></td></tr></table></figure><p>控制台打印的是字符串 deepest-est?。 既然我们知道数据的位置，当然，我们也可以修改它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nestedArray[2][1][0][0][0] = &#x27;deeper still&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(nestedArray[2][1][0][0][0]);</span><br></pre></td></tr></table></figure><p>现在控制台打印的是 deeper still。</p><p>创建复杂的多维数组</p><p>我们已经定义了一个叫做 myNestedArray 的数组变量。 请修改 myNestedArray，使用字符串（string）、数字（number）或布尔值（boolean）的任意组合作为数组的元素，并让 myNestedArray 刚好有 5 层（注意，最外层的数组是第 1 层）。 同时，请在第 3 层的数组中包含字符串 deep；在第 4 层的数组中包含字符串 deeper，在第 5 层的数组中包含字符串 deepest。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let myNestedArray = [</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  [&#x27;deep2&#x27;],</span><br><span class="line">  [</span><br><span class="line">    2,[&#x27;deep&#x27;]</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  [2,</span><br><span class="line">    [</span><br><span class="line">      3,[&#x27;deeper&#x27;]</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      [</span><br><span class="line">        [5,&#x27;deepest&#x27;]</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="将键值对添加到对象中"><a href="#将键值对添加到对象中" class="headerlink" title="将键值对添加到对象中"></a>将键值对添加到对象中</h1><p>对象（object）本质上是键值对（key-value pair）的集合。 或者说，一系列被映射到唯一标识符的数据就是对象；习惯上，唯一标识符叫做属性（property）或者键（key）；数据叫做值（value）。 让我们来看一个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const tekkenCharacter = &#123;</span><br><span class="line">  player: &#x27;Hwoarang&#x27;,</span><br><span class="line">  fightingStyle: &#x27;Tae Kwon Doe&#x27;,</span><br><span class="line">  human: true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个叫做 tekkenCharacter 的“铁拳”游戏人物对象。 它有三个属性，每个属性都对应一个特定的值。 如果我们想为它再添加一个叫做 origin 的属性，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tekkenCharacter.origin = &#x27;South Korea&#x27;;</span><br></pre></td></tr></table></figure><p>上面的代码中，我们使用了点号表示法。 如果我们现在输出 tekkenCharacter 对象，便可以看到它具有 origin 属性。 接下来，因为这个人物在游戏中有着与众不同的橘色头发， 我们可以通过方括号表示法来为它添加这个属性，像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tekkenCharacter[&#x27;hair color&#x27;] = &#x27;dyed orange&#x27;;</span><br></pre></td></tr></table></figure><p>如果要设置的属性中存在空格，或者要设置的属性是一个变量，那我们必须使用方括号表示法（bracket notation）来为对象添加属性。 在上面的代码中，我们把属性（hair color）放到引号里，以此来表示整个字符串都是需要设置的属性。 如果我们不加上引号，那么中括号里的内容会被当作一个变量来解析，这个变量对应的值就会作为要设置的属性， 请看这段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const eyes = &#x27;eye color&#x27;;</span><br><span class="line"></span><br><span class="line">tekkenCharacter[eyes] = &#x27;brown&#x27;;</span><br></pre></td></tr></table></figure><p>执行以上所有示例代码后，对象会变成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  player: &#x27;Hwoarang&#x27;,</span><br><span class="line">  fightingStyle: &#x27;Tae Kwon Doe&#x27;,</span><br><span class="line">  human: true,</span><br><span class="line">  origin: &#x27;South Korea&#x27;,</span><br><span class="line">  &#x27;hair color&#x27;: &#x27;dyed orange&#x27;,</span><br><span class="line">  &#x27;eye color&#x27;: &#x27;brown&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将键值对添加到对象中</p><p>我们已经为你创建了包含三个项目的 foods 对象。 请使用上述任意语法，来为 foods 对象添加如下三个键值对：bananas 属性，值为 13；grapes 属性，值为 35；strawberries 属性，值为 27。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const foods = &#123;</span><br><span class="line">  apples: 25,</span><br><span class="line">  oranges: 32,</span><br><span class="line">  plums: 28</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">foods.bananas=13;</span><br><span class="line">foods.grapes=35;</span><br><span class="line">foods.strawberries=27;</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">console.log(foods);</span><br></pre></td></tr></table></figure><h1 id="修改嵌套在对象中的对象"><a href="#修改嵌套在对象中的对象" class="headerlink" title="修改嵌套在对象中的对象"></a>修改嵌套在对象中的对象</h1><p>现在我们来看一个稍复杂的对象。 在对象中，我们也可以嵌套任意层数的对象，对象的属性值可以是 JavaScript 支持的任意类型，包括数组和其他对象。 请看以下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let nestedObject = &#123;</span><br><span class="line">  id: 28802695164,</span><br><span class="line">  date: &#x27;December 31, 2016&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    totalUsers: 99,</span><br><span class="line">    online: 80,</span><br><span class="line">    onlineStatus: &#123;</span><br><span class="line">      active: 67,</span><br><span class="line">      away: 13,</span><br><span class="line">      busy: 8</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>nestedObject 有 3 个属性：id（属性值为数字）、date（属性值为字符串）、data（属性值为嵌套的对象）。 虽然对象中的数据可能很复杂，我们仍能使用上一个挑战中讲到的写法来访问我们需要的信息。 如果我们想把嵌套在 onlineStatus 中 busy 的属性值改为 10，可以用点号表示法来这样实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nestedObject.data.onlineStatus.busy = 10;</span><br></pre></td></tr></table></figure><p>修改嵌套在对象中的对象<br>我们已经定义了一个 userActivity 对象，它包含了另一个对象。 请将 online 的属性值改为 45。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let userActivity = &#123;</span><br><span class="line">  id: 23894201352,</span><br><span class="line">  date: &#x27;January 1, 2017&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    totalUsers: 51,</span><br><span class="line">    online: 42</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">userActivity.data.online=45;</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">console.log(userActivity);</span><br></pre></td></tr></table></figure><h1 id="使用方括号访问属性名称"><a href="#使用方括号访问属性名称" class="headerlink" title="使用方括号访问属性名称"></a>使用方括号访问属性名称</h1><p>在关于对象的第一个挑战中，我们提到可以在一对方括号中用一个变量作为属性名来访问属性的值。 假设一个超市收银台程序中有一个 foods 对象, 并且有一个函数会设置 selectedFood；如果我们需要查询 foods 对象中，某种食物是否存在， 可以这样实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let selectedFood = getCurrentFood(scannedItem);</span><br><span class="line">let inventory = foods[selectedFood];</span><br></pre></td></tr></table></figure><p>上述代码会先读取 selectedFood 变量的值，并返回 foods 对象中以该值命名的属性所对应的属性值。 若没有以该值命名的属性，则会返回 。 有时候对象的属性名在运行之前是不确定的，或者我们需要动态地访问对象的属性值。在这些场景下，方括号表示法就变得十分有用。</p><p>使用方括号访问属性名称</p><p>我们已经定义了 checkInventory 函数，它接受一个被扫描到的商品名作为输入参数。 请让这个函数返回 foods 对象中，以 scannedItem 的值所命名的属性对应的属性值。 在本挑战中，只有合理有效的属性名会作为参数传入 checkInventory，因此你不需要处理参数无效的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let foods = &#123;</span><br><span class="line">  apples: 25,</span><br><span class="line">  oranges: 32,</span><br><span class="line">  plums: 28,</span><br><span class="line">  bananas: 13,</span><br><span class="line">  grapes: 35,</span><br><span class="line">  strawberries: 27</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function checkInventory(scannedItem) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">return foods[scannedItem];</span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(checkInventory(&quot;apples&quot;));</span><br></pre></td></tr></table></figure><h1 id="使用-delete-关键字删除对象属性"><a href="#使用-delete-关键字删除对象属性" class="headerlink" title="使用 delete 关键字删除对象属性"></a>使用 delete 关键字删除对象属性</h1><p>现在我们已经学习了什么是对象以及对象的基本特性和用途。 总之，对象是以键值对的形式，灵活、直观地存储结构化数据的一种方式，而且，通过对象的属性查找属性值是速度很快的操作。 在本章余下的挑战中，我们来了解一下对象的几种常用操作，这样你能更好地在代码中使用这个十分有用的数据结构：对象。</p><p>在之前的挑战中，我们已经试过添加和修改对象中的键值对。 现在我们来看看如何从一个对象中移除一个键值对。</p><p>我们再来回顾一下上一个挑战中的 foods 对象。 如果我们想移除 apples 属性，可以像这样使用 delete 关键字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete foods.apples;</span><br></pre></td></tr></table></figure><p>使用 delete 关键字删除对象属性</p><p>请使用 delete 关键字来移除 foods 中的 oranges、plums 和 strawberries 属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let foods = &#123;</span><br><span class="line">  apples: 25,</span><br><span class="line">  oranges: 32,</span><br><span class="line">  plums: 28,</span><br><span class="line">  bananas: 13,</span><br><span class="line">  grapes: 35,</span><br><span class="line">  strawberries: 27</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">delete foods.oranges;</span><br><span class="line">delete foods.plums;</span><br><span class="line">delete foods.strawberries;</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">console.log(foods);</span><br></pre></td></tr></table></figure><h1 id="检查对象是否具有某个属性"><a href="#检查对象是否具有某个属性" class="headerlink" title="检查对象是否具有某个属性"></a>检查对象是否具有某个属性</h1><p>我们已经学习了如何添加、修改和移除对象中的属性。 但如果我们想知道一个对象中是否包含某个属性呢？ JavaScript 为我们提供了两种不同的方式来实现这个功能： 一个是通过 hasOwnProperty() 方法，另一个是使用 in 关键字。 假如我们有一个 users 对象，为检查它是否含有 Alan 属性，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users.hasOwnProperty(&#x27;Alan&#x27;);</span><br><span class="line">&#x27;Alan&#x27; in users;</span><br></pre></td></tr></table></figure><p>这两者结果都应该为 true。</p><p>检查对象是否具有某个属性<br>请完善这个函数，如果传递给它的对象包含四个名字 Alan、Jeff、Sarah 和 Ryan，函数返回 true，否则返回 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">let users = &#123;</span><br><span class="line">  Alan: &#123;</span><br><span class="line">    age: 27,</span><br><span class="line">    online: true</span><br><span class="line">  &#125;,</span><br><span class="line">  Jeff: &#123;</span><br><span class="line">    age: 32,</span><br><span class="line">    online: true</span><br><span class="line">  &#125;,</span><br><span class="line">  Sarah: &#123;</span><br><span class="line">    age: 48,</span><br><span class="line">    online: true</span><br><span class="line">  &#125;,</span><br><span class="line">  Ryan: &#123;</span><br><span class="line">    age: 19,</span><br><span class="line">    online: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function isEveryoneHere(userObj) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">const requiredKeys = [&#x27;Alan&#x27;, &#x27;Jeff&#x27;, &#x27;Sarah&#x27;, &#x27;Ryan&#x27;];  </span><br><span class="line">  for (let key of requiredKeys) &#123;  </span><br><span class="line">    if (!userObj.hasOwnProperty(key)) &#123;  </span><br><span class="line">      return false; // 如果任何一个必需的键不存在，就返回 false  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  return true; // 所有必需的键都存在，返回 true  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(isEveryoneHere(users));</span><br></pre></td></tr></table></figure><h1 id="使用-for…in-语句遍历对象"><a href="#使用-for…in-语句遍历对象" class="headerlink" title="使用 for…in 语句遍历对象"></a>使用 for…in 语句遍历对象</h1><p>有时候你需要遍历一个对象中的所有键。 你可以使用 for…in 循环来做这件事。 for…in 循环是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const refrigerator = &#123;</span><br><span class="line">  &#x27;milk&#x27;: 1,</span><br><span class="line">  &#x27;eggs&#x27;: 12,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">for (const food in refrigerator) &#123;</span><br><span class="line">  console.log(food, refrigerator[food]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码记录 milk 1 和 eggs 12，每个键值对单独为一行。</p><p>我们在循环头中定义了变量 food ，这个变量被设置为每次迭代上对象的每个键值，将每个食物的名称打印到控制台。</p><p><strong>注意：</strong>对象中的键是无序的，这与数组不同。 因此，一个对象中某个属性的位置，或者说它出现的相对顺序，在引用或访问该属性时是不确定的。</p><p>使用 for…in 语句遍历对象</p><p>我们定义了一个函数 countOnline，它接收一个参数 allUsers。 在这个函数中使用 for…in 语句来遍历 allUsers 对象，并返回 online 属性为 true 的用户数量。 一个可以传递给 countOnline 的对象的例子显示如下。 每个用户都有 online 属性，其属性值为 true 或 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  Alan: &#123;</span><br><span class="line">    online: false</span><br><span class="line">  &#125;,</span><br><span class="line">  Jeff: &#123;</span><br><span class="line">    online: true</span><br><span class="line">  &#125;,</span><br><span class="line">  Sarah: &#123;</span><br><span class="line">    online: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const users = &#123;</span><br><span class="line">  Alan: &#123;</span><br><span class="line">    online: false</span><br><span class="line">  &#125;,</span><br><span class="line">  Jeff: &#123;</span><br><span class="line">    online: true</span><br><span class="line">  &#125;,</span><br><span class="line">  Sarah: &#123;</span><br><span class="line">    online: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function countOnline(allUsers) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  let onlineCount = 0; // 初始化在线用户计数器  </span><br><span class="line">  // 遍历 allUsers 对象  </span><br><span class="line">  for (const userName in allUsers) &#123;  </span><br><span class="line">    // 检查当前用户的在线状态  </span><br><span class="line">    if (allUsers[userName].online) &#123;  </span><br><span class="line">      onlineCount++; // 如果用户在线，则增加计数器  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  // 返回在线用户的数量  </span><br><span class="line">  return onlineCount;  </span><br><span class="line"></span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(countOnline(users));</span><br></pre></td></tr></table></figure><h1 id="使用-Object-keys-生成由对象的所有属性组成的数组"><a href="#使用-Object-keys-生成由对象的所有属性组成的数组" class="headerlink" title="使用 Object.keys() 生成由对象的所有属性组成的数组"></a>使用 Object.keys() 生成由对象的所有属性组成的数组</h1><p>我们可以给 Object.keys() 方法传入一个对象作为参数，来生成包含对象所有键的数组。 这个方法将对象作为参数并返回代表对象中每个属性的字符串数组。 需要注意的是，数组中元素的顺序是不确定的。</p><p>使用 Object.keys() 生成由对象的所有属性组成的数组</p><p>请完成 getArrayOfUsers 函数的实现，使其返回一个由输入对象中的所有属性所组成的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">let users = &#123;</span><br><span class="line">  Alan: &#123;</span><br><span class="line">    age: 27,</span><br><span class="line">    online: false</span><br><span class="line">  &#125;,</span><br><span class="line">  Jeff: &#123;</span><br><span class="line">    age: 32,</span><br><span class="line">    online: true</span><br><span class="line">  &#125;,</span><br><span class="line">  Sarah: &#123;</span><br><span class="line">    age: 48,</span><br><span class="line">    online: false</span><br><span class="line">  &#125;,</span><br><span class="line">  Ryan: &#123;</span><br><span class="line">    age: 19,</span><br><span class="line">    online: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function getArrayOfUsers(obj) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  let userNames = [];  </span><br><span class="line">  for (const userName in obj) &#123;  </span><br><span class="line">    if (obj.hasOwnProperty(userName)) &#123; // 确保属性是对象自身的属性，而不是继承的  </span><br><span class="line">      userNames.push(userName);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  return userNames; // 返回包含所有用户名称的数组  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getArrayOfUsers(users));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">  // 只修改这一行下面的代码  </span><br><span class="line">  let userObjects = [];  </span><br><span class="line">  for (const userName in obj) &#123;  </span><br><span class="line">    if (obj.hasOwnProperty(userName)) &#123; // 确保属性是对象自身的属性  </span><br><span class="line">      userObjects.push(obj[userName]); // 直接将用户对象添加到数组中  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  return userObjects; // 返回包含所有用户对象的数组  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h1 id="修改存储在对象中的数组"><a href="#修改存储在对象中的数组" class="headerlink" title="修改存储在对象中的数组"></a>修改存储在对象中的数组</h1><p>我们已经学习了 JavaScript 对象的这些基本操作： 添加、修改、移除键值对、检查某个属性是否存在、遍历对象的所有属性。 在继续学习 JavaScript 的过程中，我们会了解对象的更多用法。 另外，在之后的数据结构课程中，我们还会学习 ES6 的 Map 和 Set。 这两种数据结构与我们现在学到的对象十分类似，但它们在对象的基础上提供了一些额外的功能。 目前，我们已经学习了数组和对象的基础知识，让我们试着来用所学的知识解决一些更复杂的问题。</p><p>修改存储在对象中的数组</p><p>请看一下代码编辑器中我们为你写好的对象。 user 对象包含 3 个属性； data 对象包含 5 个属性，其中包含一个叫做 friends 的数组。 这就是对象作为数据结构所展现出的灵活性。 我们已经写好了 addFriend 函数的一部分， 请你完成这个函数，使其接受一个 user 对象，将 friend 参数中的名字添加到 user.data.friends 数组中并返回该数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">let user = &#123;</span><br><span class="line">  name: &#x27;Kenneth&#x27;,</span><br><span class="line">  age: 28,</span><br><span class="line">  data: &#123;</span><br><span class="line">    username: &#x27;kennethCodesAllDay&#x27;,</span><br><span class="line">    joinDate: &#x27;March 26, 2016&#x27;,</span><br><span class="line">    organization: &#x27;freeCodeCamp&#x27;,</span><br><span class="line">    friends: [</span><br><span class="line">      &#x27;Sam&#x27;,</span><br><span class="line">      &#x27;Kira&#x27;,</span><br><span class="line">      &#x27;Tomo&#x27;</span><br><span class="line">    ],</span><br><span class="line">    location: &#123;</span><br><span class="line">      city: &#x27;San Francisco&#x27;,</span><br><span class="line">      state: &#x27;CA&#x27;,</span><br><span class="line">      country: &#x27;USA&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function addFriend(userObj, friend) &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  userObj.data.friends.push(friend);  </span><br><span class="line">  return userObj.data.friends; // 返回更新后的 friends 数组  </span><br><span class="line">  // 只修改这一行上面的代码</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">console.log(addFriend(user, &#x27;Pete&#x27;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2024/07/16/React/"/>
      <url>/2024/07/16/React/</url>
      
        <content type="html"><![CDATA[<p>React 是一个流行的 JavaScript 库，用于为网页或应用程序构建可重用的组件驱动的用户界面。<br>React 将 HTML 与 JavaScript 结合在了一起，以此创建出一个新的标记语言 JSX。React 还使得管理整个应用程序的数据流变得更容易。 在这个课程中，你将学习如何创建不同的 React 组件，以 state props 管理数据，以及使用不同的生命周期方法（例如 componentDidMount）和更多内容。</p><h1 id="创建一个简单的-JSX-元素"><a href="#创建一个简单的-JSX-元素" class="headerlink" title="创建一个简单的 JSX 元素"></a>创建一个简单的 JSX 元素</h1><p>简介：React 是由 Facebook 创建和维护的开源视图库。 它是渲染现代 Web 应用程序用户界面（UI）的好工具。</p><p>React 使用名为 JSX 的 JavaScript 语法扩展，可以直接在 JavaScript 中编写 HTML。 这有几个好处。 可以在 HTML 中使用 JavaScript 的完整程序功能，并有助于保持代码的可读性。 在大多数情况下，JSX 类似于已经学过的 HTML，但是在这些挑战中将会涉及一些关键差异。</p><p>例如，因为 JSX 是 JavaScript 的语法扩展，所以实际上可以直接在 JSX 中编写 JavaScript。 要做到这一点，只需在花括号中包含希望被视为 JavaScript 的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &#x27;this is treated as JavaScript code&#x27; &#125;</span><br></pre></td></tr></table></figure><p>（这被视为 JavaScript 代码）。 请牢记这个写法，将会在接下来的挑战中使用。</p><p>但是，由于浏览器不能解析 JSX，因此必须将 JSX 代码编译为 JavaScript。 在这个过程中，转换器 Babel 是一个很受欢迎的工具。 后续挑战已经在后台引入了 Babel，可以直接写 JSX 代码。 如果代码不符合 JSX 语法，那么挑战中的第一个测试就不会通过。</p><p>值得注意的是，这些挑战在底层调用 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(JSX, document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure><p> 这个函数调用将 JSX 置于 React 自己的轻量级 DOM 中。 然后，React 使用自己的 DOM 快照来实现增量更新。</p><p>创建一个简单的 JSX 元素</p><p>当前代码使用 JSX 将 div 元素赋值给常量 JSX。 将 div 替换为 h1 元素，并在其中添加文本 Hello JSX!。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const JSX = &lt;h1&gt;Hello JSX!&lt;/h1&gt;;</span><br></pre></td></tr></table></figure><h1 id="创建一个复杂的JSX元素"><a href="#创建一个复杂的JSX元素" class="headerlink" title="创建一个复杂的JSX元素"></a>创建一个复杂的JSX元素</h1><p>上一个挑战是 JSX 的一个简单示例，但 JSX 也可以表示更复杂的 HTML。</p><p>关于嵌套的 JSX，需要知道的一件重要的事情，那就是它必须返回单个元素。</p><p>这个父元素将包裹所有其他级别的嵌套元素。</p><p>例如，几个作为兄弟元素编写的 JSX 元素而没有父元素包裹将不会被转换。</p><p>这里是一个示例：</p><p>有效的 JSX：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;p&gt;Paragraph One&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Paragraph Two&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Paragraph Three&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>无效的 JSX：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Paragraph One&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Paragraph Two&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Paragraph Three&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>创建一个复杂的 JSX 元素<br>定义一个新的常量 JSX，渲染一个 div，其中依次包含以下元素：</p><p>一个 h1，一个 p，一个包含三个 li 项的无序列表。 可以在每个元素中包含任意文本。</p><p>注意： 当像这样渲染多个元素时，可以把它们都用圆括号括起来，但是这并不是必须的。 另外，此挑战使用 div 标签把所有子元素包裹在里面。 如果删除 div，JSX 将不会编译这些元素。 请记住这一点，因为在 React 组件中返回 JSX 元素时也适用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const JSX=</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="在-JSX-中添加注释"><a href="#在-JSX-中添加注释" class="headerlink" title="在 JSX 中添加注释"></a>在 JSX 中添加注释</h1><p>JSX 是一种可以编译成 JavaScript 的语法。 有时，为了便于阅读，可能需要在代码中添加注释。 像大多数编程语言一样，JSX 也有自己的方法来实现这一点。</p><p>要将注释放在 JSX 中，可以使用 {&#x2F;* *&#x2F;} 语法来包裹注释文本。</p><p>在 JSX 中添加注释</p><p>代码编辑器中的 JSX 元素与在上一个挑战中创建的元素类似。 在提供的 div 元素里添加注释，不修改现有的 h1 或 p 元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const JSX = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;This is a block of JSX&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Here&#x27;s a subtitle&lt;/p&gt;</span><br><span class="line">    &#123;/* 哇*/&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="渲染-HTML-元素为-DOM-树"><a href="#渲染-HTML-元素为-DOM-树" class="headerlink" title="渲染 HTML 元素为 DOM 树"></a>渲染 HTML 元素为 DOM 树</h1><p>到目前为止，已经了解到 JSX 是一种在 JavaScript 中编写可读 HTML 的便捷工具。 在 React 中，可以使用它的的渲染 API（ReactDOM）将此 JSX 直接渲染到 HTML DOM。</p><p>ReactDOM 提供了一个简单的方法来将 React 元素呈现给 DOM，如下所示：ReactDOM.render(componentToRender, targetNode)，其中第一个参数是要渲染的 React 元素或组件，第二个参数是组件将要渲染到的 DOM 节点。</p><p>如你所料，必须在 JSX 元素声明之后调用 ReactDOM.render()，就像在使用变量之前必须声明它一样。</p><p>渲染 HTML 元素为 DOM 树</p><p>代码编辑器有一个简单的 JSX 组件。 使用 ReactDOM.render() 方法将该组件渲染到页面。 可以将定义好的 JSX 元素直接作为第一个参数传入，然后使用 document.getElementById() 来选择要渲染到的 DOM 节点， 在这个挑战中，请渲染到 id&#x3D;’challenge-node’的 div 中。 确保没有修改 JSX 常量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const JSX = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Lets render this to the DOM&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">// 在这行下面添加代码</span><br><span class="line">ReactDOM.render(JSX,document.getElementById(&#x27;challenge-node&#x27;))</span><br></pre></td></tr></table></figure><h1 id="在-JSX-中定义一个-HTML-Class"><a href="#在-JSX-中定义一个-HTML-Class" class="headerlink" title="在 JSX 中定义一个 HTML Class"></a>在 JSX 中定义一个 HTML Class</h1><p>现在已经习惯了编写 JSX，可能想知道它与 HTML 有什么不同。</p><p>到目前为止，HTML 和 JSX 似乎完全相同。</p><p>JSX 的一个关键区别是你不能再使用 class 这个单词来做为 HTML 的 class 名。 这是因为 class 是 JavaScript 中的关键字。 而 JSX 使用 className 来代替。</p><p>事实上，JSX 中所有 HTML 属性和事件引用的命名约定都变成了驼峰式。 例如，JSX 中的单击事件是 onClick，而不是 onclick。 同样，onchange 变成了onChange。 虽然这是一个微小的差异，但请你一定要记住。</p><p>在 JSX 中定义一个 HTML Class</p><p>将 class myDiv 应用于 JSX 提供的 div上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const JSX = (</span><br><span class="line">  &lt;div className = &quot;myDiv&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Add a class to this div&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="了解自闭合-JSX-标签"><a href="#了解自闭合-JSX-标签" class="headerlink" title="了解自闭合 JSX 标签"></a>了解自闭合 JSX 标签</h1><p>到目前为止，已经看到 JSX 与 HTML 的关键不同在于使用 className 还是 class 来定义 HTML 的 class。</p><p>JSX 不同于 HTML 的另一个重要方面是自闭合标签。</p><p>在HTML中，几乎所有的标签都有一个开始和结束标签：<div></div>，结束标签在你要关闭的标签名之前始终具有正斜杠。 但是，HTML 中有一些被称为“自闭合标签”的特殊实例，它们在另一个标签开始之前，不需要开始和结束标签都存在。</p><p>例如，换行标签可以写成 <br> 或者 <br>，但是不应该写成 <br><br>，因为它不包含任何内容。</p><p>在 JSX 中，规则略有不同。 任何 JSX 元素都可以使用自闭合标签编写，并且每个元素都必须关闭。 例如，为了通过编译换行标签必须始终编写为 <br>。 另一方面 <div> 可以写成 <div> 或者 <div></div>。 不同之处在于，在第一个语法版本中，无法在 <div> 中包含任何内容。 在后面的挑战中你会发现，这种语法在渲染 React 组件时非常有用。</div></div></div></p><p>了解自闭合 JSX 标签</p><p>修复代码编辑器中的错误，使其成为有效的 JSX 并成功编译。 确保不更改任何内容 – 只需要在需要的地方关闭标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const JSX = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Welcome to React!&lt;/h2&gt; &lt;br/ &gt;</span><br><span class="line">    &lt;p&gt;Be sure to close all tags!&lt;/p&gt;</span><br><span class="line">    &lt;hr/ &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="创建一个无状态的函数组件"><a href="#创建一个无状态的函数组件" class="headerlink" title="创建一个无状态的函数组件"></a>创建一个无状态的函数组件</h1><p>组件是 React 的核心。 React 中的所有内容都是一个组件，在这里将学习如何创建一个组件。</p><p>有两种方法可以创建 React 组件。 第一种方法是使用 JavaScript 函数。 以这种方式定义组件会创建无状态函数组件。 将在以后的挑战中介绍应用程序中状态的概念。 目前为止，可以将无状态组件视为能接收数据并对其进行渲染，但不管理或跟踪该数据的更改的组件。 (我们将下一个挑战使用中第二种方式创建 React 组件。)</p><p>要用函数创建组件，只需编写一个返回 JSX 或 null 的 JavaScript 函数。 需要注意的一点是，React 要求你的函数名以大写字母开头。 下面是一个无状态功能组件的示例，该组件在 JSX 中分配一个 HTML 的 class：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const DemoComponent = function() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&#x27;customClass&#x27; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>翻译完成后， <div> 将有一个 customClass 的 CSS class。</div></p><p>因为 JSX 组件代表 HTML，所以你可以将几个组件放在一起以创建更复杂的 HTML 页面。 这是 React 提供的组件架构的关键优势之一。 它允许用许多独立的组件组合成 UI。 这使得构建和维护复杂的用户界面变得更加容易。</p><p>创建一个无状态的函数组件</p><p>代码编辑器中有一个名为 MyComponent 的函数。 完成此函数，使其返回包含一些文本字符串的单个 div 元素。</p><p>注意： 文本被视为是 div 的子元素，因此不能使用自闭合标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const MyComponent = function() &#123;</span><br><span class="line">  // 修改这行下面的代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 返回包含文本的 div 元素  </span><br><span class="line">  return (  </span><br><span class="line">    &lt;div&gt;  </span><br><span class="line">      &#123;/* 这里放置你的文本字符串 */&#125;  </span><br><span class="line">      Hello, this is a div element inside MyComponent!  </span><br><span class="line">    &lt;/div&gt;  </span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  // 修改这行上面的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建一个-React-组件"><a href="#创建一个-React-组件" class="headerlink" title="创建一个 React 组件"></a>创建一个 React 组件</h1><p>定义 React 组件的另一种方法是使用 ES6 的 class语法。 在以下示例中，Kitten 扩展了React.Component：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Kitten extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;h1&gt;Hi&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将创建一个 ES6 类 Kitten，它扩展了 React.Component 类。 因此，Kitten 类现在可以访问许多有用的 React 功能，例如本地状态和生命周期钩子。 如果还不熟悉这些术语，请不要担心，在以后的挑战中我们将更详细地介绍它们。 另请注意，Kitten 类中定义了一个调用 super() 方法的 constructor。 它使用 super() 调用父类的构造函数，即本例中的 React.Component。 构造函数是使用 class 关键字创建的特殊方法，它在实例初始化之前调用。 最佳做法是在组件的 constructor 里调用 super，并将 props 传递给它们， 这样可以保证组件能够正确地初始化。 目前为止 ，需要知道这些代码是必要的。 很快会了解到到构造函数的其他用途以及 props。</p><p>创建一个 React 组件</p><p>MyComponent 是使用类语法在代码编辑器中定义的。 完成 render 方法的编写，使其返回 div 元素，其中包含文本内容为 Hello React! 的 h1 元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">       return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello React!&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="用组合的方式创建一个-React-组件"><a href="#用组合的方式创建一个-React-组件" class="headerlink" title="用组合的方式创建一个 React 组件"></a>用组合的方式创建一个 React 组件</h1><p>现在来看看如何组合多个 React 组件。 想象一下，现在正在构建一个应用程序，并创建了三个组件：Navbar、Dashboard 和 Footer。</p><p>要将这些组件组合在一起，可以创建一个 App 父组件，将这三个组件分别渲染成为子组件。 要在 React 组件中渲染一个子组件，需要在 JSX 中将组件名称写作自定义的 HTML 标签。 例如，在 render 方法中，可以这样编写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line"> &lt;App&gt;</span><br><span class="line">  &lt;Navbar /&gt;</span><br><span class="line">  &lt;Dashboard /&gt;</span><br><span class="line">  &lt;Footer /&gt;</span><br><span class="line"> &lt;/App&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>当 React 遇到一个自定义 HTML 标签引用另一个组件的时（如本例所示，组件名称包含在 &lt; &#x2F;&gt; 中），它在自定义标签的位置渲染该组件的标签。 这可以说明 App 组件和 Navbar、Dashboard 以及 Footer 之间的父子关系。</p><p>用组合的方式创建一个 React 组件</p><p>在代码编辑器中，有一个名为 ChildComponent 的简单函数组件和一个名为 ParentComponent 的 React 组件。 通过在 ParentComponent 中渲染 ChildComponent 来将两者组合在一起。 确保使用正斜杠关闭 ChildComponent 标签。</p><p>Note: ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const ChildComponent = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;I am the child&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ParentComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;I am the parent&lt;/h1&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">         &lt;ChildComponent/&gt;</span><br><span class="line"></span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-React-渲染嵌套组件"><a href="#使用-React-渲染嵌套组件" class="headerlink" title="使用 React 渲染嵌套组件"></a>使用 React 渲染嵌套组件</h1><p>上一个挑战显示了组合两个组件的简单方法，但是有许多不同的方法可以把 React 组件组合在一起。</p><p>组件组合是 React 的强大功能之一。 当使用 React 时，应当先用组件的思路考虑清楚用户界面的结构（如上一个挑战中的 App 示例）。 可以将 UI 分解为基本的构建块，这些构建块就是组件。 这样做有助于将负责 UI 的代码与负责处理应用程序逻辑的代码分开， 并可以大大简化复杂项目的开发和维护。</p><p>使用 React 渲染嵌套组件<br>代码编辑器中定义了两个功能组件，分别是 TypesOfFruit 和 Fruits。 请用组合或者嵌套把 TypesOfFruit 组件放到 Fruits 组件中， 然后把 Fruits 组件放到 TypesOfFood 组件中。 结果应该是子组件嵌套在父组件中，父组件嵌套在它本身的父组件中！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">const TypesOfFruit = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h2&gt;Fruits:&lt;/h2&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;Apples&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Blueberries&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Strawberries&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Bananas&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const Fruits = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">      &lt;TypesOfFruit /&gt; &#123;/* 在这里嵌套 TypesOfFruit 组件 */&#125; </span><br><span class="line">      &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class TypesOfFood extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Types of Food:&lt;/h1&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">        &lt;Fruits /&gt; &#123;/* 在这里嵌套 Fruits 组件 */&#125;  </span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="组合-React-组件"><a href="#组合-React-组件" class="headerlink" title="组合 React 组件"></a>组合 React 组件</h1><p>随着挑战继续，将组合使用更复杂的 React 组件和 JSX，有一点需要注意。 在其它组件中渲染 ES6 风格的类组件和渲染在过去几个挑战中使用的简单组件没有什么不同。 可以在其它组件中渲染 JSX 元素、无状态函数组件和 ES6 类组件。</p><p>组合 React 组件</p><p>在代码编辑器中，TypesOfFood 组件已经渲染了一个名为 Vegetables 的组件。 此外，还有上次挑战中的 Fruits 组件。</p><p>在 Fruits 中嵌套两个组件，首先 NonCitrus，然后是 Citrus， 这两个组件都已经引入。 接下来，将 Fruits 类组件嵌套到 TypesOfFood 组件中，位于 h1 标题元素下方和 Vegetables 上方。 结果应该是一系列嵌套的组件，它们使用两种不同的组件类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Fruits extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Fruits:&lt;/h2&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">        &lt;NonCitrus/&gt;</span><br><span class="line">        &lt;Citrus/&gt;</span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class TypesOfFood extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">     super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Types of Food:&lt;/h1&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">        &lt;Fruits/&gt;</span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">        &lt;Vegetables /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="将-class-组件渲染到-DOM-树"><a href="#将-class-组件渲染到-DOM-树" class="headerlink" title="将 class 组件渲染到 DOM 树"></a>将 class 组件渲染到 DOM 树</h1><p>还记不记得在之前的挑战中使用 ReactDOM API 将 JSX 元素渲染到 DOM， 这与渲染 React 组件的过程十分相似。 过去的几个挑战主要针对组件和组合，因此渲染是在幕后完成的。 但是，如果不调用 ReactDOM API，编写的任何 React 代码都不会渲染到 DOM。</p><p>复习一下语法： ReactDOM.render(componentToRender, targetNode)。 第一个参数是要渲染的 React 组件。 第二个参数是要在其中渲染该组件的 DOM 节点。</p><p>传递到ReactDOM.render() 的React 组件与 JSX 元素略有不同。 对于 JSX 元素，传入的是要渲染的元素的名称。 但是，对于 React 组件，需要使用与渲染嵌套组件相同的语法，例如ReactDOM.render(<ComponentToRender>, targetNode)。 此语法用于 ES6 class 组件和函数组件都可以。</ComponentToRender></p><p>将 class 组件渲染到 DOM 树</p><p>在后台引入了 Fruits 和 Vegetables 组件。 将两个组件渲染为 TypesOfFood 组件的子组件，然后将 TypesOfFood 渲染到 DOM 节点， 在这个挑战中，请渲染到 id&#x3D;’challenge-node’的 div 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class TypesOfFood extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Types of Food:&lt;/h1&gt;</span><br><span class="line">        &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">         &lt;Fruits/&gt;</span><br><span class="line">         &lt;Vegetables/&gt;</span><br><span class="line">        &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 修改这行下面的代码</span><br><span class="line">ReactDOM.render(&lt;TypesOfFood/&gt;,document.getElementById(&#x27;challenge-node&#x27;))</span><br></pre></td></tr></table></figure><h1 id="从零开始写一个-React-组件"><a href="#从零开始写一个-React-组件" class="headerlink" title="从零开始写一个 React 组件"></a>从零开始写一个 React 组件</h1><p>你已经了解了 JSX 和 React 组件的基础知识，是时候自己编写一个组件了。 React 组件是 React 应用程序的核心组成部分，因此熟练编写它们是非常重要的。 记住，典型的 React 组件是 ES6 class，它扩展了 React.Component。 它有一个返回 HTML（从 JSX 返回）或 null 的渲染方法， 这是 React 组件的基本形式。 理解了这一点之后，就可以开始构建更复杂的 React 项目了。</p><p>从零开始写一个 React 组件</p><p>定义一个 MyComponent 类，它是 React.Component 的扩展。 它的渲染方法应该返回一个 div，其中包含一个 h1 标签，标签文本为：My First React Component!。 准确使用此文本，大小写和标点符号也要考虑。 确保也调用组件的构造器。</p><p>使用 ReactDOM.render() 把该组件渲染到 DOM 中。 有一个 id&#x3D;’challenge-node’ 的 div 可供渲染。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;  </span><br><span class="line">  constructor(props) &#123;  </span><br><span class="line">    super(props);  </span><br><span class="line">    // 构造函数中可以进行一些初始化操作，但在这个例子中我们不需要  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  render() &#123;  </span><br><span class="line">    return (  </span><br><span class="line">      &lt;div&gt;  </span><br><span class="line">        &lt;h1&gt;My First React Component!&lt;/h1&gt;  </span><br><span class="line">      &lt;/div&gt;  </span><br><span class="line">    );  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">ReactDOM.render(&lt;MyComponent/&gt;, document.getElementById(&#x27;challenge-node&#x27;))</span><br></pre></td></tr></table></figure><h1 id="将-Props-传递给无状态函数组件"><a href="#将-Props-传递给无状态函数组件" class="headerlink" title="将 Props 传递给无状态函数组件"></a>将 Props 传递给无状态函数组件</h1><p>之前的挑战涵盖了关于在 React 中创建和组合 JSX 元素、函数组件和 ES6 风格的类组件的很多内容。 有了这个基础，现在是时候看看 React 中的另一个常见特性 props 了。 在 React 中，可以将属性传递给子组件。 假设有一个 App 组件，该组件渲染了一个名为 Welcome 的子组件，它是一个无状态函数组件。 可以通过以下方式给 Welcome 传递一个 user 属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;App&gt;</span><br><span class="line">  &lt;Welcome user=&#x27;Mark&#x27; /&gt;</span><br><span class="line">&lt;/App&gt;</span><br></pre></td></tr></table></figure><p>可以把创建的 React 支持的自定义 HTML 属性传递给组件。 在上面的例子里，将创建的属性 user 传递给组件 Welcome。 由于 Welcome 是一个无状态函数组件，它可以像这样访问该值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Welcome = (props) =&gt; &lt;h1&gt;Hello, &#123;props.user&#125;!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>调用 props 这个值是常见做法，当处理无状态函数组件时，基本上可以将其视为返回 JSX 的函数的参数。 这样，你就可以在函数体中访问该值。 但对于类组件，访问方式会略有不同。</p><p>将 Props 传递给无状态函数组件</p><p>代码编辑器中有 Calendar 和 CurrentDate 组件。 从 Calendar 组件渲染 CurrentDate 时，从 JavaScript 的 Date 对象分配当前日期，并将其作为 date 属性传入。 然后访问 CurrentDate 组件的 prop，并在 p 标签中显示其值。 请注意，要将 prop 的值视为 JavaScript，必须将它们括在花括号中，例如date&#x3D;{Date()}。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const CurrentDate = (props) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">      &lt;p&gt;The current date is:&#123;props.date&#125;&lt;/p&gt;</span><br><span class="line">      &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Calendar extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;What date is it?&lt;/h3&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">       </span><br><span class="line">        &lt;CurrentDate date=&#123;Date()&#125; /&gt; </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="传递一个数组作为-Props"><a href="#传递一个数组作为-Props" class="headerlink" title="传递一个数组作为 Props"></a>传递一个数组作为 Props</h1><p>上一个挑战演示了如何将来自父组件的信息作为 props 传递给子组件。 这个挑战着眼于如何将数组作为 props 传递。 要将数组传递给 JSX 元素，必须将其视为 JavaScript 并用花括号括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ParentComponent&gt;</span><br><span class="line">  &lt;ChildComponent colors=&#123;[&quot;green&quot;, &quot;blue&quot;, &quot;red&quot;]&#125; /&gt;</span><br><span class="line">&lt;/ParentComponent&gt;</span><br></pre></td></tr></table></figure><p>这样，子组件就可以访问数组属性 colors。 访问属性时可以使用 join() 等数组方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ChildComponent = (props) =&gt; &lt;p&gt;&#123;props.colors.join(&#x27;, &#x27;)&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>This will join all colors array items into a comma separated string and produce: </p><p>green, blue, red</p>. Later, we will learn about other common methods to render arrays of data in React.<p></p><p>传递一个数组作为 Props</p><p>There are List and ToDo components in the code editor. When rendering each List from the ToDo component, pass in a tasks property assigned to an array of to-do tasks, for example [“walk dog”, “workout”]. Then access this tasks array in the List component, showing its value within the p element. Use join(“, “) to display the props.tasks array in the p element as a comma-separated list. Today’s list should have at least 2 tasks and tomorrow’s should have at least 3 tasks.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const List = (props) =&gt; &#123;</span><br><span class="line">  &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">  const tasksList = props.tasks.join(&quot;, &quot;);  </span><br><span class="line">  return &lt;p&gt;&#123;tasksList&#125;&lt;/p&gt;;  </span><br><span class="line">  &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ToDo extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;To Do Lists&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;Today&lt;/h2&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">        &#123;/* 传递包含至少两个任务的数组作为props */&#125;  </span><br><span class="line">        &lt;List tasks=&#123;[&quot;walk dog&quot;, &quot;workout&quot;]&#125;/&gt;  </span><br><span class="line">        &lt;h2&gt;Tomorrow&lt;/h2&gt;  </span><br><span class="line">        &#123;/* 传递包含至少三个任务的数组作为props */&#125;  </span><br><span class="line">        &lt;List tasks=&#123;[&quot;buy groceries&quot;, &quot;clean room&quot;, &quot;pay bills&quot;]&#125;/&gt;  </span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用默认的-Props"><a href="#使用默认的-Props" class="headerlink" title="使用默认的 Props"></a>使用默认的 Props</h1><p>React 还有一个设置默认 props 的选项。 可以将默认 props 作为组件本身的属性分配给组件，React 会在必要时分配默认 prop。 如果没有显式的提供任何值，这允许指定 prop 值应该是什么。 例如，如果声明 MyComponent.defaultProps &#x3D; { location: ‘San Francisco’ }，即定义一个 location 属性，并且其值在没有另行制定的情况下被设置为字符串 San Francisco。 如果 props 未定义，则 React 会分配默认 props，但如果你将 null 作为 prop 的值，它将保持 null。</p><p>使用默认的 Props</p><p>代码编辑器中有一个 ShoppingCart 组件。 在这个组件上定义默认 props，它指定一个 items prop，其值为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const ShoppingCart = (props) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Shopping Cart Component&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line">// 修改这行下面的代码</span><br><span class="line">ShoppingCart.defaultProps = &#123;</span><br><span class="line">  items: 0</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="覆盖默认的-Props"><a href="#覆盖默认的-Props" class="headerlink" title="覆盖默认的 Props"></a>覆盖默认的 Props</h1><p>在 React 中，设置默认的 props 是一个很有用的特性， 显式设置组件的 prop 值即可覆盖默认 props。</p><p>覆盖默认的 Props</p><p>ShoppingCart 组件现在渲染了一个子组件 Items。 该 Items 组件有一个默认 quantity prop，其值被设置为整数 0。 通过传入数值 10 来覆盖 quantity 的默认 prop。</p><p>注意： 请记住，向组件添加 prop 的语法与添加 HTML 属性类似。 但是，由于 quantity 的值是整数，所以它不会加引号，但应该用花括号括起来， 例如{100}。 这个语法告诉 JSX 直接将花括号中的值解释为 JavaScript。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const Items = (props) =&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;Current Quantity of Items in Cart: &#123;props.quantity&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Items.defaultProps = &#123;</span><br><span class="line">  quantity: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ShoppingCart extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">     Items .defaultProps = &#123;</span><br><span class="line">  quantity: 10&#125;</span><br><span class="line">    return &lt;Items /&gt;</span><br><span class="line">    &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-PropTypes-来定义-Props-的类型"><a href="#使用-PropTypes-来定义-Props-的类型" class="headerlink" title="使用 PropTypes 来定义 Props 的类型"></a>使用 PropTypes 来定义 Props 的类型</h1><p>React 提供了有用的类型检查特性，以验证组件是否接收了正确类型的 props。 例如，应用程序调用 API 来检索数据是否是数组，然后将数据作为 prop 传递给组件。 可以在组件上设置 propTypes，以要求数据的类型为 array。 当数据是任何其它类型时，都会抛出警告。</p><p>当提前知道 prop 的类型时，最佳实践是设置其 propTypes。 可以为组件定义 propTypes 属性，方法与定义 defaultProps 相同。 这样做将检查一个键的 prop 是否是给定类型。 这里有一个示例，表示名为 handleClick 的 prop 应为 function 类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyComponent.propTypes = &#123; handleClick: PropTypes.func.isRequired &#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，PropTypes.func 部分检查 handleClick 是否为函数。 添加 isRequired，告诉 React handleClick 是该组件的必需属性。 如果没有那个属性，将出现警告。 还要注意 func 代表 function 。 在 7 种 JavaScript 原始类型中，function 和 boolean（写为 bool ）是唯一使用异常拼写的两种类型。 除了原始类型，还有其他类型可用。 例如，你可以检查 prop 是否为 React 元素。 请查看文档以获取所有选项。</p><p><strong>注意：</strong>在 React v15.5.0 中, PropTypes 可以从 React 中单独引入，例如：import PropTypes from ‘prop-types’;。</p><p>使用 PropTypes 来定义 Props 的类型</p><p>为 Items 组件定义 propTypes，以要求 quantity 作为 prop，并验证它是否为 number 类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const Items = (props) =&gt; &#123;</span><br><span class="line">  return &lt;h1&gt;Current Quantity of Items in Cart: &#123;props.quantity&#125;&lt;/h1&gt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 修改这行下面的代码</span><br><span class="line"></span><br><span class="line">Items.propTypes = &#123;  </span><br><span class="line">  quantity: PropTypes.number.isRequired </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">// 修改这行上面的代码</span><br><span class="line"></span><br><span class="line">Items.defaultProps = &#123;</span><br><span class="line">  quantity: 0</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ShoppingCart extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;Items /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-this-props-访问-Props"><a href="#使用-this-props-访问-Props" class="headerlink" title="使用 this.props 访问 Props"></a>使用 this.props 访问 Props</h1><p>前几项挑战涵盖了将 props 传递给子组件的基本方法。 但是，倘若接收 prop 的子组件不是无状态函数组件，而是一个 ES6 类组件，又当如何呢？ ES6 类组件访问 props 的方法略有不同。</p><p>任何时候，如果要引用类组件本身，可以使用 this 关键字。 要访问类组件中的 props，需要在在访问它的代码前面添加 this。 例如，如果 ES6 类组件有一个名为 data 的 prop，可以在 JSX 中这样写：{this.props.data}。</p><p>使用 this.props 访问 Props</p><p>在父组件 App 中渲染 Welcome 组件的一个实例。 在这里，给 Welcome 一个 name 的 prop，并给它赋值一个字符串。 在 Welcome 的子节点里，访问 strong 标签内的 name prop。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">           &lt;Welcome name=&quot;World&quot; /&gt;  </span><br><span class="line">            &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">          &lt;p&gt;Hello, &lt;strong&gt;&#123;this.props.name&#125;&lt;/strong&gt;!&lt;/p&gt; </span><br><span class="line">          &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="复习使用无状态函数组件的-Props"><a href="#复习使用无状态函数组件的-Props" class="headerlink" title="复习使用无状态函数组件的 Props"></a>复习使用无状态函数组件的 Props</h1><p>除了上一个挑战，一直在将 props 传递给无状态的函数组件。 这些组件就像纯函数， 它们接收 props 作为输入，并在每次传递相同 props 时返回相同的视图。 你可能好奇什么是状态，下一个挑战将会更详细地讲述它。 在此之前，我们先来回顾一下组件的术语。</p><p>无状态函数组件是一个函数，它接收 props 作为输入并返回 JSX。 另一方面，无状态组件是一个类，它扩展了React.Component，但是不使用内部状态（下一个挑战中讨论）。 最后，状态组件是指维护其自身内部状态的组件， 它简称组件或 React 组件。</p><p>一种常见的应用模式是尽可能减少状态组件并创建无状态的函数组件。 这有助于将状态管理包含到应用程序的特定区域。 反过来，通过更容易地跟踪状态变化如何影响其行为，可以改善应用程序的开发和维护。</p><p>复习使用无状态函数组件的 Props</p><p>在代码编辑器中有一个 CampSite 组件，它把 Camper 组件渲染为自己的子组件。 定义 Camper 组件，并为其分配默认 props { name: ‘CamperBot’ }。 可以在 Camper 组件内部渲染任何你想要的代码，但是要确保有一个 p 元素，它只包含作为 prop 传递的 name 值。 最后，在 Camper 组件上定义 propTypes，要求提供 name 作为 prop，并验证它是 string 类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class CampSite extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Camper/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// 修改这行下面的代码</span><br><span class="line"></span><br><span class="line">const Camper = (prop) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">  &lt;p&gt;&#123;prop.name&#125;&lt;/p&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Camper.propTypes = &#123;  </span><br><span class="line">    name: PropTypes.string.isRequired </span><br><span class="line">  &#125;; </span><br><span class="line">  Camper.defaultProps = &#123; name: &quot;CamperBot&quot; &#125;; </span><br></pre></td></tr></table></figure><h1 id="创建一个有状态的组件"><a href="#创建一个有状态的组件" class="headerlink" title="创建一个有状态的组件"></a>创建一个有状态的组件</h1><p>React 中最重要的主题之一是 state。 state 包含应用程序需要了解的任何数据，这些数据可能会随时间而变化。 应用程序能够响应 state 的变更，并在必要时显示更新后的 UI。 React 为现代 Web 应用程序的状态管理提供了一个很好的解决方案。</p><p>可以在类组件的 constructor 上声明 state 属性来在 React 组件中创建 state， 它在创建时使用 state 初始化组件。 state 属性必须设置为 JavaScript object（对象）。 声明如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在组件的整个生命周期内访问 state 对象， 可以更新它、在 UI 中渲染它，也可以将其作为 props 传递给子组件。 state 对象的使用可以很简单，亦可以很复杂，就看你怎么用了。 请注意，必须通过扩展 React.Component 来创建类组件，以便像这样创建 state。</p><p>创建一个有状态的组件</p><p>在代码编辑器里，有一个组件尝试渲染 state 中的 firstName 属性。 但是 state 还没有定义。 在 constructor 中使用 state 初始化这个组件，并将你的名字赋值给 firstName 属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class StatefulComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    // 只修改这一行下面的代码</span><br><span class="line">     this.state = &#123;  </span><br><span class="line">      firstName: &#x27;John Doe&#x27; // 将你的名字赋值给 firstName  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    // 只修改这一行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.state.firstName&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="在用户界面中渲染状态"><a href="#在用户界面中渲染状态" class="headerlink" title="在用户界面中渲染状态"></a>在用户界面中渲染状态</h1><p>定义了组件的初始 state 之后，就可以在要渲染的 UI 中显示它。 如果组件是有状态的，它将始终可以访问 render() 方法中 state 的数据。 就可以使用 this.state 访问数据。</p><p>如果想在 render 方法的 return 中访问 state 值，必须把这个值用花括号括起来。</p><p>state 是 React 组件中最强大的特性之一， 它可以跟踪应用程序中的重要数据，并根据数据的变化渲染 UI。 如果数据发生变化，UI 也会随之改变。 React 使用所谓的虚拟 DOM 来跟踪幕后的变化。 当 state 数据更新时，它会使用该数据触发组件的重新渲染 – 包括接收 prop 数据的子组件。 React 只在必要的时候更新实际的 DOM， 这意味着你不必担心 DOM 的变更， 只需声明 UI 的外观即可。</p><p>注意，如果组件是有状态的，其它组件并不知道它的 state。 它的 state 是完全封装的，或者是局限于组件本身的，除非你将 state 数据作为 props 传递给子组件。 封装 state 的概念非常重要，因为它允许编写特定的逻辑，然后将该逻辑包含并隔离在代码中的某个位置。</p><p>在用户界面中渲染状态</p><p>在代码编辑器中，MyComponent 是一个有状态组件， 在组件的 render 方法中定义一个h1标签，该方法从组件的 state 渲染 name 的值。</p><p>注意： h1 应该只渲染来自 state 的值。 在 JSX 中，使用花括号 { } 编写的任何代码都将被视为 JavaScript。 因此，要访问 state 中的值，只需将引用括在花括号中即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      name: &#x27;freeCodeCamp&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">          &lt;h1&gt;&#123;this.state.name&#125;&lt;/h1&gt;  </span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="以另一种方式在用户界面中渲染状态"><a href="#以另一种方式在用户界面中渲染状态" class="headerlink" title="以另一种方式在用户界面中渲染状态"></a>以另一种方式在用户界面中渲染状态</h1><p>还有另一种方法可以访问组件中的 state。 在 render() 方法中，在 return 语句之前，可以直接编写 JavaScript。 例如，可以声明函数、从 state 或 props 中访问数据、对此数据执行计算等。 然后，可以将任何数据赋值给 return 语句中可以访问的变量。</p><p>以另一种方式在用户界面中渲染状态</p><p>在 MyComponent 的 render 方法中，定义一个名为 name 的 const（常量），并将其设置为组件 state 中的 name 值。 因为可以直接在代码部分编写 JavaScript，所以不需要用大括号括起来。</p><p>接下来，在 return 语句中，在 h1 标签中渲染变量 name 的值。 记住，在 return 语句中需要使用 JSX 语法（用到 JavaScript 的花括号）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      name: &#x27;freeCodeCamp&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">    // 在这里“定义”一个变量（实际上是赋值），但它不是真正的常量  </span><br><span class="line">    const name = this.state.name;  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">         &lt;h1&gt;&#123;name&#125;&lt;/h1&gt;  </span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="用-this-setState-设置状态"><a href="#用-this-setState-设置状态" class="headerlink" title="用 this.setState 设置状态"></a>用 this.setState 设置状态</h1><p>前面的挑战涵盖了组件的 state 以及如何在 constructor 中初始化 state。 还有一种方法可以更改组件的 state。 React 提供了 setState 方法来更新组件的 state。 在组件类中调用 setState 方法如下所示：this.setState()，传入键值对的对象， 其中键是 state 属性，值是更新后的 state 数据。 例如，如果我们在 state 中存储 username，并想要更新它，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">  username: &#x27;Lewis&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>React 要求永远不要直接修改 state，而是在 state 发生改变时始终使用 this.setState()。 此外，应该注意，React 可以批量处理多个 state 更新以提高性能。 这意味着通过 setState 方法进行的 state 更新可以是异步的。 setState 方法有一种替代语法可以解决异步问题， 虽然这很少用到，但是最好还是记住它！ 请查阅我们的 React 文章了解更多详情。</p><p>用 this.setState 设置状态</p><p>代码编辑器中有一个 button 元素，它有一个 onClick() handler。 当 button 在浏览器中接收到单击事件时触发此 handler，并运行 MyComponent 中定义的 handleClick 方法。 在 handleClick 方法中，使用 this.setState() 更新组件的 state。 设置 state 中的 name 属性为字符串 React Rocks!。</p><p>单击按钮查看渲染的 state 的更新。 如果不完全理解单击处理程序代码在此时的工作方式，请不要担心。 在接下来的挑战中会有讲述。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      name: &#x27;Initial State&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">       this.setState(&#123;  </span><br><span class="line">      name: &#x27;React Rocks!&#x27;  </span><br><span class="line">    &#125;); </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.state.name&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="将-this-绑定到-Class-方法上"><a href="#将-this-绑定到-Class-方法上" class="headerlink" title="将 this 绑定到 Class 方法上"></a>将 this 绑定到 Class 方法上</h1><p>除了设置和更新 state 之外，还可以为组件类定义方法。 类方法通常需要使用 this 关键字，以便它可以访问方法中类的属性（例如 state 和 props）。 有几种方法可以让类方法访问 this。</p><p>一种常见的方法是在构造函数中显式地绑定 this，这样当组件初始化时，this 就会绑定到类方法。 你可能已经注意到上一个挑战在构造函数中的 handleClick 方法使用了 this.handleClick &#x3D; this.handleClick.bind(this)。 然后，当在类方法中调用像 this.setState() 这样的函数时，this 指的是这个类，而不是 。</p><p>注意： this关键字是 JavaScript 中最令人困惑的方面之一，但它在 React 中扮演着重要的角色。 虽然它的行为在这里是完全正常的，但是这些课程并不深入研究this，所以如果以上内容令你感到困惑，请参考其他课程！</p><p>将 this 绑定到 Class 方法上</p><p>代码编辑器有一个带有 state 的组件，用于跟踪项目计数。 它还有一个方法，允许设置文本为 You clicked!。 但是，该方法不起作用，因为它使用了未定义的 this 关键字。 可以通过将 this 显式绑定到组件构造函数中的 handleClick()方法来修复它。</p><p>接下来，向 render 方法中的 button 元素添加一个单击处理程序。 当按钮接收到单击事件时，它应该触发 handleClick() 方法。 记住，传递给 onClick 处理程序的方法需要使用花括号，因为它应该直接被解释为 JavaScript。</p><p>完成上述步骤后，可以单击按钮并看到 You clicked!。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      text: &quot;Hello&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">     this.handleClick = this.handleClick.bind(this);  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      text: &quot;You clicked!&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">        &lt;button onClick=&#123;this.handleClick&#125;&gt;Click Me&lt;/button&gt;</span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">        &lt;h1&gt;&#123;this.state.text&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-State-切换元素"><a href="#使用-State-切换元素" class="headerlink" title="使用 State 切换元素"></a>使用 State 切换元素</h1><p>有时可能在更新状态的时候想知道上一个状态是什么。 但是状态更新是异步的，这意味着 React 可能会把多个 setState() 集中在一起批量更新。 所以计算下一个值时 this.state 或者 this.props 不能作为当前值。 所以最好不要写如下的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">  counter: this.state.counter + this.props.increment</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正确的做法是，给 setState 传入一个函数，这个函数可以访问 state 和 props。 给 setState 传入函数可以保证 state 和 props 是正确的值。 代码可以重写为这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState((state, props) =&gt; (&#123;</span><br><span class="line">  counter: state.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>如果只需要 state，那么用下面没有 props 的格式也是可以的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(state =&gt; (&#123;</span><br><span class="line">  counter: state.counter + 1</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>注意一定要把 object 放在括号里，否则 JavaScript 会认为这只是代码片段。</p><p>使用 State 切换元素</p><p>MyComponent 有一个初始值为 false 的visibility 属性。 如果 visibility 的值为 true，render 方法返回一个视图，如果为 false，返回另一个视图。</p><p>目前，无法更新组件 state 中的 visibility 属性， 该值应在 true 和 false 之间来回切换。 按钮上有一个单击处理程序，它触发一个名为 toggleVisibility() 的类方法。 给函数传入 setState 来定义此方法，以便 visibility 的 state 在调用方法时切换到相反的值。 如果 visibility 是 false，则该方法将其设置为true，反之亦然。</p><p>最后，单击按钮以查看基于其 state 的组件的条件渲染。</p><p>提示： 不要忘记将 this 关键字绑定到 constructor 中的方法上！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      visibility: false</span><br><span class="line">    &#125;;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">     this.toggleVisibility = this.toggleVisibility.bind(this); </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  // 修改这行下面的代码</span><br><span class="line">   toggleVisibility() &#123;  </span><br><span class="line">    // 使用 setState 来切换 visibility 的布尔值  </span><br><span class="line">    this.setState(prevState =&gt; (&#123;  </span><br><span class="line">      visibility: !prevState.visibility  </span><br><span class="line">    &#125;));  </span><br><span class="line">  &#125;  </span><br><span class="line">  // 修改这行上面的代码</span><br><span class="line">  render() &#123;</span><br><span class="line">    if (this.state.visibility) &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;button onClick=&#123;this.toggleVisibility&#125;&gt;Click Me&lt;/button&gt;</span><br><span class="line">          &lt;h1&gt;Now you see me!&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;button onClick=&#123;this.toggleVisibility&#125;&gt;Click Me&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写一个简单的计数器"><a href="#写一个简单的计数器" class="headerlink" title="写一个简单的计数器"></a>写一个简单的计数器</h1><p>可以结合目前为止所涵盖的概念来设计更复杂的有状态组件。 这包括初始化 state，编写设置 state 的方法，以及指定单击处理程序来触发这些方法。</p><p>写一个简单的计数器</p><p>Counter 组件跟踪 state 中的 count 值。 有两个按钮分别调用 increment() 和 decrement() 方法。 编写这些方法，使计数器值在单击相应按钮时增加或减少 1。 另外，创建一个 reset() 方法，当单击 reset 按钮时，把计数设置为 0。</p><p>注意： 确保没有修改按钮的 className。 另外，请记住在构造函数中为新创建的方法添加必要的绑定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Counter extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">    this.increment = this.increment.bind(this);  </span><br><span class="line">    this.decrement = this.decrement.bind(this);  </span><br><span class="line">    this.reset = this.reset.bind(this); </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  // 修改这行下面的代码</span><br><span class="line">    </span><br><span class="line">  // 定义 increment 方法，用于增加 count  </span><br><span class="line">  increment() &#123;  </span><br><span class="line">    this.setState(prevState =&gt; (&#123;  </span><br><span class="line">      count: prevState.count + 1  </span><br><span class="line">    &#125;));  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  // 定义 decrement 方法，用于减少 count  </span><br><span class="line">  decrement() &#123;  </span><br><span class="line">    this.setState(prevState =&gt; (&#123;  </span><br><span class="line">      count: prevState.count - 1  </span><br><span class="line">    &#125;));  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  // 定义 reset 方法，用于将 count 重置为 0  </span><br><span class="line">  reset() &#123;  </span><br><span class="line">    this.setState(&#123;  </span><br><span class="line">      count: 0  </span><br><span class="line">    &#125;);  </span><br><span class="line">  &#125; </span><br><span class="line">  // 修改这行上面的代码</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button className=&#x27;inc&#x27; onClick=&#123;this.increment&#125;&gt;Increment!&lt;/button&gt;</span><br><span class="line">        &lt;button className=&#x27;dec&#x27; onClick=&#123;this.decrement&#125;&gt;Decrement!&lt;/button&gt;</span><br><span class="line">        &lt;button className=&#x27;reset&#x27; onClick=&#123;this.reset&#125;&gt;Reset&lt;/button&gt;</span><br><span class="line">        &lt;h1&gt;Current Count: &#123;this.state.count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="创建一个可以控制的输入框"><a href="#创建一个可以控制的输入框" class="headerlink" title="创建一个可以控制的输入框"></a>创建一个可以控制的输入框</h1><p>应用程序可能在 state 和渲染的 UI 之间有更复杂的交互。 例如，用于文本输入的表单控件元素（如 input 和 textarea）在用户键入时在 DOM 中维护自己的 state。 通过 React，可以将这种可变 state 转移到 React 组件的 state 中。 用户的输入变成了应用程序 state 的一部分，因此 React 控制该输入字段的值。 通常，如果 React 组件具有用户可以键入的输入字段，那么它将是一个受控的输入表单。</p><p>创建一个可以控制的输入框</p><p>代码编辑器具有一个名为 ControlledInput 的组件框架，用于创建受控的 input 元素。 组件的 state 已经被包含空字符串的 input 属性初始化。 此值表示用户在 input 字段中键入的文本。</p><p>首先，创建一个名为 handleChange() 的方法，该方法具有一个名为 event 的参数。 方法被调用时，它接收一个 event 对象，该对象包含一个来自 input 元素的字符串文本。 可以使用方法内的 event.target.value 来访问这个字符串。 用这个新字符串更新组件的state的input属性。</p><p>在 render 方法中的 h4 标签之上创建 input 元素。 添加一个 value 属性，使其等于组件 state 的 input 属性。 Then add an onChange property set to the handleChange() event handler method.</p><p>在输入框中键入时，文本由 handleChange() 方法处理，文本被设置为本地 state 中的 input 属性，并渲染在页面上的 input 框中。 组件 state 是输入数据的唯一真实来源。</p><p>最后，不要忘记在构造函数中添加必要的绑定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class ControlledInput extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      input: &#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">      this.handleChange = this.handleChange.bind(this); </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  // 修改这行下面的代码</span><br><span class="line">     // 定义 handleChange 方法来处理输入框的值变化  </span><br><span class="line">  handleChange(event) &#123;  </span><br><span class="line">    // 使用 event.target.value 获取输入框的当前值  </span><br><span class="line">    // 并更新组件的 state  </span><br><span class="line">    this.setState(&#123;  </span><br><span class="line">      input: event.target.value  </span><br><span class="line">    &#125;);  </span><br><span class="line">  &#125; </span><br><span class="line">  // 修改这行上面的代码</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */&#125;</span><br><span class="line">         &#123;/* 创建 input 元素，设置 value 属性为 state.input，并添加 onChange 事件处理器 */&#125;  </span><br><span class="line">        &lt;input  </span><br><span class="line">          type=&quot;text&quot;  </span><br><span class="line">          value=&#123;this.state.input&#125;  </span><br><span class="line">          onChange=&#123;this.handleChange&#125;  </span><br><span class="line">        /&gt;  </span><br><span class="line">        &#123; /* 修改这行上面的代码 */&#125;</span><br><span class="line">        &lt;h4&gt;Controlled Input:&lt;/h4&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.state.input&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="创建一个可以控制的表单"><a href="#创建一个可以控制的表单" class="headerlink" title="创建一个可以控制的表单"></a>创建一个可以控制的表单</h1><p>上一个挑战展示了 React 能控制某些元素的内部 state，比如 input 和 textarea，这使得这些元素成为受控组件。 这也适用于其他表单元素，包括常规的 HTML 表单 form 元素。</p><p>创建一个可以控制的表单<br>MyForm 组件中是一个带有提交处理程序的空 form 元素， 提交处理程序将在提交表单时被调用。</p><p>我们增加了一个提交表单的按钮。 可以看到它的 type 被设置为 submit，表明它是控制表单提交的按钮。 在 form 中添加 input 元素，并像上个挑战一样设置其 value 和 onChange() 属性。 然后，应该完成 handleSubmit 方法，以便将组件 state 属性 submit 设置为本地 state 下的当前输入值。</p><p>注意： 还必须在提交处理程序中调用 event.preventDefault()，以防止将会刷新网页的默认的表单提交行为。 为了便于学员操作，默认行为在这里被禁用，以防止重置挑战的代码。</p><p>最后，在 form 元素之后创建一个 h1 标签，该标签从组件的 state 渲染 submit 的值。 然后，可以在表单中键入任何内容，然后单击按钮（或按 enter 键），输入会渲染到页面上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">class MyForm extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      input: &#x27;&#x27;,</span><br><span class="line">      submit: &#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">    this.handleSubmit = this.handleSubmit.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      input: event.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">     this.setState(&#123;  </span><br><span class="line">      submit: this.state.input  </span><br><span class="line">    &#125;);  </span><br><span class="line">    event.preventDefault()</span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">          &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">           &#123;/* 设置 input 元素的 value 和 onChange 属性 */&#125;  </span><br><span class="line">          &lt;input  </span><br><span class="line">            type=&quot;text&quot;  </span><br><span class="line">            value=&#123;this.state.input&#125;  </span><br><span class="line">            onChange=&#123;this.handleChange&#125;  </span><br><span class="line">          /&gt;  </span><br><span class="line">          &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">          &lt;button type=&#x27;submit&#x27;&gt;Submit!&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">         &#123;/* 显示 submit 状态的值 */&#125;  </span><br><span class="line">        &lt;h1&gt;&#123;this.state.submit&#125;&lt;/h1&gt;  </span><br><span class="line">        &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="将-State-作为-Props-传递给子组件"><a href="#将-State-作为-Props-传递给子组件" class="headerlink" title="将 State 作为 Props 传递给子组件"></a>将 State 作为 Props 传递给子组件</h1><p>在之前的挑战中，看到了很多将 props 传递给子 JSX 元素和子 React 组件的例子。 你可能想知道那些 props 是从哪里来的。 一个常见的模式是：有状态组件中包含对应用程序很重要的 state，然后用它渲染子组件。 如果想让这些组件能够访问该 state 的某些部分，就把这些部分作为 props 传入。</p><p>例如，有一个 App 组件可以渲染 Navbar 以及其他组件。 App 里的 state 包含大量用户信息，但 Navbar 只需要访问用户的用户名，以便显示它。 将该 state 作为 prop 传递给Navbar组件。</p><p>这个模式说明了 React 中的一些重要范例。 第一个是单向数据流， state 沿着应用程序组件树的一个方向流动，从有状态父组件到子组件， 子组件只接收它们需要的 state 数据。 第二，复杂的有状态应用程序可以分解成几个，或者可能是一个单一的有状态组件。 其余组件只是从父组件简单的接收 state 作为 props，并从该 state 渲染 UI。 它开始创建一种分离，在这种分离中，state 管理在代码的一部分中处理，而 UI 渲染在另一部分中处理。 将 state 逻辑与 UI 逻辑分离是 React 的关键原则之一。 当它被正确使用时，它使得复杂的、有状态的应用程序的设计变得更容易管理。</p><p>将 State 作为 Props 传递给子组件</p><p>MyApp 组件是有状态的，并将 Navbar 组件渲染为子组件。 将 state 的 name 属性向下传递给子组件，然后在 h1 中显示该 name ，h1 是 Navbar render方法的一部分。 name 应该显示在文本 Hello, my name is: 后面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      name: &#x27;CamperBot&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">         &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">         &lt;Navbar name=&#123;this.state.name&#125; /&gt; </span><br><span class="line">         &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Navbar extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">       &lt;h1&gt;Hello, my name is: &#123;this.props.name&#125;&lt;/h1&gt;</span><br><span class="line">      &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="传递回调作为-Props"><a href="#传递回调作为-Props" class="headerlink" title="传递回调作为 Props"></a>传递回调作为 Props</h1><p>可以将 state 作为 props 传递给子组件，但不仅限于传递数据。 你也可以将处理函数或在 React 组件中定义的任何方法传递给子组件。 这就是子组件与父组件交互的方式。 可以把方法像普通 prop 一样传递给子组件， 它会被分配一个名字，可以在子组件中的 this.props 下访问该方法的名字。</p><p>传递回调作为 Props</p><p>代码编辑器中列出了三个组件。 MyApp 是父组件，GetInput 和RenderInput 是它将要渲染的子组件。 将 GetInput 组件添加到 MyApp 的 render 方法，然后将 MyApp 的 state 中的 inputValue 传入名为 input 的 prop。 还要创建一个名为 handleChange 的 prop，并将输入处理程序 handleChange 传递给它。</p><p>接下来，将 RenderInput 添加到 MyApp 中的 render 方法中，然后创建一个名为 input 的 prop，并将 state 中的 inputValue 传递给它。 完成后，可以在 GetInput 组件中的 input 字段中键入内容，然后该组件通过 props 调用其父组件中的处理函数方法。 这将更新处于父组件 state 中的 input，该 input 将作为 props 传递给两个子组件。 观察数据如何在组件之间流动，以及单一数据源如何保持父组件state。 诚然，这个示例有点刻意，但是应该能用来说明数据和回调是如何在 React 组件之间传递的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">class MyApp extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      inputValue: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      inputValue: event.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">        &#123; /* 修改这行下面的代码 */ &#125;</span><br><span class="line">         &lt;GetInput input=&#123;this.state.inputValue&#125; handleChange=&#123;this.handleChange&#125; /&gt;  </span><br><span class="line">        &#123;/* 渲染 RenderInput 组件，并传递 inputValue 作为 props */&#125;  </span><br><span class="line">        &lt;RenderInput input=&#123;this.state.inputValue&#125; /&gt;  </span><br><span class="line">        &#123; /* 修改这行上面的代码 */ &#125;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class GetInput extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;Get Input:&lt;/h3&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;this.props.input&#125;</span><br><span class="line">          onChange=&#123;this.props.handleChange&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class RenderInput extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;Input Render:&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;&#123;this.props.input&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用生命周期方法-componentWillMount"><a href="#使用生命周期方法-componentWillMount" class="headerlink" title="使用生命周期方法 componentWillMount"></a>使用生命周期方法 componentWillMount</h1><p>React 组件有几种特殊方法，可以在组件生命周期的特定点执行操作。 这些称为生命周期方法或生命周期钩子，允许在特定时间点捕获组件。 这可以在渲染之前、更新之前、接收 props 之前、卸载之前等等。 以下是一些主要生命周期方法的列表： componentWillMount() componentDidMount() shouldComponentUpdate() componentDidUpdate() componentWillUnmount() 接下来的几节课将讲述这些生命周期方法的一些基本用例。</p><p>注意： componentWillMount 生命周期方法会在版本 16.X 废弃，在版本 17 移除。 在这篇文章中了解更多。</p><p>使用生命周期方法 componentWillMount<br>当组件被挂载到 DOM 时，componentWillMount() 方法在 render() 方法之前被调用。 在 componentWillMount() 中将一些内容记录到控制台 – 可能需要打开浏览器控制台以查看输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">      console.log(&#x27;MyComponent will mount soon!&#x27;);  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用生命周期方法：componentDidMount"><a href="#使用生命周期方法：componentDidMount" class="headerlink" title="使用生命周期方法：componentDidMount"></a>使用生命周期方法：componentDidMount</h1><p>某些时候，大多数 web 开发人员需要调用 API 接口来获取数据。 如果正在使用 React，知道在哪里执行这个动作是很重要的。</p><p>React 的最佳实践是在生命周期方法 componentDidMount() 中对服务器进行 API 调用或任何其它调用。 将组件装载到 DOM 后会调用此方法。 此处对 setState() 的任何调用都将触发组件的重新渲染。 在此方法中调用 API 并用 API​​ 返回的数据设置 state 时，一旦收到数据，它将自动触发更新。</p><p>使用生命周期方法：componentDidMount</p><p>componentDidMount() 中有一个模拟 API 调用。 它在 2.5 秒后设置 state，以模拟调用服务器检索数据。 本示例请求站点的当前活动用户总数。 在 render 方法中，把 activeUsers 渲染到文字 Active Users: 后的 h1 标签中。 观看预览中发生的事情，随意更改超时时间以查看不同的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      activeUsers: null</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        activeUsers: 1273</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, 2500);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">        &lt;h1&gt;Active Users: &#123;this.state.activeUsers !== null ? this.state.activeUsers : &#x27;Loading...&#x27;&#125;&lt;/h1&gt;  </span><br><span class="line">     </span><br><span class="line">        &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加事件侦听器"><a href="#添加事件侦听器" class="headerlink" title="添加事件侦听器"></a>添加事件侦听器</h1><p>componentDidMount() 方法也是添加特定功能所需的任何事件监听器的最佳位置。 React 提供了一个合成事件系统，它封装了浏览器中的事件系统。 这意味着，不管用户用的是什么浏览器，合成事件系统的行为都完全相同 – 即使不同浏览器之间的本地事件的行为可能不同。</p><p>之前已经接触了一些合成事件处理程序，如onClick()。 React 的合成事件系统非常适合用于在 DOM 元素上管理的大多数交互。 但是，如果要将事件处理程序附加到 document 或 window 对象，则必须直接执行此操作。</p><p>添加事件侦听器</p><p>在 componentDidMount() 方法中为 keydown 事件添加事件监听器，并让这些事件触发回调 handleKeyPress()。 可以使用 document.addEventListener()，它将事件（用引号括起来）作为第一个参数，将回调作为第二个参数。</p><p>然后，在 componentWillUnmount() 中移除相同的事件监听器。 可以把相同的参数传递给 document.removeEventListener()。 在卸载和销毁 React 组件之前，最好在这个生命周期方法中对它们进行清理。 移除事件监听器就是这样一个清理操作的例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      message: &#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.handleEnter = this.handleEnter.bind(this);</span><br><span class="line">    this.handleKeyPress = this.handleKeyPress.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  // 修改这行下面的代码</span><br><span class="line">  componentDidMount() &#123;  </span><br><span class="line">    // 在组件挂载后添加键盘按下的事件监听器  </span><br><span class="line">    document.addEventListener(&#x27;keydown&#x27;, this.handleKeyPress);  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  componentWillUnmount() &#123;  </span><br><span class="line">    // 在组件卸载前移除键盘按下的事件监听器  </span><br><span class="line">    document.removeEventListener(&#x27;keydown&#x27;, this.handleKeyPress);  </span><br><span class="line">  &#125;  </span><br><span class="line">  // 修改这行上面的代码</span><br><span class="line">  handleEnter() &#123;</span><br><span class="line">    this.setState((state) =&gt; (&#123;</span><br><span class="line">      message: state.message + &#x27;You pressed the enter key! &#x27;</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  handleKeyPress(event) &#123;</span><br><span class="line">    if (event.keyCode === 13) &#123;</span><br><span class="line">      this.handleEnter();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;this.state.message&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-shouldComponentUpdate-优化重新渲染"><a href="#使用-shouldComponentUpdate-优化重新渲染" class="headerlink" title="使用 shouldComponentUpdate 优化重新渲染"></a>使用 shouldComponentUpdate 优化重新渲染</h1><p>到目前为止，如果任何组件接收到新的 state 或新的 props，它会重新渲染自己及其所有子组件。 这通常是好的。 但是 React 提供了一种生命周期方法，当子组件接收到新的 state 或 props 时，可以调用该方法，并特别声明组件是否应该更新。 这个方法就是 shouldComponentUpdate()，它将 nextProps 和 nextState 作为参数。</p><p>这种方法是优化性能的有效方法。 例如，默认行为是，当组件接收到新的 props 时，即使 props 没有改变，它也会重新渲染。 可以通过使用 shouldComponentUpdate() 比较 props 来防止这种情况发生。 该方法必须返回一个 boolean（布尔值），该值告诉 React 是否更新组件。 可以比较当前的 props（this.props）和下一个 props（nextProps），以确定你是否需要更新，并相应地返回 true 或 false。</p><p>使用 shouldComponentUpdate 优化重新渲染<br>将 shouldComponentUpdate() 方法添加到名为 OnlyEvens 的组件中。 目前，该方法返回 true，因此每次收到新的 props 时，OnlyEvens 都会重新渲染。 修改该方法，以便 OnlyEvens 仅在其新 props 的 value 为偶数时更新。 单击 Add 按钮，在触发其他生命周期钩子时，在浏览器控制台中查看事件的顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class OnlyEvens extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    console.log(&#x27;Should I update?&#x27;);</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">  return nextProps.value % 2 === 0;  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&#x27;Component re-rendered.&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;h1&gt;&#123;this.props.value&#125;&lt;/h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Controller extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      value: 0</span><br><span class="line">    &#125;;</span><br><span class="line">    this.addValue = this.addValue.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  addValue() &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">      value: state.value + 1</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.addValue&#125;&gt;Add&lt;/button&gt;</span><br><span class="line">        &lt;OnlyEvens value=&#123;this.state.value&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="介绍内联样式"><a href="#介绍内联样式" class="headerlink" title="介绍内联样式"></a>介绍内联样式</h1><p>还有其他复杂的概念可以为 React 代码增加强大的功能。 但是，你可能会想知道更简单的问题，比如：如何对在 React 中创建的 JSX 元素添加样式。 你可能知道，鉴于将 class 应用于 JSX 元素的方式，它与使用 HTML 并不完全相同。</p><p>如果从样式表导入样式，它就没有太大的不同。 使用 className 属性将 class 应用于 JSX 元素，并将样式应用于样式表中的 class。 另一种选择是使用内联样式，这在 ReactJS 开发中非常常见。</p><p>将内联样式应用于 JSX 元素，类似于在 HTML 中的操作方式，但有一些 JSX 差异。 以下是 HTML 中内联样式的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;color: yellow; font-size: 16px&quot;&gt;Mellow Yellow&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>JSX 元素使用 style 属性，但是鉴于 JSX 的编译方式，不能将值设置为 string（字符串）。 相反，你应该将其设置为等于 JavaScript object 。 如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&#123;&#123;color: &quot;yellow&quot;, fontSize: 16&#125;&#125;&gt;Mellow Yellow&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>注意到如何驼峰拼写 fontSize 属性了吗？ 这是因为 React 不接受样式对象中的 kebab-case 键。 React 将在 HTML 中为应用正确的属性名称。</p><p>介绍内联样式<br>在代码编辑器中给 div 添加一个 style 属性，将文本颜色设置为红色，字体大小设置为 72px。</p><p>Note that you can optionally set the font size to be a number, omitting the units px, or write it as “72px”.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Colorful extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">       &lt;div style=&#123;&#123; color: &quot;red&quot;, fontSize: &quot;72px&quot; &#125;&#125;&gt;Big Red&lt;/div&gt; </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="在-React-中添加内联样式"><a href="#在-React-中添加内联样式" class="headerlink" title="在 React 中添加内联样式"></a>在 React 中添加内联样式</h1><p>在上一次挑战中，你可能已经注意到，除了设置为 JavaScript 对象的 style 属性之外，与 HTML 内联样式相比，React 的内联样式还有其他几个语法差异。 首先，某些 CSS 样式属性的名称使用驼峰式命名。 例如，最后一个挑战用 fontSize 而不是 font-size 来设置字体的大小。 对于 JavaScript 对象属性来说，像 font-size 这样的连字符命名是无效的语法，所以 React 使用驼峰式命名。 通常，任何连字符的 style 属性在 JSX 中都是使用驼峰式命名的。</p><p>除非另有规定，否则所有属性值长度单位（如 height、width 和 fontSize）都假定为 px。 例如，如果要使用 em，可以用引号将值和单位括起来，例如 {fontSize: “4em”}。 除了默认为 px 的长度值之外，所有其他属性值都应该用引号括起来。</p><p>在 React 中添加内联样式</p><p>如果你有大量样式，你可以将样式 object（对象）分配给一个常量，以保持代码组织有序。 在文件顶部将你的样式声明为全局变量。 定义一个 styles 常量，并将其声明为具有三个样式属性及对应值的 object（对象）。 使 div 的文字颜色为 purple、字体大小为 40、边框为 2px solid purple。 然后设置 style 属性，使其等于 styles 常量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 定义 styles 常量  </span><br><span class="line">const styles = &#123;  </span><br><span class="line">  color: &#x27;purple&#x27;,  </span><br><span class="line">  fontSize: &#x27;40&#x27;,  </span><br><span class="line">  border: &#x27;2px solid purple&#x27;  </span><br><span class="line">&#125;;  </span><br><span class="line">// 修改这行上面的代码</span><br><span class="line">class Colorful extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">   return (  </span><br><span class="line">      &lt;div style=&#123;styles&#125;&gt;Style Me!&lt;/div&gt;  </span><br><span class="line">    );  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="在-React-Render-方法中使用-JavaScript"><a href="#在-React-Render-方法中使用-JavaScript" class="headerlink" title="在 React Render 方法中使用 JavaScript"></a>在 React Render 方法中使用 JavaScript</h1><p>在之前的挑战中，你学习了如何使用大括号 { } 将 JavaScript 代码插入到 JSX 代码中，用于访问 props、传递 props、访问 state、在代码中插入注释以及最近学习的定制组件样式等任务。 这些都是将 JavaScript 放在 JSX 中的常见用例，但是在 React 组件中使用 JavaScript 代码还有其他方式。</p><p>在 render 方法中编写 JavaScript，可以把 JavaScript 直接放在 return 语句之前，而不必将其插入大括号中。 这是因为它还不在 JSX 代码中。 如果之后想在 return 语句中的 JSX 代码里面使用变量时，可以将变量名放在大括号中。</p><p>在 React Render 方法中使用 JavaScript</p><p>在提供的代码中，render 方法中有一个包含 20 个短语的数组，用于表示 20 世纪 80 年代经典魔术八球玩具中的答案。 绑定 ask 方法到按钮的单击事件，每次单击该按钮时，将生成随机数并将其存储为 state 中的 randomIndex。 在第 52 行，删除字符串 change me! 并重新分配 answer 常量，以便每次组件更新时，代码随机访问 possibleAnswers 数组的不同值。 最后，在 p 标签内插入 answer 常量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">const inputStyle = &#123;</span><br><span class="line">  width: 235,</span><br><span class="line">  margin: 5</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MagicEightBall extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      userInput: &#x27;&#x27;,</span><br><span class="line">      randomIndex: &#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.ask = this.ask.bind(this);</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  ask() &#123;</span><br><span class="line">    if (this.state.userInput) &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        randomIndex: Math.floor(Math.random() * 20),</span><br><span class="line">        userInput: &#x27;&#x27;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      userInput: event.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const possibleAnswers = [</span><br><span class="line">      &#x27;It is certain&#x27;,</span><br><span class="line">      &#x27;It is decidedly so&#x27;,</span><br><span class="line">      &#x27;Without a doubt&#x27;,</span><br><span class="line">      &#x27;Yes, definitely&#x27;,</span><br><span class="line">      &#x27;You may rely on it&#x27;,</span><br><span class="line">      &#x27;As I see it, yes&#x27;,</span><br><span class="line">      &#x27;Outlook good&#x27;,</span><br><span class="line">      &#x27;Yes&#x27;,</span><br><span class="line">      &#x27;Signs point to yes&#x27;,</span><br><span class="line">      &#x27;Reply hazy try again&#x27;,</span><br><span class="line">      &#x27;Ask again later&#x27;,</span><br><span class="line">      &#x27;Better not tell you now&#x27;,</span><br><span class="line">      &#x27;Cannot predict now&#x27;,</span><br><span class="line">      &#x27;Concentrate and ask again&#x27;,</span><br><span class="line">      &quot;Don&#x27;t count on it&quot;,</span><br><span class="line">      &#x27;My reply is no&#x27;,</span><br><span class="line">      &#x27;My sources say no&#x27;,</span><br><span class="line">      &#x27;Most likely&#x27;,</span><br><span class="line">      &#x27;Outlook not so good&#x27;,</span><br><span class="line">      &#x27;Very doubtful&#x27;</span><br><span class="line">    ];</span><br><span class="line">    const answer = &#x27;change me!&#x27;; // 修改这一行</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=&#x27;text&#x27;</span><br><span class="line">          value=&#123;this.state.userInput&#125;</span><br><span class="line">          onChange=&#123;this.handleChange&#125;</span><br><span class="line">          style=&#123;inputStyle&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.ask&#125;&gt;Ask the Magic Eight Ball!&lt;/button&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;h3&gt;Answer:&lt;/h3&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">           &#123;this.state.randomIndex !== &#x27;&#x27; &amp;&amp; possibleAnswers[this.state.randomIndex]&#125;  </span><br><span class="line">       </span><br><span class="line">          &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-If-Else-条件进行渲染"><a href="#使用-If-Else-条件进行渲染" class="headerlink" title="使用 If-Else 条件进行渲染"></a>使用 If-Else 条件进行渲染</h1><p>使用 JavaScript 控制渲染视图的另一个应用是按条件渲染元素。 当条件为真时，将呈现一个视图， 反之，则呈现另一种视图。 可以在 React 组件的 render() 方法中使用的标准 if&#x2F;else 语句来实现这一点。</p><p>使用 If-Else 条件进行渲染</p><p>MyComponent 的 state 中包含一个 boolean（布尔值），用于跟踪是否要在 UI 中显示某个元素。 button 切换此值的状态。 目前，它每次都呈现相同的 UI。 用 if&#x2F;else 语句重写 render() 方法，如果 display 为 true 则返回当前标记。 否则，返回不带 h1 元素的标记。</p><p>注意： 写 if&#x2F;else 语句才能通过测试， 使用三元运算符是不会通过的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      display: true</span><br><span class="line">    &#125;</span><br><span class="line">    this.toggleDisplay = this.toggleDisplay.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  toggleDisplay() &#123;</span><br><span class="line">    this.setState((state) =&gt; (&#123;</span><br><span class="line">      display: !state.display</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">    </span><br><span class="line">      if (this.state.display) &#123;  </span><br><span class="line">      return &lt;h1&gt;Displayed!&lt;/h1&gt;;  </span><br><span class="line">    &#125; </span><br><span class="line">    else</span><br><span class="line">    return (</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">         &lt;button onClick=&#123;this.toggleDisplay&#125;&gt;Toggle Display&lt;/button&gt;</span><br><span class="line">         &lt;h1&gt;Displayed!&lt;/h1&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-获得更简洁的条件"><a href="#使用-获得更简洁的条件" class="headerlink" title="使用 &amp;&amp; 获得更简洁的条件"></a>使用 &amp;&amp; 获得更简洁的条件</h1><p>if&#x2F;else 语句在上一次挑战中是有效的，但是有一种更简洁的方法可以达到同样的结果。 假设正在跟踪组件中的几个条件，并且希望根据这些条件中的每一个来渲染不同的元素。 如果你写了很多 else if 语句来返回稍微不同的 UI，你可能会写很多重复代码，这就留下了出错的空间。 相反，你可以使用 &amp;&amp; 逻辑运算符以更简洁的方式执行条件逻辑。 这是完全可行的，因为你希望检查条件是否为 true。如果是，则返回一些标记。 下面是一个示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;condition &amp;&amp; &lt;p&gt;markup&lt;/p&gt;&#125;</span><br></pre></td></tr></table></figure><p>如果 condition 为 true，则返回标记。 如果条件为 false ，则在评估 condition 后操作将立即返回 false，并且不返回任何内容。 可以将这些语句直接包含在 JSX 中，并通过在每个条件后面写 &amp;&amp; 来将多个条件串在一起。 这允许你在 render() 方法中处理更复杂的条件逻辑，而无需重复大量代码。</p><p>使用 &amp;&amp; 获得更简洁的条件</p><p>再来看看前面的示例，h1 还是在 display 为 true 时渲染，但使用 &amp;&amp; 逻辑运算符代替 if&#x2F;else 语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      display: true</span><br><span class="line">    &#125;</span><br><span class="line">    this.toggleDisplay = this.toggleDisplay.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  toggleDisplay() &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">      display: !state.display</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">    return (</span><br><span class="line">       &lt;div&gt;</span><br><span class="line">         &lt;button onClick=&#123;this.toggleDisplay&#125;&gt;Toggle Display&lt;/button&gt;</span><br><span class="line">          &#123;this.state.display &amp;&amp; &lt;h1&gt;Displayed!&lt;/h1&gt;&#125; </span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用三元表达式进行条件渲染"><a href="#使用三元表达式进行条件渲染" class="headerlink" title="使用三元表达式进行条件渲染"></a>使用三元表达式进行条件渲染</h1><p>在继续使用动态渲染技术之前，还有最后一种方法可以渲染想要的东西，它使用内置的 JavaScript 条件：三元运算符。 三元运算符经常被用作 JavaScript 中 if&#x2F;else 语句的缩写。 它们不像传统的 if&#x2F;else 语句那样强大，但是在 React 开发人员中非常流行， 原因之一就是 JSX 的编译原理，if&#x2F;else 语句不能直接插入到 JSX 代码中。 可能你在前几个挑战就注意到了这一点——当需要 if&#x2F;else 语句时，它总是在 return 语句的外面。 如果想在 JSX 中实现条件逻辑，三元表达式是一个很好的选择。 回想一下，三元运算符有三个部分，但是可以将多个三元表达式组合在一起。 以下是基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? expressionIfTrue : expressionIfFalse;</span><br></pre></td></tr></table></figure><p>使用三元表达式进行条件渲染</p><p>代码编辑器在 CheckUserAge 组件的 render() 方法中定义了三个常量， 它们分别是 buttonOne、buttonTwo 和 buttonThree。 每个都分配了一个表示按钮元素的简单 JSX 表达式。 首先，使用 input 和 userAge 初始化 CheckUserAge 的 state，并将其值设置为空字符串。</p><p>一旦组件将信息渲染给页面，用户应该有一种方法与之交互。 在组件的 return 语句中，设置一个实现以下逻辑的三元表达式：当页面首次加载时，将提交按钮 buttonOne 渲染到页面。 然后，当用户输入年龄并点击该按钮时，根据年龄渲染不同的按钮。 如果用户输入的数字小于18，则渲染buttonThree。 如果用户输入的数字大于或等于18，则渲染buttonTwo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">const inputStyle = &#123;</span><br><span class="line">  width: 235,</span><br><span class="line">  margin: 5</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class CheckUserAge extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">      this.state = &#123;  </span><br><span class="line">      input: &#x27;&#x27;,  </span><br><span class="line">      userAge: &#x27;&#x27;,  </span><br><span class="line">      buttonText: &#x27;Submit&#x27; // 初始按钮文本  </span><br><span class="line">    &#125;;  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">    this.submit = this.submit.bind(this);</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      input: e.target.value,</span><br><span class="line">      userAge: &#x27;&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  submit() &#123;</span><br><span class="line">    this.setState(state =&gt; (&#123;</span><br><span class="line">      userAge: state.input</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const buttonOne = &lt;button onClick=&#123;this.submit&#125;&gt;Submit&lt;/button&gt;;</span><br><span class="line">    const buttonTwo = &lt;button&gt;You May Enter&lt;/button&gt;;</span><br><span class="line">    const buttonThree = &lt;button&gt;You Shall Not Pass&lt;/button&gt;;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;Enter Your Age to Continue&lt;/h3&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          style=&#123;inputStyle&#125;</span><br><span class="line">          type=&#x27;number&#x27;</span><br><span class="line">          value=&#123;this.state.input&#125;</span><br><span class="line">          onChange=&#123;this.handleChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">        &#123; this.state.userAge === &#x27;&#x27; ? buttonOne :   </span><br><span class="line">          ( this.state.userAge &lt; 18 ? buttonThree : buttonTwo)&#125;  </span><br><span class="line">        &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-Props-有条件地渲染"><a href="#使用-Props-有条件地渲染" class="headerlink" title="使用 Props 有条件地渲染"></a>使用 Props 有条件地渲染</h1><p>到目前为止，你已经了解了如何使用 if&#x2F;else、&amp;&amp; 和三元运算符（condition ? expressionIfTrue : expressionIfFalse）来决定渲染什么和何时渲染。 然而，还有一个重要的话题需要讨论，它可以让你将这些概念中的一个或所有与另一个强大的 React 特性结合起来：props。 使用 props 有条件地渲染代码对于 React 开发人员来说非常常见——也就是说，他们使用给定 props 的值来自动决定要渲染什么。</p><p>在这个挑战中，将设置一个子组件来根据 props 做出渲染决定。 可以使用三元运算符，但是可以看到过去几个挑战中涵盖的其他几个概念在这种情况下可能同样有用。</p><p>使用 Props 有条件地渲染<br>代码编辑器有两个部分定义了的组件：一个名为 GameOfChance 的父组件和一个名为 Results 的子组件。 它们被用来创建一个简单的游戏，用户按下按钮来看它们是赢还是输。</p><p>首先，需要一个简单的表达式，每次运行时都会随机返回一个不同的值。 可以使用 Math.random()。 每次调用此方法时，此方法返回 0（包括）和 1（不包括）之间的值。 因此，对于 50&#x2F;50 的几率，请在表达式中使用 Math.random() &gt;&#x3D; .5。 从统计学上讲，这个表达式有 50％ 的几率返回 true，另外 50％ 返回 false。 在 render 方法里，用此表达式替换 null 以完成变量声明。</p><p>现在你有了一个表达式，可以使用该表达式在代码中做出随机决策。 接下来，需要实现此功能。 将 Results 组件渲染为 GameOfChance 的子 组件，并将 expression 作为名为 fiftyFifty 的 prop 传入 。 在 Results 组件中，编写一个三元表达式来渲染 h1 元素的文本。GameOfChance 传来的 prop fiftyFifty 来决定渲染文本 You Win! 还是 You Lose!。 最后，确保 handleClick() 方法正确计算每个回合，以便用户知道他们玩过多少次。 这也可以让用户知道组件实际上已经更新，以防他们连续赢两次或输两次时自己不知道。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class Results extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">    return  (  </span><br><span class="line">      &lt;h1&gt;&#123;this.props.fiftyFifty ? &#x27;You Win!&#x27; : &#x27;You Lose!&#x27;&#125;&lt;/h1&gt;  </span><br><span class="line">    );  </span><br><span class="line">    &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GameOfChance extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      counter: 1</span><br><span class="line">    &#125;;</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    this.setState(prevState =&gt; &#123;</span><br><span class="line">      // 完成 return 语句</span><br><span class="line">      return &#123;</span><br><span class="line">        counter: prevState.counter + 1,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const fiftyFifty = Math.random() &gt;= 0.5;   // 修改这一行</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.handleClick&#125;&gt;Play Again&lt;/button&gt;</span><br><span class="line">        &#123;/* 修改这行下面的代码 */&#125;</span><br><span class="line">          &lt;Results fiftyFifty=&#123;fiftyFifty&#125; /&gt; </span><br><span class="line">        &#123;/* 修改这行上面的代码 */&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#x27;Turn: &#x27; + this.state.counter&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="根据组件状态有条件地更改内联-CSS"><a href="#根据组件状态有条件地更改内联-CSS" class="headerlink" title="根据组件状态有条件地更改内联 CSS"></a>根据组件状态有条件地更改内联 CSS</h1><p>此时，已经看到了一些条件渲染的应用程序和内联样式的使用。 这里还有一个将这两个主题结合在一起的例子。 你也可以根据 React 组件的 state 有条件地渲染 CSS。 要执行此操作，请检查条件，如果满足该条件，则修改在 render 方法中分配给 JSX 元素的样式对象。</p><p>理解这个模式很重要，因为相比传统的方式（这在 jQuery 中非常常见），直接修改 DOM 元素来应用样式的方法是一个戏剧性的转变。 在该方法中，必须跟踪元素何时更改并直接处理实际操作。 跟踪更改可能变得很困难，可能会使 UI无法预测。 当根据一个条件设置一个样式对象时，描述了 UI 作为应用程序的状态函数应当如何展现。 如此便有一个清晰的单向流动的信息流。 这是使用 React 编写应用程序时的首选方法。</p><p>根据组件状态有条件地更改内联 CSS</p><p>代码编辑器有一个简单的带有边框样式的受控 input 组件。 如果用户在输入框中键入超过 15 个字符的文本，希望将此边框变成红色。 添加一个条件来检查这一点，如果条件有效，则将 input 的边框样式设置为3px solid red。 可以通过在 input 中输入文本来检测它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class GateKeeper extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      input: &#x27;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    this.setState(&#123; input: event.target.value &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    let inputStyle = &#123;</span><br><span class="line">      border: &#x27;1px solid black&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">     // 检查输入长度，并据此修改边框样式  </span><br><span class="line">    if (this.state.input.length &gt; 15) &#123;  </span><br><span class="line">      inputStyle.border = &#x27;3px solid red&#x27;;  </span><br><span class="line">    &#125;  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h3&gt;Don&#x27;t Type Too Much:&lt;/h3&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=&quot;text&quot;</span><br><span class="line">          style=&#123;inputStyle&#125;</span><br><span class="line">          value=&#123;this.state.input&#125;</span><br><span class="line">          onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-Array-map-动态渲染元素"><a href="#使用-Array-map-动态渲染元素" class="headerlink" title="使用 Array.map() 动态渲染元素"></a>使用 Array.map() 动态渲染元素</h1><p>条件渲染很有用，但是可能需要组件来渲染未知数量的元素。 通常在响应式编程中，程序员在应用程序运行时之前无法知道其 state，因为这在很大程度上取决于用户与该程序的交互。 程序员需要提前编写代码来正确处理未知状态。 在 React 中使用 Array.map() 阐明了这个概念。</p><p>例如，创建一个简单的 “To Do List” 应用程序。 作为程序员，你无法知道用户可能在其列表中有多少项。 需要设置组件，以便在使用该程序的人决定今日待办事项之前动态渲染列表元素的正确数量。</p><p>使用 Array.map() 动态渲染元素</p><p>代码编辑器完成了 MyToDoList 组件的大部分设置。 如果完成了受控表单挑战，这些代码中的一些应该看起来很熟悉。 你会注意到一个 textarea 和一个 button，以及一些跟踪它们状态的方法，但是页面当前还没有任何东西被渲染。</p><p>在 constructor 中，创建一个 this.state 对象并定义两个 state：userInput 应该初始化为空字符串，toDoList 应该初始化为空数组。 接下来，在 render() 方法中删除 items 变量的 null 值。 取而代之的是，将存储在组件内部 state 中的 toDoList 数组一一遍历，并相应地动态呈现在 li 元素中。 尝试在 textarea 中输入 eat, code, sleep, repeat，然后点击按钮，看看会发生什么。</p><p>注意： 像这样的映射操作创建的所有兄弟子元素都需要提供唯一的 key 属性。 别担心，这是下一个挑战的主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">const textAreaStyles = &#123;</span><br><span class="line">  width: 235,</span><br><span class="line">  margin: 5</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MyToDoList extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    // 修改这行下面的代码</span><br><span class="line">     // 初始化state  </span><br><span class="line">    this.state = &#123;  </span><br><span class="line">      userInput: &#x27;&#x27;, // 用户输入的字符串  </span><br><span class="line">      toDoList: []   // 待办事项列表  </span><br><span class="line">    &#125;;  </span><br><span class="line">    // 修改这行上面的代码</span><br><span class="line">    this.handleSubmit = this.handleSubmit.bind(this);</span><br><span class="line">    this.handleChange = this.handleChange.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit() &#123;</span><br><span class="line">    const itemsArray = this.state.userInput.split(&#x27;,&#x27;);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      toDoList: itemsArray</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      userInput: e.target.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    // 使用Array.map()遍历toDoList数组，并渲染列表项  </span><br><span class="line">    const items = this.state.toDoList.map((item, index) =&gt; (  </span><br><span class="line">      &lt;li key=&#123;index&#125;&gt;&#123;item.trim()&#125;&lt;/li&gt; // 使用索引作为key，但最好是有更稳定的唯一标识符  </span><br><span class="line">    ));  </span><br><span class="line">   // 修改这一行</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;textarea</span><br><span class="line">          onChange=&#123;this.handleChange&#125;</span><br><span class="line">          value=&#123;this.state.userInput&#125;</span><br><span class="line">          style=&#123;textAreaStyles&#125;</span><br><span class="line">          placeholder=&#x27;Separate Items With Commas&#x27;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.handleSubmit&#125;&gt;Create List&lt;/button&gt;</span><br><span class="line">        &lt;h1&gt;My &quot;To Do&quot; List:&lt;/h1&gt;</span><br><span class="line">        &lt;ul&gt;&#123;items&#125;&lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="给同级元素一个唯一的键属性"><a href="#给同级元素一个唯一的键属性" class="headerlink" title="给同级元素一个唯一的键属性"></a>给同级元素一个唯一的键属性</h1><p>上一个挑战展示了如何使用 map 方法根据用户输入动态渲染多个元素。 然而，这个例子中缺少一个重要的部分。 创建元素数组时，每个元素都需要一个设置为唯一值的 key 属性。 React 使用这些键来跟踪哪些项目被添加、更改或删除。 这有助于在以任何方式修改列表时提高重新渲染过程的效率。</p><p>注意： 键只需要在兄弟元素之间是唯一的，它们不需要在应用程序中是全局唯一的。</p><p>给同级元素一个唯一的键属性</p><p>代码编辑器有一个数组，它包含一些前端框架和一个名为 Frameworks() 的无状态函数组件。 Frameworks() 需要将数组映射到无序列表，就像上一个挑战一样。 完成 map 回调，为 frontEndFrameworks 数组中的每个框架返回一个 li 元素。 这次，确保给每个 li 的 key 属性设置一个唯一的值。 li 元素还应该包含来自 frontEndFrameworks 的文本。</p><p>通常，希望使 key 能唯一标识要渲染的元素。 数组索引可以是最后的选择，但通常你应该尝试使用唯一标识。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const frontEndFrameworks = [</span><br><span class="line">  &#x27;React&#x27;,</span><br><span class="line">  &#x27;Angular&#x27;,</span><br><span class="line">  &#x27;Ember&#x27;,</span><br><span class="line">  &#x27;Knockout&#x27;,</span><br><span class="line">  &#x27;Backbone&#x27;,</span><br><span class="line">  &#x27;Vue&#x27;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">function Frameworks() &#123;</span><br><span class="line"> // 使用 map 方法来遍历 frontEndFrameworks 数组，并为每个框架返回一个 li 元素  </span><br><span class="line">  const renderFrameworks = frontEndFrameworks.map((framework, index) =&gt; (  </span><br><span class="line">    &lt;li key=&#123;framework&#125;&gt;&#123;framework&#125;&lt;/li&gt; // 使用框架名称作为 key  </span><br><span class="line">  ));  </span><br><span class="line">   // 修改这一行</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Popular Front End JavaScript Frameworks&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;renderFrameworks&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用-Array-Filter-动态过滤数组"><a href="#使用-Array-Filter-动态过滤数组" class="headerlink" title="使用 Array.Filter() 动态过滤数组"></a>使用 Array.Filter() 动态过滤数组</h1><p>map 数组方法是一个强大的工具，在使用 React 时经常使用。 与 map 相关的另一种方法是 filter，它根据条件过滤数组的内容，然后返回一个新数组。 例如，如果有一个 users 数组，每个数组元素都有一个可以设置为 true 或 false 的 online 属性，可以这样只过滤那些在线的用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let onlineUsers = users.filter(user =&gt; user.online);</span><br></pre></td></tr></table></figure><p>使用 Array.Filter() 动态过滤数组</p><p>在代码编辑器中，MyComponent 的 state 被初始化为一个用户数组。 有些用户在线，有些则没有。 过滤数组，以便只查看在线用户。 要执行此操作，请首先使用 filter 返回仅包含 online 属性为 true 的用户的新数组。 然后，在 renderOnline 变量中，映射已过滤的数组，并为包含其 username 文本的每个用户返回 li 元素。 确保包含一个唯一的 key，就像上一个挑战一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class MyComponent extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      users: [</span><br><span class="line">        &#123;</span><br><span class="line">          username: &#x27;Jeff&#x27;,</span><br><span class="line">          online: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          username: &#x27;Alan&#x27;,</span><br><span class="line">          online: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          username: &#x27;Mary&#x27;,</span><br><span class="line">          online: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          username: &#x27;Jim&#x27;,</span><br><span class="line">          online: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          username: &#x27;Sara&#x27;,</span><br><span class="line">          online: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          username: &#x27;Laura&#x27;,</span><br><span class="line">          online: true</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">   // 使用 filter 方法过滤出在线的用户  </span><br><span class="line">    const usersOnline = this.state.users.filter(user =&gt; user.online);  </span><br><span class="line">      </span><br><span class="line">    // 使用 map 方法将在线用户映射成列表项  </span><br><span class="line">    const renderOnline = usersOnline.map((user, index) =&gt; (  </span><br><span class="line">      &lt;li key=&#123;user.username&#125;&gt;&#123;user.username&#125;&lt;/li&gt; // 使用 username 作为 key  </span><br><span class="line">    ));  </span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Current Online Users:&lt;/h1&gt;</span><br><span class="line">        &lt;ul&gt;&#123;renderOnline&#125;&lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用-renderToString-在服务器上渲染-React"><a href="#用-renderToString-在服务器上渲染-React" class="headerlink" title="用 renderToString 在服务器上渲染 React"></a>用 renderToString 在服务器上渲染 React</h1><p>到目前为止，已经能够在客户端上渲染 React 组件， 一般来说我们都是这么做的。 然而，在一些用例中，需要在服务器上渲染一个 React 组件。 由于 React 是一个 JavaScript 视图库，所以通常使用 Node 让 JavaScript 运行在服务器上。 事实上，React 提供了一个可用于此目的的 renderToString() 方法。</p><p>有两个关键原因可以解释为什么服务器上的渲染可能会在真实世界的应用程序中使用。 首先，如果不这样做，当 React 应用程序最初加载到浏览器时，它将包含一个代码量很少的 HTML 文件和一大堆 JavaScript。 这对于搜索引擎来说可能不太理想，因为它们试图为网页内容生成索引，以便人们可以找到这个应用。 如果在服务器上渲染初始 HTML 标记并将其发送到客户端，则初始页面加载的内容包含搜索引擎可以抓取的所有页面标记。 其次，这创造了更快的初始页面加载体验，因为渲染的 HTML 代码量要比整个应用程序的 JavaScript 代码小。 React 仍然能够识别你的应用并在初始加载后进行管理。</p><p>用 renderToString 在服务器上渲染 React</p><p>renderToString() 方法由 ReactDOMServer 提供，在这里已为你定义成全局变量。 这个方法接收一个 React 元素作为参数。 用它来把 App 渲染成字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div/&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 修改这行下面的代码</span><br><span class="line">// 使用 ReactDOMServer.renderToString() 渲染 App 组件  </span><br><span class="line">const htmlString = ReactDOMServer.renderToString(&lt;App /&gt;);  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery框架(DOM)</title>
      <link href="/2024/07/15/jQuery%E6%A1%86%E6%9E%B6(DOM)/"/>
      <url>/2024/07/15/jQuery%E6%A1%86%E6%9E%B6(DOM)/</url>
      
        <content type="html"><![CDATA[<p>jQuery 是一个流行的 JavaScript 库，用于简化客户端脚本编写和 DOM 操作。它提供了许多实用的功能和方法，使得在网页中使用 JavaScript 更加便捷和高效，同时理解Web的底层DOM原理。</p><h1 id="了解-script-和-document-ready-是如何工作的"><a href="#了解-script-和-document-ready-是如何工作的" class="headerlink" title="了解 script 和 document.ready 是如何工作的"></a>了解 script 和 document.ready 是如何工作的</h1><p>马上就要学习有史以来最受欢迎的 JavaScript 框架——jQuery 了。</p><p>在使用 jQuery 之前，需要在 HTML 页面中添加一些东西。</p><p>首先，在页面顶部添加 script 标签， 记得在后面为它添加结束标签。</p><p>浏览器会运行 script 标签所有的 JavaScript 脚本包括 jQuery。</p><p>在 script 标签中添加代码 </p><p>$(document).ready(function() {。 然后在后面（仍在该 script 标签内）用 }); 闭合它。</p><p>稍后将详细介绍 functions， 重要的是要知道，在浏览器加载页面后，你放入此 function 的代码将立即运行。</p><p>有一点很重要，如果没有 document ready function，代码将在 HTML 页面呈现之前运行，这可能会导致错误。</p><p>了解 script 和 document.ready 是如何工作的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只修改这一行上面的代码 --&gt;</span><br><span class="line">&lt;script&gt;$(document).ready(function() &#123;&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;text-primary text-center&quot;&gt;jQuery Playground&lt;/h3&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#left-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target1&quot;&gt;#target1&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target2&quot;&gt;#target2&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target3&quot;&gt;#target3&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#right-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;right-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target4&quot;&gt;#target4&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target5&quot;&gt;#target5&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target6&quot;&gt;#target6&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-选择器选择元素"><a href="#使用-jQuery-选择器选择元素" class="headerlink" title="使用 jQuery 选择器选择元素"></a>使用 jQuery 选择器选择元素</h1><p>现在我们有一个 document ready 函数。</p><p>首先，完成第一个 jQuery 语句。 所有的 jQuery 函数都以 $ 开头，这个符号通常被称为美元符号（dollar sign operator）或 bling。</p><p>jQuery 通常选取并操作带有选择器（selector）的 HTML 标签。</p><p>比如，想要给 button 元素添加跳跃效果。 只需要在 document ready 函数内添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).addClass(&quot;animated bounce&quot;);</span><br></pre></td></tr></table></figure><p>请注意，我们已经在后台引入了 jQuery 库和 Animate.css 库，所以你可以在编辑器里直接使用它们。 你将使用 jQuery 将 Animate.css bounce class 应用于 button 元素。</p><p>使用 jQuery 选择器选择元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">$(&quot;button&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Only change code above this line --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;text-primary text-center&quot;&gt;jQuery Playground&lt;/h3&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#left-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target1&quot;&gt;#target1&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target2&quot;&gt;#target2&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target3&quot;&gt;#target3&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#right-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;right-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target4&quot;&gt;#target4&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target5&quot;&gt;#target5&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target6&quot;&gt;#target6&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-class-选择器选择元素"><a href="#使用-jQuery-class-选择器选择元素" class="headerlink" title="使用 jQuery class 选择器选择元素"></a>使用 jQuery class 选择器选择元素</h1><p>如何使所有的 button 标签都有弹跳的动画效果？ 用 $(“button”) 选取所有的 button 标签，并用 .addClass(“animated bounce”); 给其添加一些 CSS 属性。</p><p>jQuery 的 .addClass() 方法用来给标签添加类。</p><p>首先，使用 $(“.well”) 选取类为 well 的 div 标签。</p><p>值得注意的是，和 CSS 声明一样，在类名前需要添加 .。</p><p>然后，用 jQuery 的 .addClass() 方法添加 animated 和 shake class。</p><p>例如，在 document ready function 中添加下面的代码，使所有类为 text-primary 的标签抖动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.text-primary&quot;).addClass(&quot;animated shake&quot;);</span><br></pre></td></tr></table></figure><p>使用 jQuery class 选择器选择元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;button&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">     $(&quot;.well&quot;).addClass(&quot;animated shake&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Only change code above this line --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;text-primary text-center&quot;&gt;jQuery Playground&lt;/h3&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#left-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target1&quot;&gt;#target1&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target2&quot;&gt;#target2&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target3&quot;&gt;#target3&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#right-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;right-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target4&quot;&gt;#target4&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target5&quot;&gt;#target5&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target6&quot;&gt;#target6&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-id-选择器选择元素"><a href="#使用-jQuery-id-选择器选择元素" class="headerlink" title="使用 jQuery id 选择器选择元素"></a>使用 jQuery id 选择器选择元素</h1><p>也能通过 id 属性选取标签。</p><p>首先，用 $(“#target3”) 选择器选取 id 为 target3 的 button 标签。</p><p>注意，和 CSS 声明一样，在 id 名前需要添加 #。</p><p>然后，用 jQuery 的 .addClass() 方法添加 animated 和 fadeOut 类。</p><p>下面的代码的效果是使 id 为 target6 的 button 标签淡出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target6&quot;).addClass(&quot;animated fadeOut&quot;);</span><br></pre></td></tr></table></figure><p>使用 jQuery id 选择器选择元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;button&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">    $(&quot;.well&quot;).addClass(&quot;animated shake&quot;);</span><br><span class="line">    $(&quot;#target3&quot;).addClass(&quot;animated fadeOut&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Only change code above this line --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;text-primary text-center&quot;&gt;jQuery Playground&lt;/h3&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#left-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target1&quot;&gt;#target1&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target2&quot;&gt;#target2&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target3&quot;&gt;#target3&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#right-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;right-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target4&quot;&gt;#target4&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target5&quot;&gt;#target5&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target6&quot;&gt;#target6&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="删除-jQuery-函数"><a href="#删除-jQuery-函数" class="headerlink" title="删除 jQuery 函数"></a>删除 jQuery 函数</h1><p>这些动画开始看起来很酷，但是有时可能会让用户分心。</p><p>请删除 document ready function 内的三个 jQuery 函数，但保留 document ready function 本身。</p><p>删除 jQuery 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Only change code above this line --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;text-primary text-center&quot;&gt;jQuery Playground&lt;/h3&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#left-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target1&quot;&gt;#target1&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target2&quot;&gt;#target2&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target3&quot;&gt;#target3&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#right-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;right-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target4&quot;&gt;#target4&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target5&quot;&gt;#target5&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target6&quot;&gt;#target6&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="用多个-jQuery-选择器选择同一个元素"><a href="#用多个-jQuery-选择器选择同一个元素" class="headerlink" title="用多个 jQuery 选择器选择同一个元素"></a>用多个 jQuery 选择器选择同一个元素</h1><p>现在你知道了三种选取标签的方法：用元素选择器：$(“button”)、用类选择器：$(“.btn”) 以及用 id 选择器：$(“#target1”) 。</p><p>虽然可以在单个 .addClass() 内添加多个类，但是我们可以用三种不同的方式给一种标签添加类。</p><p>以三种不同的方式用 .addClass() 方法每次只给一种标签添加一个类：</p><p>给所有的 button 标签添加 animated 类。</p><p>给所有类为 .btn 的 button 标签添加 shake 类。</p><p>给所有 id 为 #target1 的 button 标签添加 btn-primary 类。</p><p><strong>注意：</strong>只针对一个元素并且一次只能添加一个 class。 总之，三个选择器最终将给 #target1 添加三个 class shake、animated 以及 btn-primary。</p><p>用多个 jQuery 选择器选择同一个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;button&quot;).addClass(&quot;animated&quot;);</span><br><span class="line">    $(&quot;.btn&quot;).addClass(&quot;shake&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).addClass(&quot;btn-primary&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Only change code above this line --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;text-primary text-center&quot;&gt;jQuery Playground&lt;/h3&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#left-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target1&quot;&gt;#target1&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target2&quot;&gt;#target2&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target3&quot;&gt;#target3&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#right-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;right-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target4&quot;&gt;#target4&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target5&quot;&gt;#target5&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target6&quot;&gt;#target6&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-从元素中移除-class"><a href="#使用-jQuery-从元素中移除-class" class="headerlink" title="使用 jQuery 从元素中移除 class"></a>使用 jQuery 从元素中移除 class</h1><p>和用 jQuery 的 addClass() 方法给标签添加类一样，也可以利用 jQuery 的 removeClass() 方法移除它们。</p><p>下面是为指定按钮执行上面的操作的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target2&quot;).removeClass(&quot;btn-default&quot;);</span><br></pre></td></tr></table></figure><p>请把所有 button 元素的 btn-default class 移除。</p><p>使用 jQuery 从元素中移除 class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;button&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">    $(&quot;.well&quot;).addClass(&quot;animated shake&quot;);</span><br><span class="line">    $(&quot;#target3&quot;).addClass(&quot;animated fadeOut&quot;);</span><br><span class="line">    $(&quot;button&quot;).removeClass(&quot;btn-default&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Only change code above this line --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">  &lt;h3 class=&quot;text-primary text-center&quot;&gt;jQuery Playground&lt;/h3&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#left-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;left-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target1&quot;&gt;#target1&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target2&quot;&gt;#target2&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target3&quot;&gt;#target3&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">      &lt;h4&gt;#right-well&lt;/h4&gt;</span><br><span class="line">      &lt;div class=&quot;well&quot; id=&quot;right-well&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target4&quot;&gt;#target4&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target5&quot;&gt;#target5&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-default target&quot; id=&quot;target6&quot;&gt;#target6&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-更改元素的-CSS"><a href="#使用-jQuery-更改元素的-CSS" class="headerlink" title="使用 jQuery 更改元素的 CSS"></a>使用 jQuery 更改元素的 CSS</h1><p>也能用 jQuery 直接改变 HTML 标签的 CSS。</p><p>jQuery 有一个 .css() 方法，能改变标签的 CSS。</p><p>下面的代码效果是把颜色变蓝：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target1&quot;).css(&quot;color&quot;, &quot;blue&quot;);</span><br></pre></td></tr></table></figure><p>这与通常的 CSS 声明略有不同，因为这个 CSS 属性和它的值在英文引号里，并且它们用逗号而不是冒号间隔开。</p><p>删除 jQuery 选择器，留下一个空的 document ready function 。</p><p>选择 target1，并将其颜色更改为红色。</p><p>使用 jQuery 更改元素的 CSS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;button&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">    $(&quot;.well&quot;).addClass(&quot;animated shake&quot;);</span><br><span class="line">    $(&quot;#target3&quot;).addClass(&quot;animated fadeOut&quot;);</span><br><span class="line">    $(&quot;button&quot;).removeClass(&quot;btn-default&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-禁用元素"><a href="#使用-jQuery-禁用元素" class="headerlink" title="使用 jQuery 禁用元素"></a>使用 jQuery 禁用元素</h1><p>还能用 jQuery 改变 HTML 标签的非 CSS 属性， 例如：禁用按钮。</p><p>当禁用按钮时，它将变成灰色并无法点击。</p><p>jQuery 有一个 .prop() 方法，可以用其调整标签的属性。</p><p>下面是禁用所有的按钮的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;button&quot;).prop(&quot;disabled&quot;, true);</span><br></pre></td></tr></table></figure><p>仅禁用 target1 按钮。</p><p>使用 jQuery 禁用元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-更改元素内部的文本"><a href="#使用-jQuery-更改元素内部的文本" class="headerlink" title="使用 jQuery 更改元素内部的文本"></a>使用 jQuery 更改元素内部的文本</h1><p>可以通过 jQuery 改变元素开始和结束标签之间的文本。 甚至改变 HTML 标签。</p><p>jQuery 有一个 .html() 函数，能用其在标签里添加 HTML 标签和文本， 函数提供的内容将完全替换之前标签的内容。</p><p>下面是重写并强调标题文本的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;h3&quot;).html(&quot;&lt;em&gt;jQuery Playground&lt;/em&gt;&quot;);</span><br></pre></td></tr></table></figure><p>jQuery 还有一个类似的函数 .text()，可以在不添加标签的前提下改变标签内的文本。 换句话说，这个函数不会评估传递给它的任何 HTML 标记，而是将其视为要替换现有内容的文本。</p><p>给 id 为 target4 的按钮的文本添加强调效果。</p><p><a href="https://www.freecodecamp.org/news/html-elements-explained-what-are-html-tags/#em-element">查看我们的专栏文章 <em></em></a>来了解 <i> 和 <em> 及其用途之间的差异。</em></i></p><p>注意，<i> 标签虽然传统上用来强调文本，但此后常用作图标的标签。 <em> 标签作为强调标签现在已被广泛接受。 可以使用任意一种完成这个挑战。</em></i></p><p>使用 jQuery 更改元素内部的文本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target4&quot;).html(&quot;&lt;em&gt;#target4&lt;/em&gt;&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-删除元素"><a href="#使用-jQuery-删除元素" class="headerlink" title="使用 jQuery 删除元素"></a>使用 jQuery 删除元素</h1><p>现在学习用 jQuery 从页面移除 HTML 标签。</p><p>jQuery 有一个名为 .remove() 的函数，它将完全删除一个 HTML 元素。</p><p>用 .remove() 方法从页面移除 #target4 元素。</p><p>使用 jQuery 删除元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-的-appendTo-方法移动元素"><a href="#使用-jQuery-的-appendTo-方法移动元素" class="headerlink" title="使用 jQuery 的 appendTo 方法移动元素"></a>使用 jQuery 的 appendTo 方法移动元素</h1><p>现在来把标签从一个 div 移动到另一个里。</p><p>jQuery 有一个 appendTo() 方法，可以选取 HTML 标签并将其添加到另一个标签里面。</p><p>例如，如果要把 target4 从 right well 移到 left well，可以设置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target4&quot;).appendTo(&quot;#left-well&quot;);</span><br></pre></td></tr></table></figure><p>把 target2 元素从 left-well 移动到 right-well。</p><p>使用 jQuery 的 appendTo 方法移动元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">    $(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-克隆元素"><a href="#使用-jQuery-克隆元素" class="headerlink" title="使用 jQuery 克隆元素"></a>使用 jQuery 克隆元素</h1><p>除了移动标签，也可以把元素从一个地方复制到另一地方。</p><p>jQuery 有一个 clone() 方法，可以复制标签。</p><p>例如，如果想把 target2 从 left-well 复制到 right-well，可以设置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#target2&quot;).clone().appendTo(&quot;#right-well&quot;);</span><br></pre></td></tr></table></figure><p>是否注意到这两个 jQuery 函数连在一起了？ 这被称为链式调用（function chaining），是一种用 jQuery 实现效果的简便方法。</p><p>克隆 target5 元素，并将其附加到 left-well 。</p><p>使用 jQuery 克隆元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">    $(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br><span class="line">    $(&quot;#target5&quot;).clone().appendTo(&quot;#left-well&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-选择元素的父元素"><a href="#使用-jQuery-选择元素的父元素" class="headerlink" title="使用 jQuery 选择元素的父元素"></a>使用 jQuery 选择元素的父元素</h1><p>每个 HTML 标签都默认 inherits（继承）其 parent（父标签）的 CSS 属性。</p><p>例如，你的 jQuery Playground 中的 h3 标签的父标签是 <div class="container-fluid">，而这个标签的父标签是 body。</div></p><p>jQuery 有一个 parent() 方法，可以访问被选取标签的父标签。</p><p>下面的代码展示了使用 parent() 方法把 left-well 标签的父标签背景色设置成蓝色（blue）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#left-well&quot;).parent().css(&quot;background-color&quot;, &quot;blue&quot;)</span><br></pre></td></tr></table></figure><p>把 #target1 元素的父元素背景色设置成红色（red）。</p><p>使用 jQuery 选择元素的父元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">    $(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br><span class="line">    $(&quot;#target5&quot;).clone().appendTo(&quot;#left-well&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).parent().css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-选择元素的子元素"><a href="#使用-jQuery-选择元素的子元素" class="headerlink" title="使用 jQuery 选择元素的子元素"></a>使用 jQuery 选择元素的子元素</h1><p>把 HTML 标签放到另一个级别的标签里，这些 HTML 标签被称为该标签的子标签（children element）。 例如，本次挑战中文本为 #target1、#target2 和 #target3 的按钮都是 <div class="well" id="left-well"> 标签的子标签。</div></p><p>jQuery 有一个 children() 方法，可以访问被选取标签的子标签。</p><p>下面的代码展示了用 children() 方法把 left-well 标签的子标签的颜色设置成 blue（蓝色）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#left-well&quot;).children().css(&quot;color&quot;, &quot;blue&quot;)</span><br></pre></td></tr></table></figure><p>使用 jQuery 选择元素的子元素</p><p>将 right-well 元素的所有子元素设置为橙色（orange）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">    $(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br><span class="line">    $(&quot;#target5&quot;).clone().appendTo(&quot;#left-well&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).parent().css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#right-well&quot;).children().css(&quot;color&quot;, &quot;orange&quot;)</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-选择元素的特定子元素"><a href="#使用-jQuery-选择元素的特定子元素" class="headerlink" title="使用 jQuery 选择元素的特定子元素"></a>使用 jQuery 选择元素的特定子元素</h1><p>已经看到了 id 属性对于 jQuery 选择器选取标签的便利， 但这并不适用于所有情景。</p><p>幸运的是，jQuery 有一些其他的方法可以选取正确的标签。</p><p>jQuery 可以用 CSS 选择器（CSS Selectors）选取标签。 target:nth-child(n) CSS 选择器可以选取指定 class 或者元素类型的的第 n 个标签。</p><p>下面的代码展示了给每个区域（well）的第 3 个标签设置弹跳（bounce）动画效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.target:nth-child(3)&quot;).addClass(&quot;animated bounce&quot;);</span><br></pre></td></tr></table></figure><p>给 well 元素的第二个子元素添加弹跳（bounce）动画效果。 你必须选择具有 target class 的元素子项。</p><p>使用 jQuery 选择元素的特定子元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">    $(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br><span class="line">    $(&quot;#target5&quot;).clone().appendTo(&quot;#left-well&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).parent().css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#right-well&quot;).children().css(&quot;color&quot;, &quot;orange&quot;);</span><br><span class="line">    $(&quot;.target:nth-child(2)&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-选择偶数元素"><a href="#使用-jQuery-选择偶数元素" class="headerlink" title="使用 jQuery 选择偶数元素"></a>使用 jQuery 选择偶数元素</h1><p>也可以用基于位置的奇 :odd 和偶 :even 选择器选取标签。</p><p>注意，jQuery 是零索引（zero-indexed）的，这意味着第 1 个标签的位置编号是 0。 这有点混乱和反常——:odd 表示选择第 2 个标签（位置编号 1）、第 4 个标签（位置编号 3）……等等，以此类推。</p><p>下面的代码展示了选取所有 target class 的奇数元素并给它们设置 class：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.target:odd&quot;).addClass(&quot;animated shake&quot;);</span><br></pre></td></tr></table></figure><p>尝试选取所有 target class 元素的偶数元素并给它们设置 animated 和 shake class。 请记住， 偶数指的是基于零系统的元素的位置。</p><p>使用 jQuery 选择偶数元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">    $(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br><span class="line">    $(&quot;#target5&quot;).clone().appendTo(&quot;#left-well&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).parent().css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#right-well&quot;).children().css(&quot;color&quot;, &quot;orange&quot;);</span><br><span class="line">    $(&quot;#left-well&quot;).children().css(&quot;color&quot;, &quot;green&quot;);</span><br><span class="line">    $(&quot;.target:nth-child(2)&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">    $(&quot;.target:even&quot;).addClass(&quot;animated shake&quot;);</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-jQuery-修改整个页面"><a href="#使用-jQuery-修改整个页面" class="headerlink" title="使用 jQuery 修改整个页面"></a>使用 jQuery 修改整个页面</h1><p>目前，已经完成了 jQuery playground。 把它移除吧。</p><p>jQuery 也能选取 body 标签。</p><p>这是使整个 body 淡出的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;body&quot;).addClass(&quot;animated fadeOut&quot;);</span><br></pre></td></tr></table></figure><p>来做一些更好玩的事。 给 body 标签添加 animated 和 hinge class。</p><p>使用 jQuery 修改整个页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#target1&quot;).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).prop(&quot;disabled&quot;, true);</span><br><span class="line">    $(&quot;#target4&quot;).remove();</span><br><span class="line">    $(&quot;#target2&quot;).appendTo(&quot;#right-well&quot;);</span><br><span class="line">    $(&quot;#target5&quot;).clone().appendTo(&quot;#left-well&quot;);</span><br><span class="line">    $(&quot;#target1&quot;).parent().css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class="line">    $(&quot;#right-well&quot;).children().css(&quot;color&quot;, &quot;orange&quot;);</span><br><span class="line">    $(&quot;#left-well&quot;).children().css(&quot;color&quot;, &quot;green&quot;);</span><br><span class="line">    $(&quot;.target:nth-child(2)&quot;).addClass(&quot;animated bounce&quot;);</span><br><span class="line">    $(&quot;.target:even&quot;).addClass(&quot;animated shake&quot;);</span><br><span class="line">    //$(&quot;body&quot;).addClass(&quot;animated fadeOut&quot;);</span><br><span class="line">    $(&quot;body&quot;).addClass(&quot;animated hinge&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2024/07/13/JavaScript/"/>
      <url>/2024/07/13/JavaScript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript是一种函数优先特性的轻量级、解释型或者说即时编译型的编程语言。JavaScript 是网页交互的核心，通过本课程，您将学会如何运用 JavaScript 实现动态效果和用户交互。从简单的页面特效到复杂的数据处理，JavaScript 可以让您的网页更加生动有趣。您将掌握 JavaScript 的基本语法、DOM 操作、事件处理等知识，为您打开创造丰富互动网页的大门。</p><h1 id="给代码添加注释"><a href="#给代码添加注释" class="headerlink" title="给代码添加注释"></a>给代码添加注释</h1><p>JavaScript有两种写注释的方法。</p><ul><li>使用 &#x2F;&#x2F; 注释掉当前行的代码。 这是一个行内注释：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// This is an in-line comment.</span><br></pre></td></tr></table></figure></li><li>你也可以使用多行注释来注释你的代码，使用 &#x2F;* 开始， *&#x2F; 结束。 这是一个多行注释：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* This is a</span><br><span class="line">multi-line comment */</span><br></pre></td></tr></table></figure></li></ul><h1 id="let与const"><a href="#let与const" class="headerlink" title="let与const"></a>let与const</h1><p>let 与 var的区别与使用：</p><p>使用 var 关键字声明变量的最大问题之一是你可以轻松覆盖变量声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var camper = &quot;James&quot;;</span><br><span class="line">var camper = &quot;David&quot;;</span><br><span class="line">console.log(camper);</span><br></pre></td></tr></table></figure><p>在上面的代码中，camper 变量最初声明为 James，然后被覆盖为 David。 然后控制台显示字符串 David。</p><p>在小型应用程序中，你可能不会遇到此类问题。 但是随着你的代码库变大，你可能会意外地覆盖一个你不打算覆盖的变量。 由于此行为不会引发错误，因此搜索和修复错误变得更加困难。</p><p>ES6 中引入了一个名为 let 的关键字，这是对 JavaScript 的一次重大更新，以解决与 var 关键字有关的潜在问题。 你将在后面的挑战中了解其他 ES6 特性。</p><p>如果将上面代码中的 var 替换为 let ，则会导致错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let camper = &quot;James&quot;;</span><br><span class="line">let camper = &quot;David&quot;;</span><br></pre></td></tr></table></figure><p>该错误可以在你的浏览器控制台中看到。</p><p>所以不像 var，当你使用 let 时，同名的变量只能声明一次。</p><p>const的使用：</p><p>关键字 let 并不是声明变量的唯一新方法。 在 ES6 中，你还可以使用 const 关键字声明变量。</p><p>const 具有 let 的所有出色功能，另外还有一个额外的好处，即使用 const 声明的变量是只读的。 它们是一个常量值，这意味着一旦一个变量被赋值为 const，它就不能被重新赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const FAV_PET = &quot;Cats&quot;;</span><br><span class="line">FAV_PET = &quot;Dogs&quot;;</span><br></pre></td></tr></table></figure><p>由于重新分配 FAV_PET 的值，控制台将显示错误。</p><p>你应该始终使用 const 关键字命名不想重新分配的变量。 这有助于避免给一个常量进行额外的再次赋值。</p><p>注意： 通常，开发者会用大写字母作为常量标识符，用小写字母或者驼峰命名作为变量（对象或数组）标识符。 你将在后面的挑战中了解有关对象、数组以及不可变和可变值的更多信息。 同样在后面的挑战中，你将看到大写、小写或驼峰式变量标识符的示例。</p><p>let与const</p><p>更改代码，以便使用 let 或 const 声明所有变量。 当你想要改变变量时使用 let，当你想要变量保持不变时使用 const。 此外，重命名使用 const 声明的变量以符合惯例。 请勿更改分配给变量的字符串。</p><h1 id="理解未初始化的变量"><a href="#理解未初始化的变量" class="headerlink" title="理解未初始化的变量"></a>理解未初始化的变量</h1><p>当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值 。 当你对一个值为 的变量进行运算操作的时候，算出来的结果将会是 NaN，它的意思是 “Not a Number”。 如果你用 变量连接一个字符串，你将得到一个 的 字符串。</p><p>定义 3 个变量 a、b、c，并且分别给他们赋值：5、10、”I am a”，这样它们值就不会是 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line">let a=5;</span><br><span class="line">let b=10;</span><br><span class="line">let c=&quot;I am a&quot;;</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">a = a + 1;</span><br><span class="line">b = b + 5;</span><br><span class="line">c = c + &quot; String!&quot;;</span><br></pre></td></tr></table></figure><h1 id="js七种数据类型"><a href="#js七种数据类型" class="headerlink" title="js七种数据类型"></a>js七种数据类型</h1><p>JavaScript中有七种主要的数据类型，分为两类：原始数据类型和引用数据类型。下面我会详细介绍它们以及它们的常见用法和示例：</p><p><em><strong>原始数据类型：</strong></em></p><p>字符串 (String)：字符串是存储字符（比如 “Hello, World!”）的变量。字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;Hello, World!&quot;;</span><br><span class="line">console.log(str); // 输出: Hello, World!</span><br></pre></td></tr></table></figure><p>常见的字符串操作有：</p><p>连接：使用加号 (+) 将两个字符串连接起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str1 = &quot;Hello&quot;;</span><br><span class="line">let str2 = &quot;World&quot;;</span><br><span class="line">let result = str1 + &quot;, &quot; + str2;</span><br><span class="line">console.log(result); // 输出: Hello, World</span><br></pre></td></tr></table></figure><p>长度：使用 length 属性获取字符串的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript&quot;;</span><br><span class="line">console.log(str.length); // 输出: 10</span><br></pre></td></tr></table></figure><p>提取字符：使用方括号加索引来提取字符串中的特定字符（索引从0开始）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript&quot;;</span><br><span class="line">console.log(str[0]); // 输出: J</span><br><span class="line">console.log(str[4]); // 输出: S</span><br></pre></td></tr></table></figure><p>查找：使用 indexOf() 方法查找子字符串在主字符串中的位置（如果存在）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript&quot;;</span><br><span class="line">console.log(str.indexOf(&quot;Script&quot;)); // 输出: 4</span><br></pre></td></tr></table></figure><p>替换：使用 replace() 方法替换字符串中的部分内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;JavaScript is awesome&quot;;</span><br><span class="line">let newStr = str.replace(&quot;awesome&quot;, &quot;great&quot;);</span><br><span class="line">console.log(newStr); // 输出: JavaScript is great</span><br></pre></td></tr></table></figure><p>数字 (Number)：JavaScript 只有一种数字类型。数字可以带小数点，也可以不带。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let x1=34.00;      //使用小数点来写</span><br><span class="line">let x2=34;             //不使用小数点来写</span><br></pre></td></tr></table></figure><p>布尔值 (Boolean)：用于表示逻辑上的 true 或 false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let isTrue = true;</span><br><span class="line">if (isTrue) &#123;</span><br><span class="line">  console.log(&quot;It&#x27;s true!&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log(&quot;It&#x27;s false!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空值 (null)：表示一个空值对象，通常用于初始化变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let emptyValue = null;</span><br><span class="line">console.log(emptyValue); // 输出: null</span><br></pre></td></tr></table></figure><p>未定义 ()：表示一个未赋值的变量或未声明的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let notDefined;</span><br><span class="line">console.log(notDefined); // 输出: </span><br></pre></td></tr></table></figure><p><em><strong>引用数据类型：</strong></em></p><p>对象 (Object)：用于存储多个值的集合，每个值都有对应的键。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let person = &#123;</span><br><span class="line">  name: &quot;John&quot;,</span><br><span class="line">  age: 30,</span><br><span class="line">  isAdmin: false</span><br><span class="line">&#125;;</span><br><span class="line">console.log(person.name); // 输出: John</span><br></pre></td></tr></table></figure><p>数组 (Array)：用于存储多个值的有序集合，每个值都有对应的索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let numbers = [1, 2, 3, 4, 5];</span><br><span class="line">console.log(numbers.length); // 输出: 5</span><br></pre></td></tr></table></figure><p><strong>typeof 获取数据类型：</strong>我们已经学完了js的七种数据类型，在js中，定义的变量是弱类型的，那么我们该通过什么样的方式来知道变量的类型呢。typeof 是 JavaScript 中的一个运算符，用于获取操作数的数据类型。它返回一个表示操作数类型的字符串。</p><p>基本用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof operand;//operand：要检测其类型的操作数。</span><br></pre></td></tr></table></figure><p>返回值：</p><p>：如果操作数是未定义的值。<br>boolean：如果操作数是布尔值。<br>number：如果操作数是数值。<br>string：如果操作数是字符串。<br>bigint：如果操作数是大整数。<br>symbol：如果操作数是符号。<br>object：如果操作数是对象或 null。<br>function：如果操作数是函数。</p><p><em><strong>注意事项：</strong></em></p><p>typeof null 返回 “object”，这是 JavaScript 的一个历史遗留问题，因为在 JavaScript 早期版本中，null 被错误地归类为对象。这个问题由来已久，为了保持向后兼容性，没有修复这个问题。</p><p>对于大多数数据类型，typeof 可以很好地检测其类型。但是对于对象和数组，它只能告诉我们它们是对象，无法进一步区分具体的类型。因此，当需要详细了解对象的类型时，通常需要使用其他方法，比如 instanceof 运算符或检查对象的构造函数。</p><p>instanceof：instanceof 是 JavaScript 中的一个运算符，用于检测一个对象是否是某个构造函数的实例。它用于检查一个对象是否是指定类（或类的原型链上的类）的实例，返回一个布尔值。</p><p>基本用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object instanceof constructor</span><br></pre></td></tr></table></figure><p>object：要检查的对象。<br>constructor：要检查对象是否是其实例的构造函数。<br>返回值：instanceof运算符返回一个布尔值，表示对象是否是指定构造函数的实例。如果 object 是 constructor 的实例，则返回 true；否则返回 false。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;&#125;;</span><br><span class="line">console.log(obj instanceof Object); // true</span><br><span class="line"></span><br><span class="line">const arr = [];</span><br><span class="line">console.log(arr instanceof Array); // true</span><br><span class="line">console.log(arr instanceof Object); // true，数组也是对象的一种</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong>虽然 instanceof 可以用来检测数组，但是需要注意的是，如果在多个全局执行上下文之间使用了多个 JavaScript 引擎实例（如在 Web Worker 中），那么可能会出现 instanceof不正确的情况。因此，如果需要检测对象是否是数组，最好使用 Array.isArray() 方法，它更可靠。</p><p>js七种数据类型</p><p>定义 3 个变量 a、b、c，并且分别给他们赋值：5、10、”I am a”，这样它们值就不会是 了。</p><h1 id="使用模板字面量创建字符串"><a href="#使用模板字面量创建字符串" class="headerlink" title="使用模板字面量创建字符串"></a>使用模板字面量创建字符串</h1><p>模板字符串是 ES6 的另外一项新的功能。 这是一种可以轻松构建复杂字符串的方法。</p><p>模板字符串可以使用多行字符串和字符串插值功能。</p><p>请看以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;Zodiac Hasbro&quot;,</span><br><span class="line">  age: 56</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const greeting = `Hello, my name is $&#123;person.name&#125;!</span><br><span class="line">I am $&#123;person.age&#125; years old.`;</span><br><span class="line"></span><br><span class="line">console.log(greeting);</span><br></pre></td></tr></table></figure><p>控制台将显示字符串 Hello, my name is Zodiac Hasbro! 和 I am 56 years old.。</p><p>这里发生了许多事情。 首先，这个例子使用反引号（&#96;），而不是引号（’ 或者 “）将字符串括起来。 其次，注意代码和输出中的字符串都是多行的。 不需要在字符串中插入 \n。 上面使用的 ${variable} 语法是一个占位符。 这样一来，你将不再需要使用 + 运算符来连接字符串。 当需要在字符串里增加变量的时候，你只需要在变量的外面括上 ${ 和 }，并将其放在模板字符串里就可以了。 同样，你可以在字符串中包含其他表达式，例如 ${a + b}。 这个新的方式使你可以更灵活地创建复杂的字符串。</p><p>使用模板字面量创建字符串</p><p>使用模板字符串的反引号的语法创建一个包含条目（li）字符串的数组。 每个条目应该是 result 对象 failure 属性的数组内的元素，并具有 class 属性，值为 text-warning。 makeList 函数应该返回列表项字符串的数组。</p><p>使用遍历方法（可以是任意形式的循环）输出指定值（如下）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#x27;&lt;li class=&quot;text-warning&quot;&gt;no-var&lt;/li&gt;&#x27;,</span><br><span class="line">  &#x27;&lt;li class=&quot;text-warning&quot;&gt;var-on-top&lt;/li&gt;&#x27;,</span><br><span class="line">  &#x27;&lt;li class=&quot;text-warning&quot;&gt;linebreak&lt;/li&gt;&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const result = &#123;</span><br><span class="line">  success: [&quot;max-length&quot;, &quot;no-amd&quot;, &quot;prefer-arrow-functions&quot;],</span><br><span class="line">  failure: [&quot;no-var&quot;, &quot;var-on-top&quot;, &quot;linebreak&quot;],</span><br><span class="line">  skipped: [&quot;no-extra-semi&quot;, &quot;no-dup-keys&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">function makeList(arr) &#123;</span><br><span class="line">  // Only change code below this line</span><br><span class="line"> const failureItems = [];</span><br><span class="line">  for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    failureItems.push(`&lt;li class=&quot;text-warning&quot;&gt;$&#123;arr[i]&#125;&lt;/li&gt;`);</span><br><span class="line">  &#125;</span><br><span class="line">  // Only change code above this line</span><br><span class="line"></span><br><span class="line">  return failureItems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const failuresList = makeList(result.failure);</span><br></pre></td></tr></table></figure><h1 id="使用-JavaScript-数组将多个值存储在一个变量中"><a href="#使用-JavaScript-数组将多个值存储在一个变量中" class="headerlink" title="使用 JavaScript 数组将多个值存储在一个变量中"></a>使用 JavaScript 数组将多个值存储在一个变量中</h1><p>使用 JavaScript 数组将多个值存储在一个变量中：</p><p>使用数组（array），我们可以在一个地方存储多个数据。</p><p>以左方括号开始定义一个数组，以右方括号结束，里面每个元素之间用逗号隔开，例如：</p><p>const sandwich &#x3D; [“peanut butter”, “jelly”, “bread”];</p><p>将一个数组嵌套在另一个数组中：<br>您也可以在其他数组中嵌套数组，如：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const teams = [[&quot;Bulls&quot;, 23], [&quot;White Sox&quot;, 45]];</span><br></pre></td></tr></table></figure><p>这也叫做多维数组（multi-dimensional array）。</p><ul><li>通过索引访问数组中的数据：</li></ul><p>我们可以使用索引（indexes）来访问数组中的数据。</p><p>数组索引与字符串一样使用方括号来表示，不同的是，它们不是指定字符，而是指定数组中的一个条目。 数组索引与字符串索引一样是从 0 开始（zero-based）的，所以数组中第一个元素的索引编号是 0。</p><p>示例：</p><p>const array &#x3D; [50, 60, 70];</p><p>console.log(array[0]);</p><p>const data &#x3D; array[1];</p><p>console.log(array[0]) 打印 50，<br>data 的值为 60。</p><ul><li>通过索引修改数组中的数据：</li></ul><p>与字符串不同，数组的条目是可变的并且可以自由更改，即使数组是用 const 声明的。</p><p>示例：</p><p>const ourArray &#x3D; [50, 40, 30];<br>ourArray[0] &#x3D; 15;<br>ourArray 值为 [15, 40, 30]。</p><p>注意： 数组名与方括号之间不应该有任何空格，比如 array [0] 。 尽管 JavaScript 能够正确处理这种情况，但是当其他程序员阅读你写的代码时，这可能让他们感到困惑。</p><ul><li>使用索引访问多维数组：</li></ul><p>我们可以把多维数组看作成是数组中的数组。 当你使用括号访问你的数组时，第一组括号指的是最外层（第一层）数组中的条目，而每一对额外的括号指的是里面下一层的条目。</p><p>例如：</p><p>const arr &#x3D;<br>[<br>[1, 2, 3],<br>[4, 5, 6],<br>[7, 8, 9],<br>[[10, 11, 12], 13, 14]<br>];</p><p>const subarray &#x3D; arr[3];</p><p>const nestedSubarray &#x3D; arr[3][0];</p><p>const element &#x3D; arr[3][0][1];</p><p>在这个例子中，subarray 的值为 [[10, 11, 12], 13, 14]，<br>nestedSubarray 的值为 [10, 11, 12]，element 的值为 11 。</p><p>注意：数组名与方括号之间不应该有任何空格，比如 array [0][0] 甚至是 array [0] [0] 都是不允许的。 尽管 JavaScript 能够正确处理这种情况，但是当其他程序员阅读你写的代码时，这可能让他们感到困惑。</p><ul><li>使用 push 方法操作数组：</li></ul><p>将数据加到数组末尾的一种简单方法是通过push()方法。</p><p>push()方法接受一个或多个参数，并按照它们出现的顺序将它们附加到数组的末尾。它返回数组的新长度。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const arr1 = [1, 2, 3];</span><br><span class="line">arr1.push(4, 5);</span><br><span class="line"></span><br><span class="line">const arr2 = [&quot;Stimpson&quot;,&quot;J&quot;, &quot;cat&quot;];</span><br><span class="line">arr2.push([&quot;happy&quot;, &quot;joy&quot;]);</span><br><span class="line"></span><br><span class="line">arr1现在的值为[1,2,3,4,5]，arr2的值[“Stimpson”,“J”,“cat”,[“happy”,“joy”]]。</span><br></pre></td></tr></table></figure><ul><li>使用 pop 方法操作数组：</li></ul><p>改变数组中数据的另一种方法是用 .pop() 函数。</p><p>.pop() 函数用来弹出一个数组末尾的值。 我们可以把这个弹出的值赋给一个变量存储起来。 换句话说就是 .pop() 函数移除数组末尾的元素并返回这个元素。</p><p>数组中任何类型的元素（数值，字符串，甚至是数组）都可以被弹出来 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const threeArr = [1, 4, 6];</span><br><span class="line">const oneDown = threeArr.pop();</span><br><span class="line">console.log(oneDown);</span><br><span class="line">console.log(threeArr);</span><br><span class="line">第一个 console.log 将显示值 6，第二个将显示值 [1, 4]。</span><br></pre></td></tr></table></figure><ul><li>使用 shift 方法操作数组：</li></ul><p>pop() 函数用来移出数组中最后一个元素。 如果想要移出第一个元素要怎么办呢？</p><p>这时候我们就需要 .shift() 了。 它的工作原理就像 .pop()，但它移除的是第一个元素，而不是最后一个。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const ourArray = [&quot;Stimpson&quot;, &quot;J&quot;, [&quot;cat&quot;]];</span><br><span class="line">const removedFromOurArray = ourArray.shift();</span><br><span class="line">removedFromOurArray 值为 Stimpson，ourArray 值为 [&quot;J&quot;, [&quot;cat&quot;]]</span><br></pre></td></tr></table></figure><ul><li>使用 unshift 方法操作数组：</li></ul><p>不仅可以 shift（移出）数组中的第一个元素，也可以 unshift（移入）一个元素到数组的头部。</p><p>.unshift() 函数用起来就像 .push() 函数一样，但不是在数组的末尾添加元素，unshift() 在数组的头部添加元素。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const ourArray = [&quot;Stimpson&quot;, &quot;J&quot;, &quot;cat&quot;];</span><br><span class="line">ourArray.shift();</span><br><span class="line">ourArray.unshift(&quot;Happy&quot;);</span><br><span class="line">在 shift、ourArray 后值为 [&quot;J&quot;, &quot;cat&quot;]。 在 unshift、ourArray 后值为 [&quot;Happy&quot;, &quot;J&quot;, &quot;cat&quot;]。</span><br></pre></td></tr></table></figure><p>eg:</p><p>使用 JavaScript 数组将多个值存储在一个变量中</p><p>创建一个名叫 myList 的购物清单。 清单的数据格式就是多维数组。</p><p>每个子数组中的第一个元素应该是购买的物品名称。 第二个元素应该是物品的数量，类似于：</p><p>[“Chocolate Bar”, 15]<br>列表中应至少有 5 个子数组。</p><h1 id="用函数编写可重用代码"><a href="#用函数编写可重用代码" class="headerlink" title="用函数编写可重用代码"></a>用函数编写可重用代码</h1><p>在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个函数 （functions）中。</p><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function functionName() &#123;</span><br><span class="line">  console.log(&quot;Hello World&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过函数名加上后面的小括号来调用（invoke）这个函数，就像这样： functionName(); 每次调用函数时，它都会在控制台上打印消息 Hello World。 每次调用函数时，大括号之间的所有代码都将被执行。</p><p>eg:</p><p>用函数编写可重用代码</p><p>先创建一个名为 reusableFunction 的函数，这个函数打印 Hi World 到控制台上。<br>然后调用这个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function  reusableFunction()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(&quot;Hi World&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reusableFunction();</span><br></pre></td></tr></table></figure><h1 id="将值传递给带有参数的函数"><a href="#将值传递给带有参数的函数" class="headerlink" title="将值传递给带有参数的函数"></a>将值传递给带有参数的函数</h1><p>函数的参数 （parameters）在函数调用中充当传入函数的输入占位符（也叫形参）。 函数调用时，参数可以为一个或多个。 调用函数时输入（或传递 “passed”）的实际值被称为参数（arguments）。</p><p>这是带有两个参数的函数，param1 和 param2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function testFun(param1, param2) &#123;</span><br><span class="line">  console.log(param1, param2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以调用 testFun，就像这样： testFun(“Hello”, “World”);。 我们传入了两个字符串参数， Hello 和 World。 在函数中，param1 等于字符串 Hello 以及 param2 等于字符串 World。 请注意，testFun 函数可以多次调用，每次调用时传递的参数会决定参数的实际值。</p><p>eg:</p><p>将值传递给带有参数的函数</p><p>创建一个名为 functionWithArgs 的函数，它可以接收两个参数，计算参数的和，将结果输出到控制台。<br>自己指定两个数字作为参数，运行函数 functionWithArgs。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function functionWithArgs(param1, param2) &#123;</span><br><span class="line">  console.log(param1+param2);</span><br><span class="line">&#125;</span><br><span class="line">functionWithArgs(1,3);</span><br><span class="line">functionWithArgs(7,9);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-函数的值传递与引用传递"><a href="#JavaScript-函数的值传递与引用传递" class="headerlink" title="JavaScript 函数的值传递与引用传递"></a>JavaScript 函数的值传递与引用传递</h1><p>函数参数的传递方式分为值传递（pass by value）和引用传递（pass by reference），它们在处理参数时有着不同的行为。</p><p>JavaScript 中的基本类型（如数字、字符串、布尔值等）是通过值传递的方式传递给函数的，而对象、数组等复杂类型则是通过引用传递的方式传递给函数的。因此，对于基本类型，函数内部对参数的修改不会影响到原始变量；而对于复杂类型，函数内部对参数的修改会影响到原始变量。</p><p><strong>值传递（Pass by Value）：</strong></p><p>在值传递中，函数参数的值被复制到了一个新的变量，函数内部对该变量的操作不会影响到原始变量的值。这意味着，对参数的任何修改都只会在函数内部生效，不会影响到函数外部的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function increment(num) &#123;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let x = 10;</span><br><span class="line">increment(x);</span><br><span class="line">console.log(x); // 输出 10，原始变量的值未改变</span><br></pre></td></tr></table></figure><p>在这个例子中，x 是一个数字，作为参数传递给 increment 函数时，num 接收了 x 的值的一个副本，所以在函数内部对 num 的修改不会影响到 x 的值。</p><p><strong>引用传递（Pass by Reference）：</strong></p><p>在引用传递中，函数参数接收的是原始值的内存地址（引用），而不是值本身的副本。这意味着，函数内部对参数的操作会直接影响到原始变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function addToEnd(arr, element) &#123;</span><br><span class="line">    arr.push(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myArray = [1, 2, 3];</span><br><span class="line">addToEnd(myArray, 4);</span><br><span class="line">console.log(myArray); // 输出 [1, 2, 3, 4]，原始数组被修改</span><br></pre></td></tr></table></figure><p>在这个例子中，myArray 是一个数组，作为参数传递给 addToEnd 函数时，arr 接收了 myArray 的引用，所以在函数内部对 arr 的操作会直接修改原始数组 myArray。</p><p>区别总结：</p><p>值传递：传递的是值的副本，函数内部的操作不会影响到原始变量。<br>引用传递：传递的是值的引用，函数内部的操作会直接影响到原始变量。</p><p>JavaScript 函数的值传递与引用传递</p><p>在updateArray中修改代码，实现将myList的第三个元素，更改为tiger</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function updateArray(arr,index,element)&#123;</span><br><span class="line">// Setup</span><br><span class="line">arr[index]=element;   </span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let myList = [&quot;cat&quot;,&quot;dog&quot;,&quot;t&quot;]</span><br><span class="line">updateArray(myList,2,&quot;tiger&quot;)</span><br><span class="line">console.log(myList)</span><br></pre></td></tr></table></figure><h1 id="使用-return-给函数返回值"><a href="#使用-return-给函数返回值" class="headerlink" title="使用 return 给函数返回值"></a>使用 return 给函数返回值</h1><p>我们可以通过函数的参数（arguments）把值传入函数， 也可以使用 return 语句把数据从一个函数中传出来。</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function plusThree(num) &#123;</span><br><span class="line">  return num + 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const answer = plusThree(5);</span><br><span class="line">//answer 的值为 8。</span><br></pre></td></tr></table></figure><p>plusThree 带有一个参数（argument）num，并返回（return）一个等于 num + 3 的值。</p><p>使用 return 给函数返回值</p><p>创建一个函数 timesFive 接收一个参数，把它乘以 5 之后返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function timesFive(num) &#123;</span><br><span class="line">  return num*5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timesFive(5);</span><br><span class="line">timesFive(2);</span><br><span class="line">timesFive(0);</span><br></pre></td></tr></table></figure><h1 id="使用箭头函数编写简洁的匿名函数"><a href="#使用箭头函数编写简洁的匿名函数" class="headerlink" title="使用箭头函数编写简洁的匿名函数"></a>使用箭头函数编写简洁的匿名函数</h1><p>在 JavaScript 里，我们会经常遇到不需要给函数命名的情况，尤其是在需要将一个函数作为参数传给另外一个函数的时候。 这时，我们会创建匿名函数。 因为这些函数不会在其他地方复用，所以我们不需要给它们命名。</p><p>这种情况下，我们通常会使用以下语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const myFunc = function() &#123;</span><br><span class="line">  const myVar = &quot;value&quot;;</span><br><span class="line">  return myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 提供了其他写匿名函数的方式的语法糖。 你可以使用箭头函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const myFunc = () =&gt; &#123;</span><br><span class="line">  const myVar = &quot;value&quot;;</span><br><span class="line">  return myVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当不需要函数体，只返回一个值的时候，箭头函数允许你省略 return 关键字和外面的大括号。 这样就可以将一个简单的函数简化成一个单行语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myFunc = () =&gt; &quot;value&quot;;</span><br></pre></td></tr></table></figure><p>这段代码默认会返回字符串 value。</p><p>使用箭头函数编写简洁的匿名函数<br>使用箭头函数的语法重写赋给 magic 变量的函数，使其返回一个新的 Date() new Date()。 同时不要用 var 关键字来定义任何变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const magic = () =&gt; new Date();</span><br></pre></td></tr></table></figure><h1 id="编写带参数的箭头函数"><a href="#编写带参数的箭头函数" class="headerlink" title="编写带参数的箭头函数"></a>编写带参数的箭头函数</h1><p>和一般的函数一样，你也可以给箭头函数传递参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const doubler = (item) =&gt; item * 2;</span><br><span class="line">doubler(4);</span><br></pre></td></tr></table></figure><p>doubler(4) 将返回 8。</p><p>如果箭头函数只有一个参数，则可以省略参数外面的括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const doubler = item =&gt; item * 2;</span><br></pre></td></tr></table></figure><p>可以给箭头函数传递多个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const multiplier = (item, multi) =&gt; item * multi;</span><br><span class="line">multiplier(4, 2);</span><br></pre></td></tr></table></figure><p>multiplier(4, 2) 将返回 8。</p><p>编写带参数的箭头函数</p><p>使用箭头函数的语法重写 myConcat 函数，将 arr2 的内容添加到 arr1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const myConcat = (arr1, arr2) =&gt; arr1.concat(arr2);</span><br><span class="line"></span><br><span class="line">console.log(myConcat([1, 2], [3, 4, 5]));</span><br></pre></td></tr></table></figure><h1 id="用-ES6-编写简洁的函数声明"><a href="#用-ES6-编写简洁的函数声明" class="headerlink" title="用 ES6 编写简洁的函数声明"></a>用 ES6 编写简洁的函数声明</h1><p>在 ES5 中，当我们需要在对象中定义一个函数的时候，必须像这样使用 function 关键字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;Taylor&quot;,</span><br><span class="line">  sayHello: function() &#123;</span><br><span class="line">    return `Hello! My name is $&#123;this.name&#125;.`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用 ES6 的语法在对象中定义函数的时候，可以删除 function 关键词和冒号。 请看以下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;Taylor&quot;,</span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    return `Hello! My name is $&#123;this.name&#125;.`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>用 ES6 编写简洁的函数声明</p><p>使用以上这种简短的语法，重构在 bicycle 对象中的 setGear 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line">const bicycle = &#123;</span><br><span class="line">  gear: 2,</span><br><span class="line">  setGear(newGear) &#123;</span><br><span class="line">    this.gear = newGear;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// Only change code above this line</span><br><span class="line">bicycle.setGear(3);</span><br><span class="line">console.log(bicycle.gear);</span><br></pre></td></tr></table></figure><h1 id="全局作用域和window"><a href="#全局作用域和window" class="headerlink" title="全局作用域和window"></a>全局作用域和window</h1><p>在 JavaScript 中，作用域涉及到变量的作用范围。 在函数外定义的变量具有 全局 作用域。 这意味着，具有全局作用域的变量可以在代码的任何地方被调用。</p><p>未使用 let 或 const 关键字声明的变量会在 global 范围内自动创建。 当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。 你应该总是用 let 或 const 声明你的变量。</p><p><strong>全局作用域与 window：</strong>在 JavaScript 中，如果变量或函数在任何函数体外部定义，则它们属于全局作用域。这意味着它们可以在代码的任何地方被访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const globalVar = &#x27;Hello&#x27;;</span><br><span class="line"></span><br><span class="line">function sayHello() &#123;</span><br><span class="line">    console.log(globalVar); // 可以访问全局变量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello(); // 输出 &quot;Hello&quot;</span><br></pre></td></tr></table></figure><p>window 对象：在浏览器中，全局作用域中定义的所有变量和函数都是 window 对象的属性和方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(window.globalVar); // &quot;Hello&quot;</span><br></pre></td></tr></table></figure><p>全局作用域和window</p><p>使用 let 或 const，在任何函数之外声明一个名为 myGlobal 的全局变量。 并给它一个初始值 10。</p><p>在函数 fun1中，赋值 5 给 oopsGlobal，不使用 var、let 或 const 关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// Declare the myGlobal variable below this line</span><br><span class="line"> let myGlobal=10;</span><br><span class="line"></span><br><span class="line">function fun1() &#123;</span><br><span class="line">  // Assign 5 to oopsGlobal here</span><br><span class="line">  oopsGlobal=5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">function fun2() &#123;</span><br><span class="line">  let output = &quot;&quot;;</span><br><span class="line">  if (typeof myGlobal != &quot;undefined&quot;) &#123;</span><br><span class="line">    output += &quot;myGlobal: &quot; + myGlobal;</span><br><span class="line">  &#125;</span><br><span class="line">  if (typeof oopsGlobal != &quot;undefined&quot;) &#123;</span><br><span class="line">    output += &quot; oopsGlobal: &quot; + oopsGlobal;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="局部作用域和函数"><a href="#局部作用域和函数" class="headerlink" title="局部作用域和函数"></a>局部作用域和函数</h1><p>在一个函数内声明的变量，以及该函数的参数都具有局部（local）作用域。 这意味着它们只在该函数内可见。</p><p>这是在函数 myTest 内声明局部变量 loc 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function myTest() &#123;</span><br><span class="line">  const loc = &quot;foo&quot;;</span><br><span class="line">  console.log(loc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line">console.log(loc);</span><br></pre></td></tr></table></figure><p>myTest() 函数调用将在控制台中显示字符串 foo。 console.log(loc) 行（在 myTest 函数之外）将抛出错误，因为 loc 未在函数之外定义。</p><p>局部作用域和函数</p><p>编辑器有两个 console.log 来帮助您了解正在发生的事情。 检查控制台的代码输出以查看它是如何改变的。 在 myLocalScope 中声明一个本地变量 myVar 并运行测试。</p><p>注意： 控制台仍将显示 ReferenceError: myVar is not defined，但这不会导致测试失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function myLocalScope() &#123;</span><br><span class="line">  // 只修改这一行下面的代码</span><br><span class="line">  const myVar=520;</span><br><span class="line">  console.log(&#x27;inside myLocalScope&#x27;, myVar);</span><br><span class="line">&#125;</span><br><span class="line">myLocalScope();</span><br></pre></td></tr></table></figure><h1 id="创建-JavaScript-对象"><a href="#创建-JavaScript-对象" class="headerlink" title="创建 JavaScript 对象"></a>创建 JavaScript 对象</h1><p>你之前可能听过 object 这个词。</p><p>对象和 arrays 类似，区别在于数组使用索引来访问和修改数据，而对象中的数据是通过 properties 访问的。</p><p>对象非常适合用来存储结构化数据，可以表示真实世界中的物体，比如一只猫。</p><p>这里是一个猫对象的样本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const cat = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Whiskers&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;enemies&quot;: [&quot;Water&quot;, &quot;Dogs&quot;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此示例中，所有属性都存储为字符串，例如 name、legs 和 tails。 然而，你也可以使用数字作为属性。 你甚至可以省略单字字符串属性中的引号，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const anotherObject = &#123;</span><br><span class="line">  make: &quot;Ford&quot;,</span><br><span class="line">  5: &quot;five&quot;,</span><br><span class="line">  &quot;model&quot;: &quot;focus&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然而，如果你的对象有非字符串属性的话，JavaScript 会自动将它们转为字符串。</p><p>创建 JavaScript 对象</p><p>确保对象表示一只名为 myDog 的狗，包含属性 name（字符串）、legs、tails 和 friends。</p><p>你可以随意设置这些对象的属性值，只要 name 是字符串，legs 和 tails 是数字，friends 是数组即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const myDog = &#123;</span><br><span class="line">  // Only change code below this line</span><br><span class="line">  &quot;name&quot;:&quot;abc&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;sss&quot;, &quot;wwww&quot;]</span><br><span class="line">  // Only change code above this line</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h1><p>运算符 &#x3D; 用于给 JavaScript 变量赋值。</p><p>算术运算符 + 用于把值加起来。</p><p>let y&#x3D;5;<br>let z&#x3D;2;<br>let x&#x3D;y+z;<br>在以上语句执行后，x 的值是：7</p><p>JavaScript 算术运算符：</p><p>与&#x2F;或值之间的算术运算。 y&#x3D;5，下面的表格解释了这些算术运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">运算符描述例子X 运算结果Y 运算结果</span><br><span class="line">+加法x=y+275</span><br><span class="line">-减法x=y-235</span><br><span class="line">*乘法x=y*2105</span><br><span class="line">/除法x=y/22.55</span><br><span class="line">%取模（余数）x=y%215</span><br><span class="line">++自增x=++y66</span><br><span class="line">x=y++56</span><br><span class="line">--自减x=--y44</span><br><span class="line">x=y--54</span><br></pre></td></tr></table></figure><p>JavaScript 赋值运算符：</p><p>赋值运算符用于给 JavaScript 变量赋值。</p><p>给定 x&#x3D;10 和 y&#x3D;5，下面的表格解释了赋值运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运算符例子等同于运算结果</span><br><span class="line">=x=yx=5</span><br><span class="line">+=x+=yx=x+yx=15</span><br><span class="line">-=x-=yx=x-yx=5</span><br><span class="line">*=x*=yx=x*yx=50</span><br><span class="line">/=x/=yx=x/yx=2</span><br><span class="line">%=x%=yx=x%yx=0</span><br></pre></td></tr></table></figure><p>用于字符串的 + 运算符：</p><p>+运算符用于把文本值或字符串变量加起来（连接起来）。</p><p>如需把两个或多个字符串变量连接起来，请使用 + 运算符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">txt1=&quot;What a very&quot;;</span><br><span class="line">txt2=&quot;nice day&quot;;</span><br><span class="line">txt3=txt1+txt2;</span><br><span class="line">txt3 运算结果：What a verynice day</span><br></pre></td></tr></table></figure><p>对字符串和数字进行加法运算：</p><p>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串，如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x=5+5;</span><br><span class="line">y=&quot;5&quot;+5;</span><br><span class="line">z=&quot;Hello&quot;+5;</span><br><span class="line">x,y, 和 z 输出结果为：</span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">55</span><br><span class="line">Hello5</span><br></pre></td></tr></table></figure><p>JavaScript 运算符</p><p>在这个挑战中，我们为你提供名词、动词、形容词和副词。 你需要使用合适单词以及我们提供的单词来形成完整的句子。</p><p>你需要使用字符串连接运算符 + 来拼接字符串变量：myNoun、myAdjective、myVerb 和 myAdverb，以构建一个新字符串。 然后，将新字符串赋给 wordBlanks 变量。 你不应该更改分配给变量的单词。</p><p>你还需要考虑字符串中的空格，确保句子的所有单词之间有空格。 结果应该是一个完整的句子。</p><h1 id="JavaScript-比较-和-逻辑运算符"><a href="#JavaScript-比较-和-逻辑运算符" class="headerlink" title="JavaScript 比较 和 逻辑运算符"></a>JavaScript 比较 和 逻辑运算符</h1><p>比较和逻辑运算符用于测试 true 或者 false。</p><p><em><strong>比较运算符：</strong></em></p><p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p><p>x&#x3D;5，下面的表格解释了比较运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">运算符描述比较返回值</span><br><span class="line">==等于x==8false</span><br><span class="line">x==5true</span><br><span class="line">===绝对等于（值和类型均相等）x===&quot;5&quot;false</span><br><span class="line">x===5true</span><br><span class="line">!=不等于x!=8true</span><br><span class="line">!==不绝对等于（值和类型有一个不相等，或两个都不相等）x!==&quot;5&quot;true</span><br><span class="line">x!==5false</span><br><span class="line">&gt;大于x&gt;8false</span><br><span class="line">&lt;小于x&lt;8true</span><br><span class="line">&gt;=大于或等于x&gt;=8false</span><br><span class="line">&lt;=小于或等于x&lt;=8true</span><br></pre></td></tr></table></figure><p>如何使用：</p><p>可以在条件语句中使用比较运算符对值进行比较，然后根据结果来采取行动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (age&lt;18) x=&quot;Too young&quot;;</span><br></pre></td></tr></table></figure><p>您将在本教程的下一节中学习更多有关条件语句的知识。</p><p><em><strong>逻辑运算符：</strong></em></p><p>逻辑运算符用于测定变量或值之间的逻辑。</p><p>给定 x&#x3D;6 以及 y&#x3D;3，下表解释了逻辑运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运算符描述例子</span><br><span class="line">&amp;&amp;and(两边都为true，结果为true；否则为false)(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</span><br><span class="line">||or(其中任何一边为true，结果就为true；两边都)(x==5 || y==5) 为 false</span><br><span class="line">!not(取反操作，true的反为false，false的反为true)!(x==y) 为 true</span><br></pre></td></tr></table></figure><p><em><strong>条件运算符：</strong></em></p><p>条件运算符也称为三元运算符。</p><p>语法是：a ? b : c, a 是条件，当条件返回 true 的时候运行代码 b，当条件返回 false 的时候运行代码 c。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let c = a &gt; b ? &quot;a is greater&quot; : &quot;b is greater or equal&quot;;</span><br></pre></td></tr></table></figure><p>若a大于b，c的值就为a is greater</p><p>否则，c的值就为b is greater or equal</p><p><strong>空值合并运算符（??）：</strong>是一个逻辑运算符，当左侧的操作数为 null 或者 时，返回其右侧操作数，否则返回左侧操作数。</p><p>与逻辑或运算符 || 不同的是，逻辑或运算符中左侧存在’’或0时，会认作假值，则会返回右边的操作数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const foo = null ?? &#x27;default string&#x27;;</span><br><span class="line">console.log(foo);</span><br><span class="line">// 输出: &quot;default string&quot;</span><br><span class="line"></span><br><span class="line">const baz = 0 ?? 42;</span><br><span class="line">console.log(baz);</span><br><span class="line">// 输出: 0</span><br><span class="line"></span><br><span class="line">//当使用逻辑或运算符时，0会当作假值，就会返回右侧值</span><br><span class="line">const sec = 0 || 42;</span><br><span class="line">console.log(sec);</span><br><span class="line">// 输出: 42</span><br></pre></td></tr></table></figure><p>所以 ?? 被称作空值合并运算符，他会防止把一些不为空值的识别为假，防止发生意料之外的行为，而不把’’和0当作空值。</p><p>JavaScript 比较 和 逻辑运算符<br>在 checkEqual 函数中使用三元运算符检查两个数字是否相等。 函数应该返回 Equal 或字符串 Not Equal。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function checkEqual(a, b) &#123;</span><br><span class="line">return(a == b ? &quot;Equal&quot; : &quot;Not Equal&quot;);//开始不通过，因为不用=，要用==</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkEqual(1, 2);</span><br><span class="line">checkEqual(1, 1);</span><br><span class="line">checkEqual(1, -1);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-if…Else-语句"><a href="#JavaScript-if…Else-语句" class="headerlink" title="JavaScript if…Else 语句"></a>JavaScript if…Else 语句</h1><p>条件语句 if…else 用于基于不同的条件来执行不同的动作。</p><p>通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。</p><p>在 JavaScript 中，我们可使用以下条件语句：</p><p>if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码</p><p>if…else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</p><p>if…else if….else 语句- 使用该语句来选择多个代码块之一来执行</p><p>switch 语句 - 使用该语句来选择多个代码块之一来执行</p><p><strong>if 语句：</strong>只有当指定条件为 true 时，该语句才会执行代码。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (condition)</span><br><span class="line">&#123;</span><br><span class="line">    当条件为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请使用小写的 if。使用大写字母（IF）会生成 JavaScript 错误！</p><p>示例：当时间小于 20:00 时，生成问候 “Good day”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (time&lt;20)</span><br><span class="line">&#123;</span><br><span class="line">    x=&quot;Good day&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，在这个语法中，没有 ..else..。您已经告诉浏览器只有在指定条件为 true 时才执行代码。</p><p><strong>if…else 语句：</strong>请使用 if….else 语句在条件为 true 时执行代码，在条件为 false 时执行其他代码。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (condition)</span><br><span class="line">&#123;</span><br><span class="line">    当条件为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    当条件不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：当时间小于 20:00 时，生成问候 “Good day”，否则生成问候 “Good evening”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (time&lt;20)</span><br><span class="line">&#123;</span><br><span class="line">    x=&quot;Good day&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    x=&quot;Good evening&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>if…else if…else 语句：</strong>使用 if….else if…else 语句来选择多个代码块之一来执行。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (condition1)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 1 为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else if (condition2)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 2 为 true 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">  当条件 1 和 条件 2 都不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：如果时间小于 10:00，则生成问候 “Good morning”，如果时间大于 10:00 小于 20:00，则生成问候 “Good day”，否则生成问候 “Good evening”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (time&lt;10)</span><br><span class="line">&#123;</span><br><span class="line">    document.write(&quot;&lt;b&gt;早上好&lt;/b&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if (time&gt;=10 &amp;&amp; time&lt;20)</span><br><span class="line">&#123;</span><br><span class="line">    document.write(&quot;&lt;b&gt;今天好&lt;/b&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    document.write(&quot;&lt;b&gt;晚上好!&lt;/b&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript if…Else 语句<br>请将 if&#x2F;else if 语句串联起来，实现下面的逻辑：</p><p>num &lt; 5 - 返回 Tiny<br>num &lt; 10 - 返回 Small<br>num &lt; 15 - 返回 Medium<br>num &lt; 20 - 返回 Large<br>num &gt;&#x3D; 20 - 返回 Huge</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function testSize(num) &#123;</span><br><span class="line">  // Only change code below this line</span><br><span class="line">if(num&lt;5)</span><br><span class="line">&#123;</span><br><span class="line">  return &quot;Tiny&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  if(num&lt;10)</span><br><span class="line">  &#123;</span><br><span class="line">    return &quot;Small&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  else&#123;</span><br><span class="line">    if(num&lt;15)</span><br><span class="line">    &#123;</span><br><span class="line">      return &quot;Medium&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      if(num&lt;20)</span><br><span class="line">      &#123;</span><br><span class="line">        return &quot;Large&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        return &quot;Huge&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  return &quot;Change Me&quot;;</span><br><span class="line">  // Only change code above this line</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testSize(7);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-switch-语句"><a href="#JavaScript-switch-语句" class="headerlink" title="JavaScript switch 语句"></a>JavaScript switch 语句</h1><p>switch 语句用于基于不同的条件来执行不同的动作。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(n)</span><br><span class="line">&#123;</span><br><span class="line">    case 1:</span><br><span class="line">        执行代码块 1</span><br><span class="line">        break;</span><br><span class="line">    case 2:</span><br><span class="line">        执行代码块 2</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        与 case 1 和 case 2 不同时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工作原理：首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 break 来阻止代码自动地向下一个 case 运行。</p><p>示例：显示今天星期几。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let day = 2;</span><br><span class="line">switch (day) </span><br><span class="line">&#123; </span><br><span class="line">  case 0:x=&quot;今天是星期日&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 1:x=&quot;今天是星期一&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 2:x=&quot;今天是星期二&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 3:x=&quot;今天是星期三&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 4:x=&quot;今天是星期四&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 5:x=&quot;今天是星期五&quot;; </span><br><span class="line">  break; </span><br><span class="line">  case 6:x=&quot;今天是星期六&quot;; </span><br><span class="line">  break; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x 的运行结果：今天是星期二</p><p><strong>default 关键词：</strong>使用 default 关键词来规定匹配不存在时做的事情：</p><p>示例：如果不存在匹配的内容，则会输出默认的消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var day = 3;</span><br><span class="line">switch (day)</span><br><span class="line">&#123;</span><br><span class="line">    case 0:x=&quot;今天是星期天&quot;;</span><br><span class="line">    break;</span><br><span class="line">    case 6:x=&quot;今天是星期六&quot;;</span><br><span class="line">    break;</span><br><span class="line">    default:</span><br><span class="line">    x=&quot;期待周末&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x 的运行结果：期待周末</p><p>在 Switch 语句添加多个相同选项：</p><p>如果你忘了给 switch 的每一条 case 添加 break，那么后续的 case 会一直执行，直到遇见 break 为止。 如果你想为 switch 中的多个不同的输入设置相同的结果，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let result = &quot;&quot;;</span><br><span class="line">switch (val) &#123;</span><br><span class="line">  case 1:</span><br><span class="line">  case 2:</span><br><span class="line">  case 3:</span><br><span class="line">    result = &quot;1, 2, or 3&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 4:</span><br><span class="line">    result = &quot;4 alone&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，1、2、3 都会有相同的结果。</p><p>JavaScript switch 语句</p><p>请写一个 switch 语句，按如下条件设置 answer ：</p><p>1-3 - Low<br>4-6 - Mid<br>7-9 - High</p><p>提示： 你的 case 应写全范围中的每一个数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">function sequentialSizes(val) &#123;</span><br><span class="line">  let answer = &quot;&quot;;</span><br><span class="line">  // Only change code below this line</span><br><span class="line">  switch (val) &#123;</span><br><span class="line">  case 1:</span><br><span class="line">   answer = &quot;Low&quot;;</span><br><span class="line">   break;</span><br><span class="line">  case 2:</span><br><span class="line">   answer = &quot;Low&quot;;</span><br><span class="line">   break;</span><br><span class="line">  case 3:</span><br><span class="line">   answer = &quot;Low&quot;;</span><br><span class="line">   break;</span><br><span class="line">    </span><br><span class="line">  case 4:</span><br><span class="line">    answer = &quot;Mid&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 5:</span><br><span class="line">    answer = &quot;Mid&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 6:</span><br><span class="line">    answer = &quot;Mid&quot;;</span><br><span class="line">    break;   </span><br><span class="line"></span><br><span class="line">  case 7:</span><br><span class="line">    answer = &quot;High&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 8:</span><br><span class="line">    answer = &quot;High&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case 9:</span><br><span class="line">   answer = &quot;High&quot;;</span><br><span class="line">    break;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // Only change code above this line</span><br><span class="line">  return answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sequentialSizes(1);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-for-循环"><a href="#JavaScript-for-循环" class="headerlink" title="JavaScript for 循环"></a>JavaScript for 循环</h1><p>循环可以将代码块执行指定的次数。</p><p><strong>JavaScript 循环：</strong>如果您希望一遍又一遍地运行相同的代码，并且每次的值都不同，那么使用循环是很方便的。</p><p>我们可以这样输出数组的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//一般写法</span><br><span class="line">console.log(cars[0]); </span><br><span class="line">console.log(cars[1]); </span><br><span class="line">console.log(cars[2]); </span><br><span class="line">console.log(cars[3]); </span><br><span class="line">console.log(cars[4]); </span><br><span class="line">console.log(cars[5]);</span><br><span class="line">//使用for循环</span><br><span class="line">for (let i=0;i&lt;cars.length;i++)</span><br><span class="line">&#123; </span><br><span class="line">    console.log(cars[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同类型的循环：</p><p>JavaScript 支持不同类型的循环：</p><p>for - 循环代码块一定的次数</p><p>for&#x2F;in - 循环遍历对象的属性</p><p>while - 当指定的条件为 true 时循环指定的代码块</p><p>do&#x2F;while - 同样当指定的条件为 true 时循环指定的代码块1</p><p><strong>For 循环：</strong>for 循环是您在希望创建循环时常会用到的工具。</p><p>下面是 for 循环的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (语句 1; 语句 2; 语句 3)</span><br><span class="line">&#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br><span class="line">语句 1 （代码块）开始前执行</span><br><span class="line"></span><br><span class="line">语句 2 定义运行循环（代码块）的条件</span><br><span class="line"></span><br><span class="line">语句 3 在循环（代码块）已被执行之后执行</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (let i=0; i&lt;5; i++)</span><br><span class="line">&#123;</span><br><span class="line">      x=x + &quot;该数字为 &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 1：</p><p>通常我们会使用语句 1 初始化循环中所用的变量 (let i&#x3D;0)。</p><p>语句 1 是可选的，也就是说不使用语句 1 也可以。</p><p>您可以在语句 1 中初始化任意（或者多个）值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (let i=0,len=cars.length; i&lt;len; i++)</span><br><span class="line">&#123; </span><br><span class="line">    console.log(cars[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时您还可以省略语句 1（比如在循环开始前已经设置了值时）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let i=2,len=cars.length;</span><br><span class="line">for (; i&lt;len; i++)</span><br><span class="line">&#123; </span><br><span class="line">    console.log(cars[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 2：</p><p>通常语句 2 用于评估初始变量的条件。</p><p>语句 2 同样是可选的。</p><p>如果语句 2 返回 true，则循环再次开始，如果返回 false，则循环将结束。</p><p>注意：如果您省略了语句 2，那么必须在循环内提供 break。否则循环就无法停下来。这样有可能令浏览器崩溃。请在本教程稍后的章节阅读有关 break 的内容。</p><p>语句 3：</p><p>通常语句 3 会增加初始变量的值。</p><p>语句 3 也是可选的。</p><p>语句 3 有多种用法。增量可以是负数 (i–)，或者更大 (i&#x3D;i+15)。</p><p>语句 3 也可以省略（比如当循环内部有相应的代码时）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var i=0,len=cars.length;</span><br><span class="line">for (; i&lt;len; )</span><br><span class="line">&#123; </span><br><span class="line">    document.write(cars[i] + &quot;&lt;br&gt;&quot;);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript for 循环</p><p>声明并初始化一个变量 total 值为 0。 使用 for 循环，使得 total 的值为 myArr 的数组中的每个元素的值的总和。 注：使用myArr.length可以获取到数组的长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myArr = [2, 3, 4, 5, 6];</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line"></span><br><span class="line">let total = 0;</span><br><span class="line">for (let i = 0,len = myArr.length; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">    total = total+myArr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="JavaScript-while-循环"><a href="#JavaScript-while-循环" class="headerlink" title="JavaScript while 循环"></a>JavaScript while 循环</h1><p>只要指定条件为 true，循环就可以一直执行代码块。</p><p><strong>while 循环：</strong>while 循环会在指定条件为真时循环执行代码块。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：本例中的循环将继续运行，只要变量 i 小于 5：i 等于 5 时，结束循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (i&lt;5)</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>do&#x2F;while 循环：</strong>do&#x2F;while 循环是 while 循环的变体。该循环会在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//do/while循环，实现执行一段代码，再进行判断</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">while (条件);</span><br></pre></td></tr></table></figure><p>示例：下面的例子使用 do&#x2F;while 循环。该循环至少会执行一次，即使条件为 false 它也会执行一次，因为代码块会在条件被测试前执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">while (i&lt;5);</span><br></pre></td></tr></table></figure><p>JavaScript while 循环</p><p>通过一个 while 循环，把从 5 到 0（包括 5 和 0） 的值添加到 myArray 中。 注：往myArray中添加值，可以使用push</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myArray = [];</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">let i=5;</span><br><span class="line">while(i&gt;=0)</span><br><span class="line">&#123;</span><br><span class="line">  myArray.push(i);</span><br><span class="line">  i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-break-和-continue-语句"><a href="#JavaScript-break-和-continue-语句" class="headerlink" title="JavaScript break 和 continue 语句"></a>JavaScript break 和 continue 语句</h1><p>break 语句用于跳出循环。</p><p>continue 用于跳过循环中的一个迭代。</p><p>break 语句：</p><p>我们已经在本教程之前的章节中见到过 break 语句。它用于跳出 switch() 语句。</p><p>break 语句可用于跳出循环。</p><p>break 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for (i=0;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3)</span><br><span class="line">    &#123;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//该循环执行到第3次就结束循环，所以该循环只执行了三次</span><br></pre></td></tr></table></figure><p><strong>continue 语句：</strong>continue 语句中断当前的循环中的一次迭代，然后继续循环下一个迭代。 以下例子在值为 3 时，直接跳过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (i=0;i&lt;=10;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3) continue;</span><br><span class="line">    x=x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//该循环执行到i 等于 3 时，就会跳过这次循环，所以循环总共执行了10次</span><br></pre></td></tr></table></figure><p>JavaScript break 和 continue 语句</p><p>使用任意循环语句，把 0 到 5 中除去 3 后的值添加到 myArray 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myArray = [];</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">for (let i=0;i&lt;=5;i++)</span><br><span class="line">&#123;</span><br><span class="line">    if (i==3) continue;</span><br><span class="line">    myArray.push(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复合赋值之"><a href="#复合赋值之" class="headerlink" title="复合赋值之 &#x2F;&#x3D;"></a>复合赋值之 &#x2F;&#x3D;</h1><p>&#x2F;&#x3D; 操作符是让变量与另一个数相除并赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myVar = myVar / 5;</span><br></pre></td></tr></table></figure><p>将 myVar 除以 5。 等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myVar /= 5;</span><br></pre></td></tr></table></figure><p>复合赋值之 &#x2F;&#x3D;</p><p>使用 &#x2F;&#x3D; 操作符对 a，b 和 c 实现相除赋值操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let a = 48;</span><br><span class="line">let b = 108;</span><br><span class="line">let c = 33;</span><br><span class="line"></span><br><span class="line">// 只修改这一行下面的代码</span><br><span class="line">a /= 12;</span><br><span class="line">b /= 4;</span><br><span class="line">c /= 11;</span><br></pre></td></tr></table></figure><h1 id="通过点号表示法访问对象属性-1"><a href="#通过点号表示法访问对象属性-1" class="headerlink" title="通过点号表示法访问对象属性(1)"></a>通过点号表示法访问对象属性(1)</h1><p>和访问数组类似，访问对象属性有两种方式：点号表示法（.）和方括号表示法（[]）。</p><p>如果我们已经提前知道要访问的属性名，使用点号表示法是最方便的。</p><p>这里是一个用点符号（.）读取对象属性的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myObj = &#123;</span><br><span class="line">  prop1: &quot;val1&quot;,</span><br><span class="line">  prop2: &quot;val2&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const prop1val = myObj.prop1;</span><br><span class="line">const prop2val = myObj.prop2;</span><br></pre></td></tr></table></figure><p>prop1val 的值将为字符串 val1，并且prop2val 的值将为字符串 val2。</p><p><strong>可选链运算符（?.）：</strong>可选链运算符（?.）允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 运算符的功能类似于 . 链式运算符，不同之处在于，在引用为空 (nullish ) (null 或者 ) 的情况下不会引起错误，该表达式短路返回值是 。与函数调用一起使用时，如果给定的函数不存在，则返回 。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const adventurer = &#123;</span><br><span class="line">  name: &#x27;Alice&#x27;,</span><br><span class="line">  cat: &#123;</span><br><span class="line">    name: &#x27;Dinah&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const dogName = adventurer.dog?.name;</span><br><span class="line">console.log(dogName);</span><br><span class="line">// 输出: </span><br><span class="line"></span><br><span class="line">//函数调用时如果被调用的方法不存在，使用可选链可以使表达式自动返回而不是抛出一个异常。</span><br><span class="line">console.log(adventurer.someNonExistentMethod?.());</span><br><span class="line">// 输出: </span><br></pre></td></tr></table></figure><p>通过点号表示法访问对象属性(1)</p><p>使用点号读取 testObj 的属性值。 将变量 hatValue 的值设置为该对象的 hat 属性的值，并将变量 shirtValue 的值设置为该对象的 shirt 属性的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const testObj = &#123;</span><br><span class="line">  &quot;hat&quot;: &quot;ballcap&quot;,</span><br><span class="line">  &quot;shirt&quot;: &quot;jersey&quot;,</span><br><span class="line">  &quot;shoes&quot;: &quot;cleats&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const hatValue = testObj.hat;      // Change this line</span><br><span class="line">const shirtValue = testObj.shirt;    // Change this line</span><br><span class="line">const undefineValue = testObj.first?.second    // Change this line</span><br></pre></td></tr></table></figure><h1 id="使用方括号表示法访问对象属性"><a href="#使用方括号表示法访问对象属性" class="headerlink" title="使用方括号表示法访问对象属性"></a>使用方括号表示法访问对象属性</h1><p>访问对象属性的第二种方式是方括号表示法（[]）。 如果你想访问的属性名中包含空格，就必须使用方括号表示法来获取它的属性值。</p><p>当然，如果属性名不包含空格，也可以使用方括号表示法。</p><p>这是一个使用方括号表示法读取对象属性的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const myObj = &#123;</span><br><span class="line">  &quot;Space Name&quot;: &quot;Kirk&quot;,</span><br><span class="line">  &quot;More Space&quot;: &quot;Spock&quot;,</span><br><span class="line">  &quot;NoSpace&quot;: &quot;USS Enterprise&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObj[&quot;Space Name&quot;];</span><br><span class="line">myObj[&#x27;More Space&#x27;];</span><br><span class="line">myObj[&quot;NoSpace&quot;];</span><br></pre></td></tr></table></figure><p>myObj[“Space Name”] 将会是字符串 Kirk，myObj[‘More Space’] 将会是字符串 Spock，并且myObj[“NoSpace”] 将会是字符串 USS Enterprise。</p><p>注意，如果属性名中包含空格，就必须使用引号（单引号或双引号）将它们包裹起来。</p><p>使用方括号表示法访问对象属性</p><p>使用方括号读取 testObj 中 an entree 和 the drink 的属性值，并分别将它们赋值给 entreeValue 和 drinkValue。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const testObj = &#123;</span><br><span class="line">  &quot;an entree&quot;: &quot;hamburger&quot;,</span><br><span class="line">  &quot;my side&quot;: &quot;veggies&quot;,</span><br><span class="line">  &quot;the drink&quot;: &quot;water&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const entreeValue = testObj[&quot;an entree&quot;];   // Change this line</span><br><span class="line">const drinkValue = testObj[&quot;the drink&quot;];    // Change this line</span><br></pre></td></tr></table></figure><h1 id="通过变量访问对象属性"><a href="#通过变量访问对象属性" class="headerlink" title="通过变量访问对象属性"></a>通过变量访问对象属性</h1><p>对对象上使用方括号表示法，还可以访问对象上作为变量值存储的属性。 当你需要遍历对象的所有属性，或者根据一个变量的值查找对应的属性值时，这种写法尤其适用。</p><p>以下是一个使用变量来访问属性的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const dogs = &#123;</span><br><span class="line">  Fido: &quot;Mutt&quot;,</span><br><span class="line">  Hunter: &quot;Doberman&quot;,</span><br><span class="line">  Snoopie: &quot;Beagle&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const myDog = &quot;Hunter&quot;;</span><br><span class="line">const myBreed = dogs[myDog];</span><br><span class="line">console.log(myBreed);</span><br></pre></td></tr></table></figure><p>字符串 Doberman 将会出现在控制台中。</p><p>请注意，我们在使用变量名访问属性时，不要使用引号引起来，因为我们使用的是 值，而不是 属性名。</p><p>通过变量访问对象属性</p><p>将 playerNumber 变量设置为 16。 然后，使用该变量查找播放器的名称并将其分配给 player。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const testObj = &#123;</span><br><span class="line">  12: &quot;Namath&quot;,</span><br><span class="line">  16: &quot;Montana&quot;,</span><br><span class="line">  19: &quot;Unitas&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const playerNumber = 16;  // Change this line</span><br><span class="line">const player = testObj[playerNumber];   // Change this line</span><br></pre></td></tr></table></figure><h1 id="更新对象属性"><a href="#更新对象属性" class="headerlink" title="更新对象属性"></a>更新对象属性</h1><p>在你创建了 JavaScript 对象后，你可以随时更新它的属性，就像更新任何其他变量那样。 你可以使用点或中括号操作符来更新。</p><p>举个例子，让我们看看 ourDog：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const ourDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>既然他是一个特别愉快的狗，让我们将他的名字更改为字符串 Happy Camper。 这有两种方式来更新对象的 name 属性： ourDog.name &#x3D; “Happy Camper”; 或 ourDog[“name”] &#x3D; “Happy Camper”;。更新后，ourDog.name 的值就不再是 Camper，而是 Happy Camper。</p><p>更新对象属性</p><p>更新 myDog 对象的 name 属性。 让它的名字从 Coder 变成 Happy Coder。 你可以使用点号表示法或方括号表示法来完成此挑战。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Coder&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;freeCodeCamp Campers&quot;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">myDog.name = &quot;Happy Coder&quot;;</span><br></pre></td></tr></table></figure><h1 id="给-JavaScript-对象添加新属性"><a href="#给-JavaScript-对象添加新属性" class="headerlink" title="给 JavaScript 对象添加新属性"></a>给 JavaScript 对象添加新属性</h1><p>你也可以像更改属性一样给 JavaScript 对象添加属性。</p><p>这里展示了如何给 ourDog 添加一个属性 bark：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ourDog.bark = &quot;bow-wow&quot;;</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">ourDog[&quot;bark&quot;] = &quot;bow-wow&quot;;</span><br></pre></td></tr></table></figure><p>现在，当我们执行 ourDog.bark 时，就能得到他的叫声，bow-wow。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const ourDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ourDog.bark = &quot;bow-wow&quot;;</span><br></pre></td></tr></table></figure><p>给 JavaScript 对象添加新属性</p><p>给 myDog 添加一个属性 bark ，并将其设置为狗的声音，比如 “woof“。 可以使用点操作符或者中括号操作符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const myDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Happy Coder&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;freeCodeCamp Campers&quot;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myDog.bark=&quot;woof&quot;;</span><br></pre></td></tr></table></figure><h1 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h1><p>我们同样可以删除对象的属性，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete ourDog.bark;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const ourDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;],</span><br><span class="line">  &quot;bark&quot;: &quot;bow-wow&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">delete ourDog.bark;</span><br></pre></td></tr></table></figure><p>在上面代码的最后一行中，ourDog 是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Camper&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;everything!&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除对象的属性</p><p>删除 myDog 对象的 tails 属性。 可以使用点操作符或者中括号操作符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const myDog = &#123;</span><br><span class="line">  &quot;name&quot;: &quot;Happy Coder&quot;,</span><br><span class="line">  &quot;legs&quot;: 4,</span><br><span class="line">  &quot;tails&quot;: 1,</span><br><span class="line">  &quot;friends&quot;: [&quot;freeCodeCamp Campers&quot;],</span><br><span class="line">  &quot;bark&quot;: &quot;woof&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">delete myDog.tails;</span><br></pre></td></tr></table></figure><h1 id="操作复杂对象"><a href="#操作复杂对象" class="headerlink" title="操作复杂对象"></a>操作复杂对象</h1><p>有时你可能希望将数据存储在一个灵活的数据结构（Data Structure）中。 JavaScript 对象是一种灵活的数据结构。 它可以储存字符串（strings）、数字（numbers）、布尔值（booleans）、数组（arrays）、函数（functions）和对象（objects）以及这些值的任意组合。</p><p>这是一个复杂数据结构的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const ourMusic = [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;artist&quot;: &quot;Daft Punk&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Homework&quot;,</span><br><span class="line">    &quot;release_year&quot;: 1997,</span><br><span class="line">    &quot;formats&quot;: [ </span><br><span class="line">      &quot;CD&quot;, </span><br><span class="line">      &quot;Cassette&quot;, </span><br><span class="line">      &quot;LP&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gold&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这是一个包含一个对象的数组。 该对象有关于专辑的各种元数据（metadata）。 它也有一个嵌套的 formats 数组。 可以将专辑添加到顶级数组来增加更多的专辑记录。 对象将数据以一种键 - 值对的形式保存。 在上面的示例中，”artist”: “Daft Punk” 有一个键为 artist 值为 Daft Punk 的属性。</p><p><strong>提示：</strong>数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。</p><p>操作复杂对象</p><p>添加一个新专辑到 myMusic 数组。 添加 artist 和 title 字符串，release_year 数字和 formats 字符串数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const myMusic = [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;artist&quot;: &quot;Billy Joel&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Piano Man&quot;,</span><br><span class="line">    &quot;release_year&quot;: 1973,</span><br><span class="line">    &quot;formats&quot;: [</span><br><span class="line">      &quot;CD&quot;,</span><br><span class="line">      &quot;8T&quot;,</span><br><span class="line">      &quot;LP&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gold&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    &quot;artist&quot;: &quot;Billy Joel 2&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;Piano Man 2&quot;,</span><br><span class="line">    &quot;release_year&quot;: 1974,</span><br><span class="line">    &quot;formats&quot;: [</span><br><span class="line">      &quot;CD2&quot;,</span><br><span class="line">      &quot;8T2&quot;,</span><br><span class="line">      &quot;LP2&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;gold&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="访问嵌套对象"><a href="#访问嵌套对象" class="headerlink" title="访问嵌套对象"></a>访问嵌套对象</h1><p>我们可以通过连续使用点号表示法和方括号表示法来访问对象的嵌套属性。</p><p>这是一个嵌套对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const ourStorage = &#123;</span><br><span class="line">  &quot;desk&quot;: &#123;</span><br><span class="line">    &quot;drawer&quot;: &quot;stapler&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;cabinet&quot;: &#123;</span><br><span class="line">    &quot;top drawer&quot;: &#123; </span><br><span class="line">      &quot;folder1&quot;: &quot;a file&quot;,</span><br><span class="line">      &quot;folder2&quot;: &quot;secrets&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;bottom drawer&quot;: &quot;soda&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ourStorage.cabinet[&quot;top drawer&quot;].folder2;</span><br><span class="line">ourStorage.desk.drawer;</span><br></pre></td></tr></table></figure><p>ourStorage.cabinet[“top drawer”].folder2 将会是字符串 secrets，并且 ourStorage.desk.drawer 将会是字符串 stapler。</p><p>访问嵌套对象</p><p>访问 myStorage 对象并将 glove box 属性的内容赋值给 gloveBoxContents 变量。 在可能的情况下，对所有的属性使用点号，否则使用方括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const myStorage = &#123;</span><br><span class="line">  &quot;car&quot;: &#123;</span><br><span class="line">    &quot;inside&quot;: &#123;</span><br><span class="line">      &quot;glove box&quot;: &quot;maps&quot;,</span><br><span class="line">      &quot;passenger seat&quot;: &quot;crumbs&quot;</span><br><span class="line">     &#125;,</span><br><span class="line">    &quot;outside&quot;: &#123;</span><br><span class="line">      &quot;trunk&quot;: &quot;jack&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const gloveBoxContents = myStorage.car.inside[&quot;glove box&quot;];</span><br></pre></td></tr></table></figure><h1 id="记录集合"><a href="#记录集合" class="headerlink" title="记录集合"></a>记录集合</h1><p>你将创建一个帮助维护音乐专辑集的函数。 这个集合是一个包含多个相册的对象，这些相册也是对象。 每张专辑在集合中以唯一的 id 作为属性名来表示。 在每个专辑对象中，有各种描述专辑信息的属性。 并非所有专辑都有完整的信息。</p><p>updateRecords 函数有 4 个参数，即以下参数：</p><p>records - 一个包含多个专辑的对象</p><p>id - 一个数字，代表 records 对象中特定的专辑</p><p>prop - 一个字符串，代表相册属性名称</p><p>value - 一个字符串，包含用来更新相册属性的信息</p><p>使用下面的规则完成函数来修改传递给函数的对象。</p><p>你的函数必须始终返回整个 records 对象。</p><p>如果 value 是空字符串，从专辑里删除指定的 prop。</p><p>如果 prop 不是 tracks，并且 value 不是一个空字符串，将 value 赋给那个专辑的 prop。</p><p>如果 prop 是 tracks 并且 value 不是一个空字符串，你需要更新专辑的 tracks 数组。</p><p> 首先，如果专辑没有 tracks 属性，赋予它一个空数组。 然后添加 value 作为专辑的 tracks 数组的最后一个项目。</p><p>注意： 将 recordCollection 对象的副本用于测试。 你不应该直接修改 recordCollection 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// Setup</span><br><span class="line">const recordCollection = &#123;</span><br><span class="line">  2548: &#123;</span><br><span class="line">    albumTitle: &#x27;Slippery When Wet&#x27;,</span><br><span class="line">    artist: &#x27;Bon Jovi&#x27;,</span><br><span class="line">    tracks: [&#x27;Let It Rock&#x27;, &#x27;You Give Love a Bad Name&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  2468: &#123;</span><br><span class="line">    albumTitle: &#x27;1999&#x27;,</span><br><span class="line">    artist: &#x27;Prince&#x27;,</span><br><span class="line">    tracks: [&#x27;1999&#x27;, &#x27;Little Red Corvette&#x27;]</span><br><span class="line">  &#125;,</span><br><span class="line">  1245: &#123;</span><br><span class="line">    artist: &#x27;Robert Palmer&#x27;,</span><br><span class="line">    tracks: []</span><br><span class="line">  &#125;,</span><br><span class="line">  5439: &#123;</span><br><span class="line">    albumTitle: &#x27;ABBA Gold&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">function updateRecords(records, id, prop, value) &#123;</span><br><span class="line">  if(value==&quot;&quot;)&#123;</span><br><span class="line">  delete records[id][prop];</span><br><span class="line">&#125;else if(prop!=&quot;tracks&quot;&amp;&amp;value!=&quot;&quot;)&#123;</span><br><span class="line">    records[id][prop]=value;</span><br><span class="line">&#125;else if(prop==&quot;tracks&quot;&amp;&amp;value!=&quot;&quot;)&#123;</span><br><span class="line">  if(records[id].hasOwnProperty(&quot;tracks&quot;)==false)&#123;</span><br><span class="line">    records[id][prop]=[];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  records[id][prop].push(value);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  return records;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateRecords(recordCollection, 5439, &#x27;artist&#x27;, &#x27;ABBA&#x27;);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-使用解构赋值操作对象"><a href="#JavaScript-使用解构赋值操作对象" class="headerlink" title="JavaScript 使用解构赋值操作对象"></a>JavaScript 使用解构赋值操作对象</h1><p>使用解构赋值来获取对象的值：</p><p>解构赋值是 ES6 引入的新语法，用来从数组和对象中提取值，并优雅地对变量进行赋值。</p><p>有如下 ES5 代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123; name: &#x27;John Doe&#x27;, age: 34 &#125;;</span><br><span class="line"></span><br><span class="line">const name = user.name;</span><br><span class="line">const age = user.age;</span><br></pre></td></tr></table></figure><p>name 的值应该是字符串 John Doe， age 的值应该是数字 34。</p><p>下面是使用 ES6 解构赋值语句，实现相同效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; name, age &#125; = user;</span><br></pre></td></tr></table></figure><p>同样，name 的值应该是字符串 John Doe， age 的值应该是数字 34。</p><p>在这里，自动创建 name 和 age 变量，并将 user 对象相应属性的值赋值给它们。 这个方法简洁多了。</p><p>你可以从对象中提取尽可能多或很少的值。</p><p>使用解构赋值从对象中分配变量：</p><p>可以给解构的值赋予一个新的变量名， 通过在赋值的时候将新的变量名放在冒号后面来实现。</p><p>还是以上个例子的对象来举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123; name: &#x27;John Doe&#x27;, age: 34 &#125;;</span><br></pre></td></tr></table></figure><p>这是指定新的变量名的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; name: userName, age: userAge &#125; = user;</span><br></pre></td></tr></table></figure><p>你可以这么理解这段代码：获取 user.name 的值，将它赋给一个新的变量 userName，等等。 userName 的值将是字符串 John Doe，userAge 的值将是数字 34。</p><p>使用解构赋值从嵌套对象中分配变量：</p><p>你可以使用前两节课程中相同的原则来解构嵌套对象中的值。</p><p>使用与前面的例子中类似的对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const user = &#123;</span><br><span class="line">  johnDoe: &#123; </span><br><span class="line">    age: 34,</span><br><span class="line">    email: &#x27;johnDoe@freeCodeCamp.com&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是解构对象的属性值赋值给具有相同名字的变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; johnDoe: &#123; age, email &#125;&#125; = user;</span><br></pre></td></tr></table></figure><p>这是将对象的属性值赋值给具有不同名字的变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; johnDoe: &#123; age: userAge, email: userEmail &#125;&#125; = user;</span><br></pre></td></tr></table></figure><p>JavaScript 使用解构赋值操作对象</p><p>将两个赋值语句替换成等价的解构赋值。 lowToday 和 highToday 应该为 LOCAL_FORECAST 中 today.low 和 today.high 的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const LOCAL_FORECAST = &#123;</span><br><span class="line">  yesterday: &#123; low: 61, high: 75 &#125;,</span><br><span class="line">  today: &#123; low: 64, high: 77 &#125;,</span><br><span class="line">  tomorrow: &#123; low: 68, high: 80 &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const &#123;today:&#123;low:lowToday,high:highToday&#125;&#125;=LOCAL_FORECAST</span><br><span class="line"></span><br><span class="line">// Only change code above this line</span><br></pre></td></tr></table></figure><h1 id="使用解构赋值从数组中分配变量"><a href="#使用解构赋值从数组中分配变量" class="headerlink" title="使用解构赋值从数组中分配变量"></a>使用解构赋值从数组中分配变量</h1><p>在 ES6 里面，解构数组可以如同解构对象一样简单。</p><p>与数组解构不同，数组的扩展运算会将数组里的所有内容分解成一个由逗号分隔的列表。 所以，你不能选择哪个元素来给变量赋值。</p><p>而对数组进行解构却可以让我们做到这一点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const [a, b] = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(a, b);</span><br></pre></td></tr></table></figure><p>控制台将显示 a 和 b 的值为 1, 2。</p><p>数组的第一个值被赋值给变量 a，数组的第二个值被赋值给变量 b。 我们甚至能在数组解构中使用逗号分隔符，来获取任意一个想要的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const [a, b,,, c] = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.log(a, b, c);</span><br></pre></td></tr></table></figure><p>控制台将显示 a、b 和 c 的值为 1, 2, 5。</p><p>使用解构赋值从数组中分配变量</p><p>使用数组解构来交换变量 a 与 b 的值，使 a 接收 b 的值，而 b 接收 a 的值。 提示：将a和b组成一个数组，然后解构赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a = 8, b = 6;</span><br><span class="line">// Only change code below this line</span><br><span class="line"> [a,b]=[b,a];</span><br></pre></td></tr></table></figure><h1 id="通过-rest-参数解构"><a href="#通过-rest-参数解构" class="headerlink" title="通过 rest 参数解构"></a>通过 rest 参数解构</h1><p>在解构数组的某些情况下，我们可能希望将剩下的元素放进另一个数组里面。</p><p>以下代码的结果与使用 Array.prototype.slice() 类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];</span><br><span class="line">console.log(a, b);</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure><p>控制台将显示 1, 2 和 [3, 4, 5, 7]。</p><p>变量 a 和 b 分别接收数组的第一个和第二个值。 之后，因为 rest 语法，arr 以数组形式接收了剩余的值。 rest 参数只能对数组列表最后的元素起作用。 这意味着你不能使用 rest 语法来省略原数组最后一个元素、截取中间的元素作为子数组。</p><p>通过 rest 参数解构</p><p>使用一个带有 rest 语法的解构赋值来模拟 Array.prototype.slice() 的行为。 removeFirstTwo() 应该返回原始数组 list 的子数组，前两个元素被省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function removeFirstTwo(list) &#123;</span><br><span class="line">  const [,, ...arr] = list;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</span><br><span class="line">const sourceWithoutFirstTwo = removeFirstTwo(source);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-解构赋值在函数参数中的基本用法"><a href="#JavaScript-解构赋值在函数参数中的基本用法" class="headerlink" title="JavaScript 解构赋值在函数参数中的基本用法"></a>JavaScript 解构赋值在函数参数中的基本用法</h1><p>解构赋值在函数参数中的基本用法：</p><p>在某些情况下，你可以在函数的参数里直接解构对象。</p><p>请看以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const profileUpdate = (profileData) =&gt; &#123;</span><br><span class="line">  const &#123; name, age, nationality, location &#125; = profileData;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的操作解构了传给函数的对象。 这样的操作也可以直接在参数里完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const profileUpdate = (&#123; name, age, nationality, location &#125;) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 profileData 被传递到上面的函数时，从函数参数中解构出值以在函数内使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用数组解构赋值作为函数参数</span><br><span class="line">function printCoordinates([x, y]) &#123;</span><br><span class="line">    console.log(`Coordinates: ($&#123;x&#125;, $&#123;y&#125;)`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const point = [3, 7];</span><br><span class="line">printCoordinates(point); // 输出 &quot;Coordinates: (3, 7)&quot;</span><br></pre></td></tr></table></figure><p>默认值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 使用数组解构赋值和默认值作为函数参数</span><br><span class="line">function greetUser([name = &#x27;Guest&#x27;]) &#123;</span><br><span class="line">    console.log(`Hello, $&#123;name&#125;!`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetUser([]); // 输出 &quot;Hello, Guest!&quot;</span><br><span class="line">// 使用对象解构赋值和默认值作为函数参数</span><br><span class="line">function greetPerson(&#123; name = &#x27;Guest&#x27;, age = 18 &#125;) &#123;</span><br><span class="line">    console.log(`Hello, $&#123;name&#125;! You are $&#123;age&#125; years old.`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetPerson(&#123;&#125;); // 输出 &quot;Hello, Guest! You are 18 years old.&quot;</span><br></pre></td></tr></table></figure><p>剩余操作符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 使用对象解构赋值和剩余操作符作为函数参数</span><br><span class="line">function printDetails(&#123; name, ...rest &#125;) &#123;</span><br><span class="line">    console.log(`Name: $&#123;name&#125;`);</span><br><span class="line">    console.log(&#x27;Additional details:&#x27;);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27; &#125;;</span><br><span class="line">printDetails(person);</span><br><span class="line">// 输出</span><br><span class="line">// Name: John</span><br><span class="line">// Additional details:</span><br><span class="line">// &#123; age: 30, city: &#x27;New York&#x27; &#125;</span><br></pre></td></tr></table></figure><p>JavaScript 解构赋值在函数参数中的基本用法</p><p>对 half 的参数进行解构赋值，仅将 max 与 min 的值传进函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const stats = &#123;</span><br><span class="line">  max: 56.78,</span><br><span class="line">  standard_deviation: 4.34,</span><br><span class="line">  median: 34.54,</span><br><span class="line">  mode: 23.87,</span><br><span class="line">  min: -0.75,</span><br><span class="line">  average: 35.85</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const half = (arr) =&gt; (arr.max + arr.min) / 2.0; </span><br><span class="line">//const half = (&#123;max,min&#125;) =&gt; (max + min) / 2.0; </span><br><span class="line"></span><br><span class="line">// Only change code above this line</span><br></pre></td></tr></table></figure><h1 id="JavaScript-深拷贝与浅拷贝"><a href="#JavaScript-深拷贝与浅拷贝" class="headerlink" title="JavaScript 深拷贝与浅拷贝"></a>JavaScript 深拷贝与浅拷贝</h1><p>在 JavaScript 中，深拷贝（Deep Copy）和浅拷贝（Shallow Copy）是常用的两种对象复制方式，它们在复制对象时有着不同的行为。</p><p>浅拷贝是指将一个值复制给一个新对象时，新对象的属性值是原始对象的引用，而不是原始对象的副本。因此，新对象与原始对象共享同一个引用类型的属性。</p><p>深拷贝是指将一个值复制给一个新对象时，新对象的属性值是原始对象属性的副本，而不是引用。因此，新对象与原始对象相互独立，修改一个对象不会影响另一个对象。</p><p>那么，哪些复制行为是浅拷贝，哪些赋值行为是深拷贝呢？以下是几种拷贝方式：</p><p>直接赋值：</p><p>在 JavaScript 中，直接赋值是一种浅拷贝的方式。这意味着对于原始类型数据，直接赋值会创建一个值的副本，而对于引用类型数据，直接赋值会创建一个新的引用，但是新旧引用指向的是同一个对象。因此，原始类型数据是浅拷贝，而引用类型数据也是浅拷贝。</p><p>原始数据类型：包括number、string、boolean、null 和 等。直接赋值会创建一个新的值的副本，修改副本不会影响原始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a = 10;</span><br><span class="line">let b = a;</span><br><span class="line">b = 20;</span><br><span class="line">console.log(a); // 输出 10，原始值不受影响</span><br></pre></td></tr></table></figure><p>引用类型数据：包括对象Object、数组Array、函数Function等。直接赋值会创建一个新的引用，但是新旧引用指向的是同一个对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let data1 = &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:21&#125;</span><br><span class="line">let data2 = data1</span><br><span class="line"></span><br><span class="line">data2.name = &quot;Jack&quot;</span><br><span class="line"></span><br><span class="line">//改变data2，data1的数据也会相应改变</span><br><span class="line">console.log(data1)</span><br><span class="line">console.log(data2)</span><br><span class="line">//两者输出相同</span><br></pre></td></tr></table></figure><p><strong>浅拷贝的实现方式：</strong>浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用(地址)，所以改变新对象，旧对象也会改变，因为新旧对象共享一块内存。</p><p>通过 Object.assign() 拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj1 = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;</span><br><span class="line">const obj2 = Object.assign(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj2.a = 10;</span><br><span class="line">obj2.b.c = 20;</span><br><span class="line"></span><br><span class="line">console.log(obj1); // &#123; a: 1, b: &#123; c: 20 &#125; &#125;</span><br><span class="line">console.log(obj2); // &#123; a: 10, b: &#123; c: 20 &#125; &#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>当对象只有一级属性为深拷贝；<br>当对象中有多级属性时，二级属性后就是浅拷贝；</p><p><strong>深拷贝的实现：</strong>深拷贝的原理：复制并创建一个一模一样的对象，不共享内存，修改新对象，旧对象保持不变。</p><p>在 JavaScript 中实现深拷贝通常需要递归地遍历对象，并复制其属性及属性值。可以通过多种方式实现深拷贝，比如手动递归、使用 JSON.parse(JSON.stringify(obj))、使用第三方库等。</p><p>利用 JSON 对象实现深拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj1 = &#123; a: 1, b: &#123; c: 2 &#125; &#125;;</span><br><span class="line">const obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line"></span><br><span class="line">obj2.a = 10;</span><br><span class="line">obj2.b.c = 20;</span><br><span class="line"></span><br><span class="line">console.log(obj1); // &#123; a: 1, b: &#123; c: 2 &#125; &#125;</span><br><span class="line">console.log(obj2); // &#123; a: 10, b: &#123; c: 20 &#125; &#125;</span><br></pre></td></tr></table></figure><p>使用扩展运算符实现数组深拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a=[1,2,3]</span><br><span class="line">var b=[...a];</span><br><span class="line">b.push(4);</span><br><span class="line">console.log(b);//1,2,3,4</span><br><span class="line">console.log(a)//1,2,3</span><br></pre></td></tr></table></figure><p>JavaScript 深拷贝与浅拷贝</p><p>修改右侧代码，使得修改 obj2 的值时，obj1 的值不被修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const obj1 = &#123;a:1,b:2&#125;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">const obj2 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">obj2.a = 10</span><br><span class="line">obj2.b = 20</span><br><span class="line"></span><br><span class="line">console.log(obj1)</span><br><span class="line">console.log(obj2)</span><br></pre></td></tr></table></figure><h1 id="遍历数组-对象"><a href="#遍历数组-对象" class="headerlink" title="遍历数组&#x2F;对象"></a>遍历数组&#x2F;对象</h1><p>数组遍历 forEach ：</p><p>在 JavaScript 中，forEach() 是数组的一个高阶函数，用于遍历数组的每个元素，并对每个元素执行提供的回调函数。forEach() 方法不会改变原始数组，但允许对数组中的每个元素进行操作。</p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(function(currentValue, index, array) &#123;</span><br><span class="line">    // 对当前元素执行的操作</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>currentValue：当前遍历的数组元素的值。</p><p>index：当前遍历的数组元素的索引。</p><p>array：调用 forEach() 方法的数组。</p><p>在前面的课程中，我们讲到了箭头函数，那么forEach也可以写成如下形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach((currentValue, index, array) =&gt; &#123;</span><br><span class="line">    // 对当前元素执行的操作</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line">let sum = 0;</span><br><span class="line"></span><br><span class="line">numbers.forEach(function(number, index) &#123;</span><br><span class="line">    console.log(`Index $&#123;index&#125;: $&#123;number&#125;`);</span><br><span class="line">    sum += number</span><br><span class="line">&#125;);</span><br><span class="line">console.log(`Sum: $&#123;sum&#125;`);</span><br><span class="line">// 输出：</span><br><span class="line">// Index 0: 1</span><br><span class="line">// Index 1: 2</span><br><span class="line">// Index 2: 3</span><br><span class="line">// Index 3: 4</span><br><span class="line">// Index 4: 5</span><br><span class="line">// Sum: 15</span><br></pre></td></tr></table></figure><p>数组遍历 map ：</p><p>在 JavaScript 中，map() 方法是数组对象的一个高阶函数，用于创建一个新数组，其中每个元素都是原始数组经过某种转换后的值。map() 方法会对数组中的每个元素都调用一个提供的函数，并将函数的返回值组成一个新数组返回，原始数组不受影响。</p><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const newArray = array.map(function(currentValue, index, array) &#123;</span><br><span class="line">    // 返回新数组的每个元素</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>currentValue：当前遍历的数组元素的值。<br>index：当前遍历的数组元素的索引。<br>array：调用 map() 方法的数组。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">const doubledNumbers = numbers.map(function(number) &#123;</span><br><span class="line">    return number * 2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(doubledNumbers); // 输出 [2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const names = [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;];</span><br><span class="line"></span><br><span class="line">const nameLengths = names.map(function(name) &#123;</span><br><span class="line">    return name.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(nameLengths); // 输出 [5, 3, 7]</span><br></pre></td></tr></table></figure><p>同样也可以使用箭头函数来简化 map() 方法的回调函数，使代码更加简洁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">const doubledNumbers = numbers.map(number =&gt; number * 2);</span><br><span class="line"></span><br><span class="line">console.log(doubledNumbers); // 输出 [2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>map() 方法创建一个新数组，原始数组不受影响。</p><p>map() 方法中的回调函数可以访问当前元素的值、索引以及原始数组本身。</p><p>map() 方法返回的新数组的长度和原始数组相同。</p><p>map() 方法返回的新数组中的元素是根据原始数组中的每个元素经过回调函数处理后得到的结果。</p><p>在使用 map() 方法时，要确保回调函数不会修改原始数组的元素，因为 map() 方法创建的是一个新数组，而不是对原始数组的直接修改。</p><p>For&#x2F;In 循环： JavaScript for&#x2F;in 语句用来循环遍历对象的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let person=&#123;fname:&quot;Bill&quot;,lname:&quot;Gates&quot;,age:56&#125;; </span><br><span class="line"> </span><br><span class="line">for (x in person)  // x 为属性名</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for of 遍历可迭代对象：</p><p>在 JavaScript 中，for…of 循环是一种用于遍历可迭代对象（如数组、字符串、Map、Set 等）的语法结构。它提供了一种简洁、直观的方式来遍历可迭代对象的元素，相比传统的 for 循环和 forEach() 方法，for…of 更加灵活和方便。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//遍历数组</span><br><span class="line">const numbers = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">for (const number of numbers) &#123;</span><br><span class="line">    console.log(number);</span><br><span class="line">&#125;</span><br><span class="line">// 输出：</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br><span class="line">// 4</span><br><span class="line">// 5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//遍历字符串</span><br><span class="line">const str = &quot;Hello&quot;;</span><br><span class="line"></span><br><span class="line">for (const char of str) &#123;</span><br><span class="line">    console.log(char);</span><br><span class="line">&#125;</span><br><span class="line">// 输出：</span><br><span class="line">// H</span><br><span class="line">// e</span><br><span class="line">// l</span><br><span class="line">// l</span><br><span class="line">// o</span><br></pre></td></tr></table></figure><p>遍历数组&#x2F;对象</p><p>将对象 infoObj 中的所有值存在 infoArr 数组中，并且把 infoArr 中每个字符串的长度依次存在 lengthArr 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const infoObj = &#123;</span><br><span class="line">  &quot;id&quot;:&quot;123&quot;,</span><br><span class="line">  &quot;name&quot;:&quot;JavaScript&quot;,</span><br><span class="line">  &quot;avatar&quot;:&quot;Alice&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let infoArr = []</span><br><span class="line">let lengthArr = []</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">for (x in infoObj)  // x 为属性名</span><br><span class="line">&#123;</span><br><span class="line">  infoArr.push(infoObj[x]);</span><br><span class="line">     //infoArr= infoArr + infoObj[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     lengthArr= infoArr.map(function(name) &#123;</span><br><span class="line">    return name.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(infoArr)</span><br><span class="line">console.log(lengthArr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="JavaScript-类的使用-类方法以及构造函数"><a href="#JavaScript-类的使用-类方法以及构造函数" class="headerlink" title="JavaScript 类的使用-类方法以及构造函数"></a>JavaScript 类的使用-类方法以及构造函数</h1><p>在 JavaScript 中，类是一种用于创建对象的蓝图或模板，它定义了对象的属性和方法。在 ES6（ECMAScript 2015）之前，JavaScript 并没有类的概念，而是通过构造函数和原型链来实现面向对象编程。ES6 引入了 class 关键字，使得在 JavaScript 中定义类更加直观和易于理解。</p><p><strong>定义：class 关键字：</strong>用特殊关键字 class 在 JavaScript 中定义一个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  // The body of class</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个类 User。大括号 { } 界定了类的主体。请注意，此语法称为 类声明 。</p><p>当你创建类的 实例（instance） 时，该类将变得很有用。实例是一个包含类描述的数据和行为的对象。</p><p>new 运算符可在 JavaScript 中实例化该类：instance &#x3D; new Class()。</p><p>例如，你可以用 new 运算符实例化 User 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const myUser = new User();</span><br></pre></td></tr></table></figure><p>构造方法：constructor()：</p><p>constructor(param1，param2，…) 是类中初始化实例的特殊方法。在这里你可以设置字段的初始值或针对对象进行任何类型的设置。</p><p>在以下示例中，构造函数设置了字段 name 的初始值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  constructor(name,age) &#123;    </span><br><span class="line">      this.name = name;</span><br><span class="line">      this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User 的构造函数有参数 name和age，用于设置 this.name this.age字段的初始值。</p><p>在构造函数中，this 值等于新创建的实例。</p><p>用于实例化类的参数成为构造函数的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  constructor(name,age) &#123;  </span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const user1 = new User(&#x27;Jon Snow&#x27;,21);</span><br><span class="line">user1.name; // =&gt; &#x27;Jon Snow&#x27;</span><br><span class="line">user1.age;  // =&gt; 21</span><br></pre></td></tr></table></figure><p>那么在上例中，我们创建的user1对象就拥有name 为 Jon Snow，age 为 21的属性值；</p><p><strong>类方法：</strong>创建类方法的语法与对象方法相同。</p><p>请始终添加 constructor() 方法。</p><p>然后添加任意数量的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class ClassName &#123;</span><br><span class="line">  constructor() &#123; ... &#125;</span><br><span class="line">  method_1() &#123; ... &#125;</span><br><span class="line">  method_2() &#123; ... &#125;</span><br><span class="line">  method_3() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript 类的使用-类方法以及构造函数</p><p>使用 class 关键词，写一个 constructor 来创建 Vegetable class。</p><p>Vegetable 这个 class 可以创建 vegetable 对象，这个对象拥有一个在 constructor 中赋值的 name 属性。</p><p>该类也应该有一个方法 getname 用来返回 The name of this vegetable is 后面跟上构造函数初始化的 name 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line"></span><br><span class="line">class Vegetable&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">         this.getname = function() &#123;  </span><br><span class="line">            return &quot;The name of this vegetable is &quot; + this.name;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">const carrot = new Vegetable(&#x27;carrot&#x27;);</span><br><span class="line">const tomato = new Vegetable(&#x27;tomato&#x27;);</span><br><span class="line">console.log(carrot.getname());</span><br><span class="line">console.log(tomato.getname());</span><br></pre></td></tr></table></figure><h1 id="JavaScript-类的使用-getter-和-setter-控制对象的访问"><a href="#JavaScript-类的使用-getter-和-setter-控制对象的访问" class="headerlink" title="JavaScript 类的使用 - getter 和 setter 控制对象的访问"></a>JavaScript 类的使用 - getter 和 setter 控制对象的访问</h1><p>你可以从对象中获得一个值，也可以给对象的属性赋值。</p><p>这些操作通常被称为 getters 以及 setters。</p><p>Getter 函数的作用是可以让对象返回一个私有变量，而不需要直接去访问私有变量。</p><p>Setter 函数的作用是可以基于传进的参数来修改对象中私有变量。 这些修改可以是计算，或者是直接替换之前的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Book &#123;</span><br><span class="line">  constructor(author) &#123;</span><br><span class="line">    this._author = author;</span><br><span class="line">  &#125;</span><br><span class="line">  // getter</span><br><span class="line">  get writer() &#123;</span><br><span class="line">    return this._author;</span><br><span class="line">  &#125;</span><br><span class="line">  // setter</span><br><span class="line">  set writer(updatedAuthor) &#123;</span><br><span class="line">    this._author = updatedAuthor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const novel = new Book(&#x27;anonymous&#x27;);</span><br><span class="line">console.log(novel.writer);</span><br><span class="line">novel.writer = &#x27;newAuthor&#x27;;</span><br><span class="line">console.log(novel.writer);</span><br></pre></td></tr></table></figure><p>控制台将显示字符串 anonymous 和 newAuthor。</p><p>请注意用于调用 getter 和 setter 的语法。 它们甚至看起来不像是函数。 getter 和 setter 非常重要，因为它们隐藏了内部的实现细节。</p><p>注意： 通常会在私有变量前添加下划线（_）。 然而，这种做法本身并不是将变量变成私有的。</p><p>JavaScript 类的使用 - getter 和 setter 控制对象的访问</p><p>使用 class 关键字创建一个 Thermostat class。 constructor 接收一个华氏温度。</p><p>In the class, create a getter to obtain the temperature in Celsius and a setter that accepts a temperature in Celsius.</p><p>记得在 C &#x3D; 5&#x2F;9 * (F - 32) 和 F &#x3D; C * 9.0 &#x2F; 5 + 32 中，F 是华氏温度值，C 是摄氏温度值。</p><p>注意： 完成这个挑战后，应该在 class 中使用一个温度标准，要么是华氏温度，要么是摄氏温度。</p><p>这就是 getter 和 setter 的功能。 你正在为别的用户创建一个 API，不论你使用哪一个，用户都将获得正确的结果。</p><p>或者说，你从用户需求中抽象出了实现细节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Only change code below this line</span><br><span class="line">class Thermostat &#123;</span><br><span class="line">    constructor(F)</span><br><span class="line">    &#123;</span><br><span class="line">        this._F=F;</span><br><span class="line">    &#125;</span><br><span class="line">    // getter</span><br><span class="line">  get temperature() &#123;</span><br><span class="line">    return 5/9 * (this._F - 32);</span><br><span class="line">  &#125;</span><br><span class="line">  // setter</span><br><span class="line">  set temperature(C) &#123;</span><br><span class="line">     this._F = (9/5) * C + 32;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// Only change code above this line</span><br><span class="line"></span><br><span class="line">const thermos = new Thermostat(76); // Setting in Fahrenheit scale</span><br><span class="line">let temp = thermos.temperature; // 24.44 in Celsius</span><br><span class="line">thermos.temperature = 26;</span><br><span class="line">temp = thermos.temperature; // 26 in Celsius</span><br></pre></td></tr></table></figure><h1 id="JavaScript-类的使用-继承：extends"><a href="#JavaScript-类的使用-继承：extends" class="headerlink" title="JavaScript 类的使用 - 继承：extends"></a>JavaScript 类的使用 - 继承：extends</h1><p>继承：extends：</p><p>JavaScript 中的类用 extends 关键字支持单继承。</p><p>在表达式 class Child extends Parent { } 中，子类 child 从父类继承构造函数\字段和方法。</p><p>例如，让我们创建一个新的子类 ContentWriter， 来扩展父类 User。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContentWriter extends User &#123;  </span><br><span class="line">    posts = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const writer = new ContentWriter(&#x27;John Smith&#x27;);</span><br><span class="line"></span><br><span class="line">writer.name;      // =&gt; &#x27;John Smith&#x27;</span><br><span class="line">writer.getName(); // =&gt; &#x27;John Smith&#x27;</span><br><span class="line">writer.posts;     // =&gt; []</span><br></pre></td></tr></table></figure><p>ContentWriter 从 User 继承构造函数，getName() 方法和 name 字段。同样，ContentWriter 类声明一个新字段 posts。</p><p>注意，父类的私有成员不会被子类所继承。</p><p>父构造函数：constructor() 中的 super()：</p><p>如果你想在子类中调用父构的造函数，则需要使用子构造函数中提供的特殊功能 super()。</p><p>例如让 ContentWriter 构造函数调用 User 的父构造函数，并初始化 posts 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContentWriter extends User &#123;</span><br><span class="line">  posts = [];</span><br><span class="line"></span><br><span class="line">  constructor(name, posts) &#123;</span><br><span class="line">    super(name);</span><br><span class="line">    this.posts = posts;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const writer = new ContentWriter(&#x27;John Smith&#x27;, [&#x27;Why I like JS&#x27;]);</span><br><span class="line">writer.name; // =&gt; &#x27;John Smith&#x27;</span><br><span class="line">writer.posts // =&gt; [&#x27;Why I like JS&#x27;]</span><br></pre></td></tr></table></figure><p>子类 ContentWriter 中的 super(name) 执行父类 User 的构造函数。</p><p>注意，在子构造函数内部，必须在使用 this 关键字之前执行 super()。调用 super() 确保父级构造函数初始化实例。</p><p>父实例：方法中的 super：</p><p>如果你想在子方法中访问父方法，则可以使用特殊的快捷方式 super。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">  name;</span><br><span class="line"></span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContentWriter extends User &#123;</span><br><span class="line">  posts = [];</span><br><span class="line"></span><br><span class="line">  constructor(name, posts) &#123;</span><br><span class="line">    super(name);</span><br><span class="line">    this.posts = posts;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    const name = super.getName();    if (name === &#x27;&#x27;) &#123;</span><br><span class="line">      return &#x27;Unknwon&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const writer = new ContentWriter(&#x27;&#x27;, [&#x27;Why I like JS&#x27;]);</span><br><span class="line">writer.getName(); // =&gt; &#x27;Unknwon&#x27;</span><br></pre></td></tr></table></figure><p>子类 ContentWriter 的 getName() 直接从父类 User 访问方法 super.getName()。</p><p>JavaScript 类的使用 - 继承：extends</p><p>定义一个 rabbit 类，继承 animal 类，并且增加一个 color 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class animal&#123;</span><br><span class="line">  name;</span><br><span class="line">  food;</span><br><span class="line">  </span><br><span class="line">  constructor(name,food) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.food = food;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat()&#123;</span><br><span class="line">    return `$&#123;this.name&#125; love to eat $&#123;this.food&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  // Only change code below this line</span><br><span class="line">// 定义 rabbit 类，继承自 animal 类  </span><br><span class="line">class rabbit extends animal &#123;  </span><br><span class="line">  color;  </span><br><span class="line">  </span><br><span class="line">  // 构造函数需要调用 super 方法来初始化父类的属性  </span><br><span class="line">  constructor(name, food, color) &#123;  </span><br><span class="line">    super(name, food); // 调用父类的 constructor  </span><br><span class="line">    this.color = color; // 初始化自己的 color 属性  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  // 添加一个 getcolor 方法来获取兔子的颜色  </span><br><span class="line">  eat() &#123;  </span><br><span class="line">    return &quot;rabbit love to eat grass&quot;;  </span><br><span class="line">  &#125;  </span><br><span class="line"> getcolor() &#123;  </span><br><span class="line">    return `The color of this rabbit is $&#123;this.color&#125;`;  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">  // Only change code above this line</span><br><span class="line"></span><br><span class="line">let a = new rabbit(&#x27;rabbit&#x27;,&#x27;grass&#x27;,&#x27;white&#x27;)</span><br><span class="line">console.log(a.eat())</span><br><span class="line">console.log(a.getcolor())</span><br></pre></td></tr></table></figure><h1 id="用-export-来重用代码块"><a href="#用-export-来重用代码块" class="headerlink" title="用 export 来重用代码块"></a>用 export 来重用代码块</h1><p>模块化的背景：</p><p>JavaScript 程序本来很小——在早期，它们大多被用来执行独立的脚本任务，在你的 web 页面需要的地方提供一定交互，所以一般不需要多大的脚本。过了几年，我们现在有了运行大量 JavaScript 脚本的复杂程序，还有一些被用在其他环境（例如 Node.js）。</p><p>因此，近年来，有必要开始考虑提供一种将 JavaScript 程序拆分为可按需导入的单独模块的机制。Node.js 已经提供这个能力很长时间了，还有很多的 JavaScript 库和框架已经开始了模块的使用（例如，CommonJS 和基于 AMD 的其他模块系统 如 RequireJS，以及最新的 Webpack 和 Babel）。</p><p>好消息是，最新的浏览器开始原生支持模块功能了，这是本文要重点讲述的。这会是一个好事情 —- 浏览器能够最优化加载模块，使它比使用库更有效率：使用库通常需要做额外的客户端处理。</p><p>导出模块的功能：</p><p>假设有一个文件 math_functions.js，该文件包含了数学运算相关的一些函数。 其中一个存储在变量 add 里，该函数接受两个数字作为参数返回它们的和。 你想在几个不同的 JavaScript 文件中使用这个函数。 要实现这个目的，就需要 export 它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const add = (x, y) =&gt; &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是导出单个函数常用方法，还可以这样导出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const add = (x, y) =&gt; &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; add &#125;;</span><br></pre></td></tr></table></figure><p>导出变量和函数后，就可以在其它文件里导入使用从而避免了代码冗余。 重复第一个例子的代码可以导出多个对象或函数，在第二个例子里面的导出语句中添加更多值也可以导出多项，例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export &#123; add, subtract &#125;;</span><br></pre></td></tr></table></figure><p>用 export 来重用代码块</p><p>编辑框中有两个字符串相关的函数。 选用一种方法导出两个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const uppercaseString = (string) =&gt; &#123;</span><br><span class="line">  return string.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const lowercaseString = (string) =&gt; &#123;</span><br><span class="line">  return string.toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; uppercaseString, lowercaseString &#125;;</span><br></pre></td></tr></table></figure><h1 id="通过-import-复用-JavaScript-代码"><a href="#通过-import-复用-JavaScript-代码" class="headerlink" title="通过 import 复用 JavaScript 代码"></a>通过 import 复用 JavaScript 代码</h1><p>import 可以导入文件或模块的一部分。 在之前的课程里，例子从 math_functions.js 文件里导出了 add。 下面看一下如何在其它文件导入它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add &#125; from &#x27;./math_functions.js&#x27;;</span><br></pre></td></tr></table></figure><p>在这里，import 会在 math_functions.js 里找到 add，只导入这个函数，忽略剩余的部分。 .&#x2F; 告诉程序在当前文件的相同目录寻找 math_functions.js 文件。 用这种方式导入时，相对路径（.&#x2F;）和文件扩展名（.js）都是必需的。</p><p>通过在 import 语句里添加项目，可以从文件里导入多个项目，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add, subtract &#125; from &#x27;./math_functions.js&#x27;;</span><br></pre></td></tr></table></figure><p>通过 import 复用 JavaScript 代码</p><p>添加 import 语句，使当前文件可以使用你在之前课程里导出的 uppercaseString 和 lowercaseString 函数。 函数在当前路径下的 string_functions.js 文件里。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Only change code above this line</span><br><span class="line">import &#123; uppercaseString, lowercaseString  &#125; from &#x27;./string_functions.js&#x27;;</span><br><span class="line">uppercaseString(&quot;hello&quot;);</span><br><span class="line">lowercaseString(&quot;WORLD!&quot;);</span><br></pre></td></tr></table></figure><h1 id="用-从文件中导入所有内容"><a href="#用-从文件中导入所有内容" class="headerlink" title="用 * 从文件中导入所有内容"></a>用 * 从文件中导入所有内容</h1><p>假设你有一个文件，你希望将其所有内容导入到当前文件中。 可以用 import * as 语法来实现。 下面是一个从同目录下的 math_functions.js 文件中导入所有内容的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as myMathModule from &quot;./math_functions.js&quot;;</span><br></pre></td></tr></table></figure><p>上面的 import 语句会创建一个叫作 myMathModule 的对象。 这只是一个变量名，可以随便命名。 对象包含 math_functions.js 文件里的所有导出，可以像访问对象的属性那样访问里面的函数。 下面是使用导入的 add 和 subtract 函数的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myMathModule.add(2,3);</span><br><span class="line">myMathModule.subtract(5,3);</span><br></pre></td></tr></table></figure><p>用 * 从文件中导入所有内容</p><p>下面的代码需要从同目录下的 string_functions.js 文件中导入所有内容。 使用 import * as 语法将文件的所有内容导入对象 stringFunctions。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Only change code above this line</span><br><span class="line">import * as stringFunctions from &quot;./string_functions.js&quot;;</span><br><span class="line">stringFunctions.uppercaseString(&quot;hello&quot;);</span><br><span class="line">stringFunctions.lowercaseString(&quot;WORLD!&quot;);</span><br></pre></td></tr></table></figure><h1 id="用-export-default-创建一个默认导出"><a href="#用-export-default-创建一个默认导出" class="headerlink" title="用 export default 创建一个默认导出"></a>用 export default 创建一个默认导出</h1><p>在 export 的课程中，你学习了命名导出语法， 这可以在其他文件中引用一些函数或者变量。</p><p>还需要了解另外一种被称为默认导出的 export 的语法。 在文件中只有一个值需要导出的时候，通常会使用这种语法。 它也常常用于给文件或者模块创建返回值。</p><p>下面是使用 export default 的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default function add(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个是命名函数，第二个是匿名函数。</p><p>export default 用于为模块或文件声明一个返回值，在每个文件或者模块中应当只默认导出一个值。 此外，你不能将 export default 与 var、let 或 const 同时使用。</p><p>用 export default 创建一个默认导出</p><p>下面的函数应该在这个模块中返回一个值。 请添加需要的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function subtract(x, y) &#123;</span><br><span class="line">  return x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function subtract(x, y) &#123;</span><br><span class="line">  return x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function(x, y) &#123;</span><br><span class="line">  return x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="导入一个默认的导出"><a href="#导入一个默认的导出" class="headerlink" title="导入一个默认的导出"></a>导入一个默认的导出</h1><p>在上一个挑战里，学习了 export default 的用法。 还需要一种 import 的语法来导入默认的导出。 在下面的例子里，add 是 math_functions.js 文件的默认导出。 以下是如何导入它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import add from &quot;./math_functions.js&quot;;</span><br></pre></td></tr></table></figure><p>这个语法有一处特别的地方， 被导入的 add 值没有被花括号（{}）所包围。 add 只是一个变量的名字，对应 math_functions.js 文件的任何默认导出值。 在导入默认导出时，可以使用任何名字。</p><p>导入一个默认的导出</p><p>在下面的代码中，导入同一目录中 math_functions.js 文件的默认导出。 导入变量的名字为 subtract。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import subtract from &quot;./math_functions.js&quot;;</span><br><span class="line">// 只修改这一行上面的代码</span><br><span class="line"></span><br><span class="line">subtract(7,4);</span><br></pre></td></tr></table></figure><h1 id="JavaScript-this指向"><a href="#JavaScript-this指向" class="headerlink" title="JavaScript this指向"></a>JavaScript this指向</h1><p>this的理解：</p><p>理解 JavaScript 中的 this 关键字是非常重要的，因为它在不同的上下文中具有不同的含义。this 的值取决于函数的调用方式，下面我们来详细解释不同情况下 this 的指向：</p><p>全局上下文中：在全局上下文中，即在任何函数外部，this 指向全局对象，通常在浏览器环境中指向 window 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(this); // 输出 window（浏览器环境下）</span><br></pre></td></tr></table></figure><p>函数调用：当函数独立调用时，this 指向全局对象（在严格模式下是 ）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction() &#123;</span><br><span class="line">  console.log(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myFunction(); // 输出 window（浏览器环境下）</span><br></pre></td></tr></table></figure><p>方法调用：当函数作为对象的方法调用时，this 指向调用该方法的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: &#x27;John&#x27;,</span><br><span class="line">  greet: function() &#123;</span><br><span class="line">    console.log(this.name); // 输出 John</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>obj.greet();<br>构造函数中：当函数用作构造函数使用（通过 new 关键字调用）时，this 指向新创建的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">console.log(person1.name); // 输出 Alice</span><br></pre></td></tr></table></figure><p>class类中：在 JavaScript 的类（class）中，this 的行为也与其他情况有所不同。在类中，this 指向实例化的对象，也就是类的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    console.log(`Hello, $&#123;this.name&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">person1.greet(); // 输出 Hello, Alice</span><br></pre></td></tr></table></figure><p>在这个例子中，this 关键字在 Person 类的构造函数和 greet 方法中都指向实例化的对象 person1。因此，当调用 person1.greet() 时，this 指向 person1 对象，从而输出相应的问候语。 需要注意的是，如果在类的方法中使用普通的函数，那么函数内部的 this 将会丢失其上下文，并可能指向全局对象或者 ，这时需要使用箭头函数来绑定正确的上下文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">      console.log(`Hello, $&#123;this.name&#125;`); // 此处的 this 指向全局对象（在浏览器环境中通常是 window）</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">person1.greet(); // 输出 &quot;Hello, &quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  greet() &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      console.log(`Hello, $&#123;this.name&#125;`); // 将普通函数改为箭头函数，this重新指向Person实例</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person1 = new Person(&#x27;Alice&#x27;);</span><br><span class="line">person1.greet(); // 输出 &quot;Hello, Alice&quot;</span><br></pre></td></tr></table></figure><p>通过箭头函数，我们将内部函数绑定到了外部函数的上下文，确保了 this 指向正确的对象。</p><p>JavaScript this指向</p><p>更改代码，使其能够正确调用greet方法，输出Hello, John</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: &#x27;John&#x27;,</span><br><span class="line">  greet: function() &#123;</span><br><span class="line">    console.log(`Hello, $&#123;this.name&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Only change code below this line</span><br><span class="line">//const greetFunction = obj.greet;</span><br><span class="line">obj.greet();</span><br><span class="line">const greetFunction = obj.greet.bind(obj); </span><br><span class="line">greetFunction();</span><br><span class="line">// Only change code above this line</span><br></pre></td></tr></table></figure><h1 id="JavaScript-闭包"><a href="#JavaScript-闭包" class="headerlink" title="JavaScript 闭包"></a>JavaScript 闭包</h1><p>闭包是 JavaScript 中一个重要且常见的概念，它是指函数和其词法环境的组合。在理解闭包之前，我们需要先了解一下 JavaScript 中的词法作用域和作用域链。</p><p>词法作用域：</p><p>JavaScript 使用词法作用域（也称为静态作用域），即作用域由代码中函数声明的位置决定。这意味着在函数内部可以访问外部函数定义的变量，但是外部函数不能访问内部函数的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function outerFunction() &#123;</span><br><span class="line">  const outerVariable = &#x27;I am outer!&#x27;;</span><br><span class="line">  </span><br><span class="line">  function innerFunction() &#123;</span><br><span class="line">    console.log(outerVariable); // 内部函数可以访问外部函数的变量</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  innerFunction();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outerFunction(); // 输出 &quot;I am outer!&quot;</span><br></pre></td></tr></table></figure><p>闭包的概念：</p><p>闭包就是函数和其词法环境的组合，它允许函数访问其外部作用域中的变量，即使函数在外部作用域执行完毕后仍然能够访问这些变量。换句话说，闭包使函数拥有了“记忆力”，可以记住创建它的上下文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function outerFunction() &#123;</span><br><span class="line">  const outerVariable = &#x27;I am outer!&#x27;;</span><br><span class="line">  </span><br><span class="line">  function innerFunction() &#123;</span><br><span class="line">    console.log(outerVariable); // 内部函数可以访问外部函数的变量</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return innerFunction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const inner = outerFunction();</span><br><span class="line">inner(); // 输出 &quot;I am outer!&quot;</span><br></pre></td></tr></table></figure><p>在这个例子中，innerFunction 是一个闭包，它可以访问外部函数 outerFunction 中的变量 outerVariable。即使 outerFunction 执行完毕，innerFunction 依然可以访问到 outerVariable。</p><p>属性私有化：</p><p>使属性私有化最简单的方法就是在构造函数中创建变量。 可以将该变量范围限定在构造函数中，而不是全局可用。 这样，属性只能由构造函数中的方法访问和更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Bird() &#123;</span><br><span class="line">  let hatchedEgg = 10;</span><br><span class="line"></span><br><span class="line">  this.getHatchedEggCount = function() &#123; </span><br><span class="line">    return hatchedEgg;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">let ducky = new Bird();</span><br><span class="line">ducky.getHatchedEggCount();</span><br></pre></td></tr></table></figure><p>这里的 getHatchedEggCount 是一种特权方法，因为它可以访问私有属性 hatchedEgg。 这是因为 hatchedEgg 是在与 getHatchedEggCount 相同的上下文中声明的。 在 JavaScript 中，函数总是可以访问创建它的上下文。 这就叫做 closure。</p><p>闭包的应用：</p><p>闭包在 JavaScript 中有许多应用场景，常见的包括隐藏数据、封装代码、模块化开发等。例如，可以使用闭包来创建私有变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function createCounter() &#123;</span><br><span class="line">  let count = 0;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    increment: function() &#123;</span><br><span class="line">      count++;</span><br><span class="line">      console.log(count);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement: function() &#123;</span><br><span class="line">      count--;</span><br><span class="line">      console.log(count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const counter = createCounter();</span><br><span class="line">counter.increment(); // 输出 1</span><br><span class="line">counter.increment(); // 输出 2</span><br><span class="line">counter.decrement(); // 输出 1</span><br></pre></td></tr></table></figure><p>在这个例子中，createCounter 函数返回一个包含 increment 和 decrement 方法的对象，这些方法都可以访问 createCounter 函数中的 count 变量，但是外部无法直接访问 count 变量。这样就实现了私有变量的效果。</p><p>总之，闭包是 JavaScript 中一个非常有用且强大的特性，它使得函数拥有了持久性的状态，并且可以访问其外部作用域中的变量，从而实现了许多有趣的功能和模式。</p><p>JavaScript 闭包</p><p>更改在 Bird 函数中声明的 weight 方法，使其成为私有变量。 然后，创建一个返回 weight 值 15 的 getWeight 方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function Bird() &#123;  </span><br><span class="line">  // 使用let或const来声明私有变量  </span><br><span class="line">  let weight = 15;// 这里是私有的  </span><br><span class="line">  </span><br><span class="line">  // 返回一个对象，其中包含访问私有变量的公有方法  </span><br><span class="line">  return &#123;  </span><br><span class="line">    getWeight: function() &#123;  </span><br><span class="line">      return weight;  </span><br><span class="line">    &#125;  </span><br><span class="line">    // 如果需要，还可以添加其他方法或属性，它们都可以访问这个私有的weight变量  </span><br><span class="line">  &#125;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">// 使用Bird函数  </span><br><span class="line">//const myBird = Bird();  </span><br><span class="line">//console.log(myBird.getWeight()); // 输出: 15  </span><br><span class="line">  </span><br><span class="line">// 注意：你不能直接访问myBird.weight，因为它没有在Bird函数返回的对象中定义，所以是“私有”的  </span><br><span class="line">//console.log(myBird.weight); // 这将输出undefined，因为weight是私有的</span><br></pre></td></tr></table></figure><h1 id="JavaScript-bind，apply，call"><a href="#JavaScript-bind，apply，call" class="headerlink" title="JavaScript bind，apply，call"></a>JavaScript bind，apply，call</h1><p>改变this指向：</p><p>bind，call，apply的作用都是用来改变this指向的，那为什么要改变this指向呢？请看下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var name=&quot;lucy&quot;;</span><br><span class="line">let obj=&#123;</span><br><span class="line"> name:&quot;martin&quot;,</span><br><span class="line"> say:function () &#123;</span><br><span class="line"> console.log(this.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.say(); //martin，this指向obj对象</span><br><span class="line">setTimeout(obj.say,0); //lucy，this指向window对象</span><br></pre></td></tr></table></figure><p>可以观察到，正常情况下 say 方法中的this是指向调用它的 obj 对象的，而定时器 setTimeout 中的 say 方法中的 this 是指向window对象的(在浏览器中)，这是因为 say 方法在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的，但我们需要的是 say 方法中 this 指向obj对象，因此我们需要修改 this 的指向。</p><p>apply方法：apply接受两个参数，第一个参数是this的指向，第二个参数是函数接受的参数，以数组的形式传入，且当第一个参数为null、的时候，默认指向window(在浏览器中)，使用apply方法改变this指向后原函数会立即执行，且此方法只是临时改变thi指向一次。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var name=&quot;martin&quot;;</span><br><span class="line">var obj=&#123;</span><br><span class="line"> name:&quot;lucy&quot;,</span><br><span class="line"> say:function(year,place)&#123;</span><br><span class="line"> console.log(this.name+&quot; is &quot;+year+&quot; born from &quot;+place);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var say=obj.say;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line"> say.apply(obj,[&quot;1996&quot;,&quot;China&quot;])</span><br><span class="line">&#125; ,0); //lucy is 1996 born from China,this改变指向了obj</span><br><span class="line">say(&quot;1996&quot;，&quot;China&quot;) //martin is 1996 born from China,this指向window，说明apply只是临时改变一次this指向</span><br></pre></td></tr></table></figure><p><strong>call方法：</strong>call方法的第一个参数也是this的指向，后面传入的是一个参数列表（注意和apply传参的区别）。当一个参数为null或的时候，表示指向window（在浏览器中），和apply一样，call也只是临时改变一次this指向，并立即执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function.call(thisArg, arg1, arg2, ...);</span><br></pre></td></tr></table></figure><p>bind方法：bind方法和call很相似，第一参数也是this的指向，后面传入的也是一个参数列表(但是这个参数列表可以分多次传入，call则必须一次性传入所有参数。</p><p>bind 方法会创建一个新的函数，并将指定的对象绑定为函数执行时的上下文。该方法不会立即调用函数，而是返回一个新的函数，你可以稍后调用这个新函数。bind 方法的基本用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let obj=&#123;</span><br><span class="line"> name:&quot;martin&quot;,</span><br><span class="line"> say:function () &#123;</span><br><span class="line"> console.log(this.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let obj2 = &#123;</span><br><span class="line"> name:&quot;bob&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let bound = obj.say.bind(obj2)</span><br><span class="line">bound()</span><br></pre></td></tr></table></figure><p>apply，call，bind三者的区别：</p><p>三者都可以改变函数的this对象指向。</p><p>三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为或null，则默认指向全局window。</p><p>三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入。</p><p>bind 是返回绑定this之后的函数，便于稍后调用；apply 、call 则是立即执行 。</p><p>JavaScript bind，apply，call</p><p>修改指定行代码，使用 bind 改变 this 指向,使其正常代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let module = &#123;</span><br><span class="line">  x: 42,</span><br><span class="line">  getX: function () &#123;</span><br><span class="line">    return this.x;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let unboundGetX = module.getX;</span><br><span class="line">let boundGetX=unboundGetX.bind(module);;// Change this line</span><br><span class="line">console.log(boundGetX());</span><br></pre></td></tr></table></figure><h1 id="JavaScript-回调函数"><a href="#JavaScript-回调函数" class="headerlink" title="JavaScript 回调函数"></a>JavaScript 回调函数</h1><p>在JavaScript中，回调函数是一种常见的编程模式，用于处理异步操作和事件处理。回调函数是作为参数传递给另一个函数，当某个特定的事件发生或异步操作完成时，该回调函数会被调用执行。</p><p>下面详细讲解一下JavaScript中回调函数的特点、用法和示例：</p><p>特点：</p><p>回调函数是一种函数类型的值。<br>回调函数作为参数传递给其他函数，以便在特定的事件发生时调用。<br>回调函数通常用于处理异步操作的结果或处理事件响应。<br>用法：</p><p>处理异步操作：当需要处理耗时的操作（例如网络请求、文件读取等）时，可以将回调函数作为异步操作的回调，在操作完成后执行。<br>事件处理：在事件驱动的编程中，可以将回调函数注册为事件的处理函数，在事件发生时执行。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 处理异步操作</span><br><span class="line">function fetchData(url, callback) &#123;</span><br><span class="line">    // 模拟异步操作，延迟1秒钟</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        // 模拟获取数据</span><br><span class="line">        let data = &#123; id: 1, name: &#x27;John&#x27; &#125;;</span><br><span class="line">        // 调用回调函数并传递数据</span><br><span class="line">        callback(data);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line">//使用箭头函数传入，获取到数据后，执行打印数据操作</span><br><span class="line">fetchData(&#x27;https://example.com/data&#x27;, res =&gt;&#123;</span><br><span class="line">    console.log(&quot;Get Data：&quot; , res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，回调函数 res&#x3D;&gt;{} 用于处理异步操作 fetchData 的结果，回调函数在异步操作完成后被调用。另外，回调函数也被用作事件处理函数，在按钮点击事件发生时执行。</p><p>JavaScript 回调函数</p><p>fetchData 函数用于模拟查询包含name的数据，并且将数据返回给回调函数中，请完成指定行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function fetchData(name, callback) &#123;</span><br><span class="line">const data = [</span><br><span class="line">      &#123;name:&quot;zhang&quot;,stuID:&quot;S234&quot;&#125;,</span><br><span class="line">      &#123;name:&quot;shen&quot;,stuID:&quot;S235&quot;&#125;,</span><br><span class="line">      &#123;name:&quot;liu&quot;,stuID:&quot;S236&quot;&#125;,</span><br><span class="line">    ]</span><br><span class="line">  </span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      let i = 0</span><br><span class="line">      for(;i&lt;data.length;i++)&#123;</span><br><span class="line">        if(data[i].name == name)&#123;</span><br><span class="line">         callback(data[i]); </span><br><span class="line">        break; // 退出循环  </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if(i == data.length) callback(&quot;没有查到包含&quot;+ name +&quot;的数据~&quot;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchData(&quot;zhang&quot;,res=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">fetchData(&quot;wang&quot;,res=&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="创建一个-JavaScript-Promise"><a href="#创建一个-JavaScript-Promise" class="headerlink" title="创建一个 JavaScript Promise"></a>创建一个 JavaScript Promise</h1><p>Promise 是异步编程的一种解决方案 - 它在未来的某时会生成一个值。 任务完成，分执行成功和执行失败两种情况。 Promise 是构造器函数，需要通过 new 关键字来创建。 构造器参数是一个函数，该函数有两个参数 - resolve 和 reject。 通过它们来判断 promise 的执行结果。 用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const myPromise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个 JavaScript Promise</p><p>创建一个名为 makeServerRequest 的 promise。 给构造器函数传入 resolve 和 reject 两个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="通过-resolve-和-reject-完成-Promise"><a href="#通过-resolve-和-reject-完成-Promise" class="headerlink" title="通过 resolve 和 reject 完成 Promise"></a>通过 resolve 和 reject 完成 Promise</h1><p>ES6中的Promise是一种用于处理异步操作的对象，它代表了一个异步操作的最终完成或失败，以及其结果值。Promise对象有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。当Promise对象的状态从pending转变为fulfilled或rejected时，将会执行相应的回调函数。</p><p>上一个挑战里创建的 promise 一直阻塞在 pending 状态里，因为没有调用 promise 的完成方法。 Promise 提供的 resolve 和 reject 参数就是用来结束 promise 的。 Promise 成功时调用 resolve，promise 执行失败时调用 reject， 如下文所述，这些方法需要有一个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myPromise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  if(condition here) &#123;</span><br><span class="line">    resolve(&quot;Promise was fulfilled&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    reject(&quot;Promise was rejected&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的示例使用字符串作为这些函数的参数，但参数实际上可以是任何格式。 通常，它可能是一个包含数据的对象，你可以将它放在网站或其他地方。</p><p>通过 resolve 和 reject 完成 Promise</p><p>使 promise 可以处理成功和失败情况。 如果 responseFromServer 是 true，调用 resolve 方法使 promise 成功。 给 resolve 传递值为 We got the data 的字符串。 如果 responseFromServer 是 false， 使用 reject 方法并传入值为 Data not received 的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  let responseFromServer = true;</span><br><span class="line"></span><br><span class="line">  if(responseFromServer) &#123;</span><br><span class="line">    resolve(&quot;We got the data&quot;);</span><br><span class="line">  &#125; else &#123;  </span><br><span class="line">    reject(&quot;Data not received&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="用-then-处理-Promise-完成的情况"><a href="#用-then-处理-Promise-完成的情况" class="headerlink" title="用 then 处理 Promise 完成的情况"></a>用 then 处理 Promise 完成的情况</h1><p>当程序需要花费未知的时间才能完成时（比如一些异步操作），一般是服务器请求，promise 很有用。 服务器请求会花费一些时间，当结束时，需要根据服务器的响应执行一些操作。 这可以用 then 方法来实现， 当 promise 完成 resolve 时会触发 then 方法。 例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.then(result =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>result 即传入 resolve 方法的参数。</p><p>用 then 处理 Promise 完成的情况</p><p>给 promise 添加 then 方法。 用 result 做为回调函数的参数并将 result 打印在控制台。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  // responseFromServer is set to true to represent a successful response from a server</span><br><span class="line">  let responseFromServer = true;</span><br><span class="line"></span><br><span class="line">  if(responseFromServer) &#123;</span><br><span class="line">    resolve(&quot;We got the data&quot;);</span><br><span class="line">  &#125; else &#123;  </span><br><span class="line">    reject(&quot;Data not received&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">makeServerRequest.then(  </span><br><span class="line">  (result) =&gt; &#123;  </span><br><span class="line">    // 当Promise被解析时，这个回调函数会被调用  </span><br><span class="line">    // result参数包含了Promise解析后的值  </span><br><span class="line">    console.log(result); // 打印结果到控制台  </span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="使用-catch-处理-Promise-失败的情况"><a href="#使用-catch-处理-Promise-失败的情况" class="headerlink" title="使用 catch 处理 Promise 失败的情况"></a>使用 catch 处理 Promise 失败的情况</h1><p>当 promise 失败时会调用 catch 方法。 当 promise 的 reject 方法执行时会直接调用。 用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myPromise.catch(error =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>error 是传入 reject 方法的参数。</p><p>使用 catch 处理 Promise 失败的情况</p><p>给 promise 添加 catch 方法。 用 error 作为回调函数的参数，并把 error 打印到控制台。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const makeServerRequest = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  // responseFromServer is set to false to represent an unsuccessful response from a server</span><br><span class="line">  let responseFromServer = false;</span><br><span class="line"></span><br><span class="line">  if(responseFromServer) &#123;</span><br><span class="line">    resolve(&quot;We got the data&quot;);</span><br><span class="line">  &#125; else &#123;  </span><br><span class="line">    reject(&quot;Data not received&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">makeServerRequest.then(result =&gt; &#123;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;).catch(error =&gt; &#123;</span><br><span class="line">  console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Promise-进阶"><a href="#Promise-进阶" class="headerlink" title="Promise 进阶"></a>Promise 进阶</h1><p>Promise链：</p><p>前面讲完了Promise的基础用法，Promise对象也可以链式调用，每个 then() 或 catch() 方法都可以返回一个新的Promise对象，因此可以串联多个异步操作。这种机制被称为Promise链。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let myPromise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    if(true)&#123;</span><br><span class="line">        resolve(&#x27;Step 1 data&#x27;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        reject(&#x27;Caught error&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myPromise.then((data) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Step 1:&#x27;, data);</span><br><span class="line">    return &#x27;Step 2 data&#x27;;</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Step 2:&#x27;, data);</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            resolve(&#x27;Step 3 data&#x27;);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then((data) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Step 3:&#x27;, data);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Caught error:&#x27;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，每个 then() 返回的是一个新的Promise对象，可以在其中执行新的异步操作，并在下一个 then() 中处理其结果。</p><p>Promise.all() 和 Promise.race()：</p><p>Promise.all() 接收一个Promise数组作为参数，当所有Promise都成功时，返回一个包含所有Promise结果的数组；如果任何一个Promise失败，立即返回失败状态。</p><p>Promise.race() 接收一个Promise数组作为参数，返回第一个完成的Promise的结果或失败原因。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let promise1 = Promise.resolve(&#x27;Promise 1&#x27;);</span><br><span class="line">let promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        resolve(&#x27;Promise 2&#x27;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all([promise1, promise2]).then((values) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;All promises resolved:&#x27;, values);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Error:&#x27;, error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.race([promise1, promise2]).then((value) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;First promise resolved:&#x27;, value);</span><br><span class="line">&#125;).catch((error) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Error:&#x27;, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 进阶</p><p>使用 Promise.all 和 Promise.race 函数，参数传入 promise1 和 promise2，打印结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let promise1 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        resolve(&#x27;Promise 1 Data&#x27;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line">let promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        resolve(&#x27;Promise 2 Data&#x27;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Promise.all([promise1, promise2]).then((values) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;All promises resolved:&#x27;, values);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Promise.race([promise1, promise2]).then((value) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;First promise resolved:&#x27;, value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flexbox布局</title>
      <link href="/2024/07/12/flexbox%E5%B8%83%E5%B1%80/"/>
      <url>/2024/07/12/flexbox%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>Flexbox（Flexible Box）布局是 CSS3 中引入的一种弹性盒子布局模型，旨在更方便、更有效地对容器中的子元素进行布局。它提供了一种灵活的方式来设计和排列网页中的元素，使得元素可以自动适应不同的屏幕大小和设备类型。</p><h1 id="使用-display-flex-定位两个盒子"><a href="#使用-display-flex-定位两个盒子" class="headerlink" title="使用 display: flex 定位两个盒子"></a>使用 display: flex 定位两个盒子</h1><p>只要在一个元素的 CSS 中添加 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display: flex;</span><br></pre></td></tr></table></figure><p>就可以使用其它 flex 属性来构建响应式页面了。</p><h1 id="在推文中添加弹性盒子布局"><a href="#在推文中添加弹性盒子布局" class="headerlink" title="在推文中添加弹性盒子布局"></a>在推文中添加弹性盒子布局</h1><p>上一个挑战演示了 display: flex， 现在你需要把它添加到推文内嵌的多个组件中，调整它们的位置。</p><p>在推文中添加弹性盒子布局<br>请为下列项目添加 CSS 属性 display: flex。 注意，以下 CSS 选择器已为你写好：</p><p>header、header 中的 .profile-name、header 中的 .follow-btn、header 中的 h3 和 h4、footer 以及 footer 中的 .stats</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header &#123;</span><br><span class="line">   display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line"></span><br><span class="line">    margin-left: 10px;</span><br><span class="line">     display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line"></span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">     display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">     display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer &#123;</span><br><span class="line">   display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line"></span><br><span class="line">    font-size: 15px;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-属性创建一个行"><a href="#使用-flex-direction-属性创建一个行" class="headerlink" title="使用 flex-direction 属性创建一个行"></a>使用 flex-direction 属性创建一个行</h1><p>给元素添加 display: flex 属性可以让它变成 flex 容器， 然后可以让元素的项目排列成行或列。 只要给父元素添加 flex-direction 属性，并把属性值设置为 row 或 column，即可横向排列或纵向排列它的所有子元素。 创建一行将使子项水平对齐，创建一列将使子项垂直对齐。</p><p>flex-direction 的其他可选值还有 row-reverse 和 column-reverse。</p><p>注意： flex-direction 的默认值为 row。</p><p>使用 flex-direction 属性创建一个行</p><p>请为 #box-container 添加 CSS 属性 flex-direction，将其值设为 row-reverse。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row-reverse;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-在嵌入推文中创建多行"><a href="#使用-flex-direction-在嵌入推文中创建多行" class="headerlink" title="使用 flex-direction 在嵌入推文中创建多行"></a>使用 flex-direction 在嵌入推文中创建多行</h1><p>嵌入推文示例中的 header 和 footer 有自己的子元素，使用 flex-direction 属性可以把这些子元素排成行。 这个属性告诉 CSS 需要将这些子元素水平排列。</p><p>使用 flex-direction 在嵌入推文中创建多行</p><p>为 header 和 footer 添加 CSS 属性 flex-direction，并把值设为 row。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">     flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-属性创建一列"><a href="#使用-flex-direction-属性创建一列" class="headerlink" title="使用 flex-direction 属性创建一列"></a>使用 flex-direction 属性创建一列</h1><p>在之前两个挑战中，我们使用了 flex-direction 属性，值为 row。 这个属性还能创建一个列，让子元素竖直排列在 flex 容器中。</p><p>使用 flex-direction 属性创建一列</p><p>请给 #box-container 元素添加 CSS 属性 flex-direction，并将其属性值设置为 column。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-direction-在嵌入推文中创建一列"><a href="#使用-flex-direction-在嵌入推文中创建一列" class="headerlink" title="使用 flex-direction 在嵌入推文中创建一列"></a>使用 flex-direction 在嵌入推文中创建一列</h1><p>在之前的挑战中，我们把嵌入推文的 header 和 footer 的 flex-direction 属性值设为 row（行）。 相似地，把 .profile-name 选择器中的元素竖着排列会好看一点。</p><p>使用 flex-direction 在嵌入推文中创建一列</p><p>请给标题的 .profile-name 元素添加 CSS 属性 flex-direction，并将其值设为 column</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header, footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-justify-content-属性对齐元素"><a href="#使用-justify-content-属性对齐元素" class="headerlink" title="使用 justify-content 属性对齐元素"></a>使用 justify-content 属性对齐元素</h1><p>flex 子元素有时不能充满整个 flex 容器， 所以我们经常需要告诉 CSS 以什么方式排列 flex 子元素，以及调整它们的间距。 幸运的是，我们可以通过 justify-content 属性的不同值来实现。 在介绍属性的可选值之前，我们要先理解一些重要术语。</p><p><a href="https://www.freecodecamp.org/chinese/news/flexbox-the-ultimate-css-flex-cheatsheet/">阅读更多关于 flex-box 属性的信息</a></p><p>回忆一下，如果把 flex 容器设为一个行，它的子元素会从左到右逐个排列。 如果把 flex 容器设为一个列，它的子元素会从上到下逐个排列。 子元素排列的方向被称为 main axis（主轴）。 对一行来说，主轴水平贯穿每一个对象； 对于列，主轴垂直贯穿每一个对象。</p><p>对于如何沿主轴线排放 flex 项目，有几种选择。 常用的一种是 justify-content: center;：即 flex 子元素在 flex 容器中居中排列。 其他选择包括：</p><p>flex-start：从 flex 容器的起始位置开始排列项目。 对行来说是把项目移至左边， 对于列是把项目移至顶部。 如未设置 justify-content 的值，那么这就是默认值。</p><p>flex-end：从 flex 容器的终止位置开始排列项目。 对行来说是把项目移至右边， 对于列是把项目移至底部。</p><p>space-between：项目间保留一定间距地沿主轴居中排列。 第一个和最后一个项目被放置在容器边沿。 例如，在行中第一个项目会紧贴着容器左边，最后一个项目会紧贴着容器右边，然后其他项目均匀排布。</p><p>space-around：与space-between相似，但头尾两个项目不会紧贴容器边缘，所有项目之间的空间均匀排布。</p><p>space-evenly：在 flex 项目之间均匀分配空间，在 flex 容器的任一端都有一个完整的空间。<br>使用 justify-content 属性对齐元素</p><p>这个例子可以帮助你理解这个属性。 请为 #box-container 元素添加 CSS 属性 justify-content，并将其属性值设置为 center。</p><p>提示：<br>在编辑器里试试 justify-content 的其他可用值，看看它们之间的区别。 但要通过挑战，你必须把属性值设为 center。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    background: gray;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    justify-content: center;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="在推文中使用-justify-content-属性"><a href="#在推文中使用-justify-content-属性" class="headerlink" title="在推文中使用 justify-content 属性"></a>在推文中使用 justify-content 属性</h1><p>上一项挑战展示了 justify-content 属性的作用。 如果我们想对齐推文内的子元素，可以把给 .profile-name 元素应用这个属性。</p><p>在推文中使用 justify-content 属性</p><p>请在 header 中的 .profile-name 元素添加 CSS 属性 justify-content，把它的属性值设为上面挑战提到的任意可用值。</p><p>(.follow-btn 应在页面上呈现。 请关闭广告拦截器等任何扩展。</p><p>.profile-name 元素的 justify-content 属性可选用以下属性值：center、flex-start、flex-end、space-between、space-around 或 space-evenly。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header, footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-align-items-属性对齐元素"><a href="#使用-align-items-属性对齐元素" class="headerlink" title="使用 align-items 属性对齐元素"></a>使用 align-items 属性对齐元素</h1><p>align-items 属性与 justify-content 类似。 回忆一下，justify-content 属性使 flex 子元素沿主轴排列。 行的主轴是水平线，列的主轴是垂直线。</p><p>Flex 容器中，与主轴垂直的叫做 cross axis（交叉轴）。 行的交叉轴是垂直的，列的交叉轴是水平的。</p><p>CSS 中的 align-items 属性用来定义 flex 子元素沿交叉轴的对齐方式。 对行来说，定义的是元素的上下对齐方式； 对列来说，是定义元素的左右对齐方式。</p><p>align-items 的可选值包括：</p><p>flex-start：从 flex 容器的起始位置开始对齐项目。 对行来说，把项目移至容器顶部； 对列来说，是把项目移至容器左边。</p><p>flex-end：从 flex 容器的终止位置开始对齐项目。 对行来说，把项目移至容器底部； 对列来说，把项目移至容器右边。</p><p>center：把项目居中放置。 对行来说，垂直居中（项目距离顶部和底部的距离相等）； 对列来说，水平居中（项目距离左边和右边的距离相等）。</p><p>stretch：拉伸项目，填满 flex 容器。 例如，排成行的项目从容器顶部拉伸到底部。 如未设置align-items的值，那么这就是默认值。</p><p>baseline：沿基线对齐。 基线是文本相关的概念，可以认为它是字母排列的下端基准线。</p><p>使用 align-items 属性对齐元素<br>这个例子可以帮助你理解这个属性。 请在 #box-container 里添加 CSS 属性 align-items 并将值设为 center。</p><p>提示： 请在编辑器里试试 align-items 的其他值，看看它们之间的区别。 但要通过挑战，你必须把属性值设为 center。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    background: gray;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 200px;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 200px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;p&gt;Goodbye&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="在推文中使用-align-items-属性"><a href="#在推文中使用-align-items-属性" class="headerlink" title="在推文中使用 align-items 属性"></a>在推文中使用 align-items 属性</h1><p>在上一个挑战中，我们介绍了 align-items 属性并给出了示例。 我们可以对推文的几个嵌入元素使用这个属性，以调整其中 flex 元素的对齐方式。</p><p>在推文中使用 align-items 属性</p><p>为 header 中的 .follow-btn 元素添加 CSS 属性 align-items， 并将其属性值设为 center。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    font-family: Arial, sans-serif;</span><br><span class="line">  &#125;</span><br><span class="line">  header, footer &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-thumbnail &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .profile-name &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">     align-items: center;</span><br><span class="line">    margin: 0 0 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header .follow-btn button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  header h3, header h4 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner p &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">  #inner hr &#123;</span><br><span class="line">    margin: 20px 0;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats strong &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .stats .likes &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta &#123;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  footer .cta button &#123;</span><br><span class="line">    border: 0;</span><br><span class="line">    background: transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">  &lt;img src=&quot;https://freecodecamp.s3.amazonaws.com/quincy-twitter-photo.jpg&quot; alt=&quot;Quincy Larson&#x27;s profile picture&quot; class=&quot;profile-thumbnail&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;profile-name&quot;&gt;</span><br><span class="line">    &lt;h3&gt;Quincy Larson&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;@ossia&lt;/h4&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;follow-btn&quot;&gt;</span><br><span class="line">    &lt;button&gt;Follow&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div id=&quot;inner&quot;&gt;</span><br><span class="line">  &lt;p&gt;I meet so many people who are in search of that one trick that will help them work smart. Even if you work smart, you still have to work hard.&lt;/p&gt;</span><br><span class="line">  &lt;span class=&quot;date&quot;&gt;1:32 PM - 12 Jan 2018&lt;/span&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">  &lt;div class=&quot;stats&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;Retweets&quot;&gt;</span><br><span class="line">      &lt;strong&gt;107&lt;/strong&gt; Retweets</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;likes&quot;&gt;</span><br><span class="line">      &lt;strong&gt;431&lt;/strong&gt; Likes</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;cta&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;share-btn&quot;&gt;Share&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;retweet-btn&quot;&gt;Retweet&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;like-btn&quot;&gt;Like&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-wrap-属性包裹一行或一列"><a href="#使用-flex-wrap-属性包裹一行或一列" class="headerlink" title="使用 flex-wrap 属性包裹一行或一列"></a>使用 flex-wrap 属性包裹一行或一列</h1><p>CSS flexbox 具有将 flex 容器拆分为多行（或列）的功能。 默认情况下，flex 容器会调整项目大小，把它们都塞到一起。 对于行来说，所有项目都会在一条直线上。</p><p>不过，使用 flex-wrap 属性可以使项目换行展示。 这意味着多出来的子元素会被移到新的行或列。 换行发生的断点由子元素和容器的大小决定。</p><p>换行方向的可选值有这些：</p><p>nowrap：默认值，不换行。</p><p>wrap：如果排列以行为基准，就将行从上往下排列；如果排列以列为基准，就将列从左往右排列。</p><p>wrap-reverse：如果排列以行为基准，就将行从下往上排列；如果排列以列为基准，就将列从右往左排列。</p><p>使用 flex-wrap 属性包裹一行或一列</p><p>现在的布局中，一行里面的元素太多了。 请为 #box-container 元素添加 CSS 属性 flex-wrap，把将其属性值设为 wrap。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    background: gray;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 100%; </span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-3 &#123;</span><br><span class="line">    background-color: violet;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-4 &#123;</span><br><span class="line">    background-color: yellow;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-5 &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-6 &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">    width: 25%;</span><br><span class="line">    height: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-3&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-4&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-5&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-6&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-shrink-属性定义-flex-子元素的收缩规则"><a href="#使用-flex-shrink-属性定义-flex-子元素的收缩规则" class="headerlink" title="使用 flex-shrink 属性定义 flex 子元素的收缩规则"></a>使用 flex-shrink 属性定义 flex 子元素的收缩规则</h1><p>目前为止，挑战里提到的属性都是应用于 flex 容器（flex 子元素的父元素）的。 除此之外，flex 子元素也有很多实用属性。</p><p>首先介绍的是 flex-shrink 属性。 使用之后，如果 flex 容器太小，则子元素会自动缩小。 当容器的宽度小于里面所有子元素的宽度之和时，所有子元素都会自动压缩。</p><p>子元素的 flex-shrink 接受数值作为属性值。 数值越大，则该元素与其他元素相比会被压缩得更厉害。 比如，一个项目的 flex-shrink 属性值为 1，另一个项目的 flex-shrink 属性值为 3，那么后者相比前者会受到 3 倍压缩。</p><p>使用 flex-shrink 属性定义 flex 子元素的收缩规则</p><p>请为 #box-1 和 #box-2 添加 CSS 属性 flex-shrink。 将 #box-1 的属性值设为 1，将 #box-2 的属性值设为 2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-shrink: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-shrink: 2;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="使用-flex-grow-属性定义-flex-子元素的增长系数"><a href="#使用-flex-grow-属性定义-flex-子元素的增长系数" class="headerlink" title="使用 flex-grow 属性定义 flex 子元素的增长系数"></a>使用 flex-grow 属性定义 flex 子元素的增长系数</h1><p>与 flex-shrink 相对的是 flex-grow。 你应该还记得，flex-shrink 会在容器太小时对子元素作出调整。 相应地，flex-grow 会在容器太大时对子元素作出调整。</p><p>例子与上一个挑战相似，如果一个项目的 flex-grow 属性值为 1，另一个项目的 flex-grow 属性值为 3，那么值为 3 的一个会较另一个扩大 3 倍。</p><p>使用 flex-grow 属性定义 flex 子元素的增长系数</p><p>请为 #box-1 和 #box-2 添加 CSS 属性 flex-grow。 将 #box-1 的属性值设为 1，#box-2 的属性值设为 2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-grow: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-grow: 2;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-basis-属性设置元素的初始大小"><a href="#使用-flex-basis-属性设置元素的初始大小" class="headerlink" title="使用 flex-basis 属性设置元素的初始大小"></a>使用 flex-basis 属性设置元素的初始大小</h1><p>flex-basis 属性定义了在使用 CSS 的 flex-shrink 或 flex-grow 属性对元素进行调整前，元素的初始大小。</p><p>flex-basis 属性的单位与其他表示尺寸的属性的单位一致（px、em、% 等）。 如果值为 auto，则项目的尺寸随内容调整。</p><p>使用 flex-basis 属性设置元素的初始大小</p><p>使用 flex-basis 为盒子设置初始值。 请给 #box-1 和 #box-2 添加 CSS 属性 flex-basis。 设置 #box-1 的尺寸初始值为 10em，#box-2 的尺寸初始值为 20em。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-basis: 10em;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex-basis: 20em;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-flex-短方法属性"><a href="#使用-flex-短方法属性" class="headerlink" title="使用 flex 短方法属性"></a>使用 flex 短方法属性</h1><p>上面几个 flex 属性有一个简写方式。 flex-grow、flex-shrink 和 flex-basis 属性可以在 flex 中一并设置。</p><p>例如，flex: 1 0 10px; 会把项目属性设为 flex-grow: 1;、flex-shrink: 0; 以及 flex-basis: 10px;。</p><p>属性的默认设置是 flex: 0 1 auto;。</p><p>使用 flex 短方法属性</p><p>请给 #box-1 和 #box-2 添加 flex 属性。 设置 #box-1 的 flex-grow 属性值为 2、flex-shrink 属性值为 2、flex-basis 属性值为 150px。 设置 #box-2 的 flex-grow 属性值为 1、flex-shrink 属性值为 1、flex-basis 属性值为 150px。</p><p>通过上面的设置，在容器大于 300px 时，#box-1 扩大的空间会是 #box-2 扩大空间的两倍；在容器小于 300px 时，前者缩小的空间会是 #box-2 缩小空间的两倍。 300px 是两个盒子的 flex-basis 属性值之和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    flex: 2 2 150px;</span><br><span class="line">    height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    flex: 1 1 150px;</span><br><span class="line">    height: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-order-属性重新排列子元素"><a href="#使用-order-属性重新排列子元素" class="headerlink" title="使用 order 属性重新排列子元素"></a>使用 order 属性重新排列子元素</h1><p>order 属性告诉 CSS flex 容器里子元素的顺序。 默认情况下，项目排列顺序与源 HTML 文件中顺序相同。 这个属性接受数字作为参数，可以使用负数。</p><p>使用 order 属性重新排列子元素</p><p>请给 #box-1 和 #box-2 添加 CSS 属性 order， 并将 #box-1 的属性值设为 2，#box-2 的属性值设为 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    order:2;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    order: 1;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-align-self-属性"><a href="#使用-align-self-属性" class="headerlink" title="使用 align-self 属性"></a>使用 align-self 属性</h1><p>flex 子项目的最后一个属性是 align-self。 这个属性允许你调整单个子元素自己的对齐方式，而不会影响到全部子元素。 因为 float、clear 和 vertical-align 等调整对齐方式的属性都不能应用于 flex 子元素，所以这个属性显得十分有用。</p><p>align-self 可设置的值与 align-items 的一样，并且它会覆盖 align-items 所设置的值。</p><p>使用 align-self 属性</p><p>请为 #box-1 和 #box-2 添加 CSS 属性 align-self。 将 #box-1 的 align-self 属性值设为 center，将 #box-2 的设为 flex-end。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  #box-container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  #box-1 &#123;</span><br><span class="line">    background-color: dodgerblue;</span><br><span class="line">    align-self: center;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #box-2 &#123;</span><br><span class="line">    background-color: orangered;</span><br><span class="line">    align-self: flex-end;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;box-container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;box-1&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;box-2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/2024/07/10/CSS%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/10/CSS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>层叠样式表是一种样式表语言，用来描述 HTML 或 XML(包括如 SVG、MathML 或 XHTML 之类的 XML 分支语言)文档的呈现方式。CSS(层叠样式表)是美化网页的关键工具，通过本课程，您将学会如何运用 CSS 的各种属性和技巧，使您的网页看起来更具吸引力和专业性。您将了解如何控制文本样式、背景、布局，以及响应式设计等，让您的网页在各种设备上都能够优雅地展现。</p><h1 id="更改文本的颜色"><a href="#更改文本的颜色" class="headerlink" title="更改文本的颜色"></a>更改文本的颜色</h1><p>以下是将 h2 元素设置为蓝色的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 style=&quot;color: blue;&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p><em><strong>请注意，需要在内联 style 声明末尾加上 ;</strong></em></p><h1 id="使用元素选择器来设置元素的样式"><a href="#使用元素选择器来设置元素的样式" class="headerlink" title="使用元素选择器来设置元素的样式"></a>使用元素选择器来设置元素的样式</h1><p>在代码的顶部，创建一个 style 声明区域，如下方所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在样式声明区域内，可以为所有 h2 元素创建一个 CSS selector。 如果想让所有 h2 元素在变成红色，可以添加下方的样式规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  h2 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>请注意，每个元素的样式规则都应该有开始和结束大括号（{ 和 }）。 还需要确保元素的样式定义在开始和结束样式标签之间。 你需要确保所有样式规则位于花括号之间，并且每条样式规则都以<em><strong>分号</strong></em>结束。</p><h1 id="使用-class-选择器设置单个元素的样式"><a href="#使用-class-选择器设置单个元素的样式" class="headerlink" title="使用 class 选择器设置单个元素的样式"></a>使用 class 选择器设置单个元素的样式</h1><p>CSS 的 class 具有可重用性，可应用于各种 HTML 元素。</p><p>一个 CSS class 声明示例如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .blue-text &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>可以看到，我们在 &lt;style&gt; 样式声明区域里，创建了一个名为 blue-text 的 class 选择器。 你可以这样将 class 应用于 HTML 元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 class=&quot;blue-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p> 注意:在 CSS style 元素里，class 名以一个<em><strong>句点</strong></em>开头。 在 HTML 元素的 class 属性中，class 名的开头<em><strong>没有句点</strong></em></p><h1 id="使用-class-选择器设置多个元素的样式"><a href="#使用-class-选择器设置多个元素的样式" class="headerlink" title="使用 class 选择器设置多个元素的样式"></a>使用 class 选择器设置多个元素的样式</h1><p>通过 CSS class 选择器，多个 HTML 元素可以使用相同的 CSS 样式规则</p><h1 id="更改元素的字体大小"><a href="#更改元素的字体大小" class="headerlink" title="更改元素的字体大小"></a>更改元素的字体大小</h1><p>字体大小由 font-size 属性控制，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置元素的字体族名"><a href="#设置元素的字体族名" class="headerlink" title="设置元素的字体族名"></a>设置元素的字体族名</h1><p>通过 font-family 属性，我们可以设置元素里的字体族名。</p><p>如果你想将 h2 元素的字体设置为 sans-serif，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h2 &#123;</span><br><span class="line">  font-family: sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="引入谷歌字体"><a href="#引入谷歌字体" class="headerlink" title="引入谷歌字体"></a>引入谷歌字体</h1><p>在我们的网站上，除了使用系统提供的默认字体以外，我们也可以使用自定义字体。 网络上有很多字体库。 在这个例子中，我们将使用 Google 字体库</p><p>Google 字体库是一个免费的 Web 字体库，我们只需要在 CSS 里引用字体的 URL 即可使用</p><p>要引入 Google Font，你需要从 Google Fonts 上复制字体的 URL，并粘贴到你的 HTML 里面。 在这个挑战中，我们需要引入 Lobster 字体。 因此，请复制以下代码段，并粘贴到代码编辑器顶部，即放到 style 标签之前。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br></pre></td></tr></table></figure><p>现在可以在 CSS 中使用 Lobster 字体，并像下面一样使用 Lobster 作为 FAMILY_NAME：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: FAMILY_NAME, GENERIC_NAME;</span><br></pre></td></tr></table></figure><p>GENERIC_NAME 是可选的，它用来指明在其他字体不可用时的后备字体。 我们会在下一个挑战中详细说明</p><p>字体名区分大小写，并且如果字体名含有空格，则在声明时需要用引号包起来。 例如，使用 “Open Sans” 字体需要添加引号，而 Lobster 则不需要</p><h1 id="字体如何优雅降级"><a href="#字体如何优雅降级" class="headerlink" title="字体如何优雅降级"></a>字体如何优雅降级</h1><p>所有浏览器都有几种默认字体， 包括 monospace、serif 和 sans-serif</p><p>在字体不可用的时候，你可以告诉浏览器通过“降级”去使用其他字体</p><p>如果你想将一个元素的字体设置成 Helvetica，但当 Helvetica 不可用时，降级使用 sans-serif 字体，那么可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  font-family: Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通用字体名不区分大小写。 同时，也不需要使用引号，因为它们是 CSS 中的关键字</p><hr><p>eg:<br>字体如何优雅降级<br>首先，添加 monospace 字体到 h2 元素里，它现在拥有 Lobster 和 monospace 两种字体。</p><p>在上一个挑战里，你已经通过 link 标签从谷歌字体库引入了 Lobster 字体。 现在让我们使用之前学习的 HTML 注释，将 Lobster 字体的引入(是最上面引入url那个)注释掉，这样一来，这个引入的字体就会失效。 此时，你会发现 h2 元素降级到了 monospace 字体。</p><p>Note: 如果你的电脑里已经安装了 Lobster 字体，你就看不到这个降级过程，因为浏览器会在你的电脑中找到该字体</p><hr><h1 id="调整图片大小"><a href="#调整图片大小" class="headerlink" title="调整图片大小"></a>调整图片大小</h1><p>CSS 的 width 属性可以控制元素的宽度。 和设置文本字号一样，我们会以 px（像素）为单位来设置图片的宽度。</p><p>例如，如果你想创建一个叫 larger-image 的 CSS class，来控制 HTML 元素的宽度为 500px，就可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .larger-image &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><p>eg:</p><p>调整图片的大小</p><p>创建一个叫 smaller-image 的 CSS class，并用它来设置图片宽度为 100px。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .red-text &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h2 &#123;</span><br><span class="line">    font-family: Lobster, monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">  &#125;</span><br><span class="line">  .smaller-image&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;red-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;p class=&quot;red-text&quot;&gt;Click here to view more &lt;a href=&quot;#&quot;&gt;cat photos&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;smaller-image&quot; src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Things cats love:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;Top 3 things cats hate:&lt;/p&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; checked&gt; Indoor&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot; checked&gt; Loving&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Energetic&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><h1 id="在元素周围添加边框"><a href="#在元素周围添加边框" class="headerlink" title="在元素周围添加边框"></a>在元素周围添加边框</h1><p>CSS 边框具有 style、color、width 属性。</p><p>假如我们要将一个 HTML 元素边框设置为 5px 的红色实线边框，我们可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .thin-red-border &#123;</span><br><span class="line">    border-color: red;</span><br><span class="line">    border-width: 5px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><p>eg:</p><p>在元素周围添加边框</p><p>创建一个名为 thick-green-border 的 class， 该 class 应在 HTML 元素周围添加一个 10px 的绿色实线边框。 将这个 class 应用于你的猫图。</p><p>记得在一个元素上可以同时应用多个 class，使用空格来分隔不同 class 即可， 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img class=&quot;class1 class2&quot;&gt;</span><br></pre></td></tr></table></figure><p>完整：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .red-text &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h2 &#123;</span><br><span class="line">    font-family: Lobster, monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .smaller-image &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .thick-green-border&#123;</span><br><span class="line">     border-color: green;</span><br><span class="line">    border-width: 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;red-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;p class=&quot;red-text&quot;&gt;Click here to view more &lt;a href=&quot;#&quot;&gt;cat photos&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;smaller-image thick-green-border&quot; src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Things cats love:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;Top 3 things cats hate:&lt;/p&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; checked&gt; Indoor&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot; checked&gt; Loving&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Energetic&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><h1 id="用-border-radius-添加圆角边框"><a href="#用-border-radius-添加圆角边框" class="headerlink" title="用 border-radius 添加圆角边框"></a>用 border-radius 添加圆角边框</h1><p>猫咪图片的四个角看起来很尖锐， 我们可以使用 border-radius 属性来让它变得圆润。</p><p>用 border-radius 添加圆角边框<br>border-radius 的属性值单位可以是 px（像素）。 请将猫咪图片 border-radius 的属性值设置为 10px。</p><p>注意： 这个挑战有多个解决方法。 例如，添加 border-radius 属性到 .thick-green-border 或 .smaller-image 都是可行的。</p><h1 id="用-border-radius-制作圆形图片"><a href="#用-border-radius-制作圆形图片" class="headerlink" title="用 border-radius 制作圆形图片"></a>用 border-radius 制作圆形图片</h1><p>除像素外，你也可以使用百分比来指定 border-radius 的值。</p><p>用 border-radius 制作圆形图片<br>将 border-radius 的属性值设置为 50%。</p><h1 id="给-div-元素添加背景色"><a href="#给-div-元素添加背景色" class="headerlink" title="给 div 元素添加背景色"></a>给 div 元素添加背景色</h1><p>background-color 属性可以设置元素的背景颜色。</p><p>如果想将一个元素的背景颜色改为 green，可以在 style 里面这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.green-background &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>eg:</p><p>创建一个叫作 silver-background 的 class，并设置 background-color 为 silver。 之后，将这个 class 添加到 div 元素上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .red-text &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h2 &#123;</span><br><span class="line">    font-family: Lobster, monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .thick-green-border &#123;</span><br><span class="line">    border-color: green;</span><br><span class="line">    border-width: 10px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .smaller-image &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line">  .silver-background&#123;</span><br><span class="line">     background-color: silver;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;red-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;p class=&quot;red-text&quot;&gt;Click here to view more &lt;a href=&quot;#&quot;&gt;cat photos&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=&quot;#&quot;&gt;&lt;img class=&quot;smaller-image thick-green-border&quot; src=&quot;https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg&quot; alt=&quot;A cute orange cat lying on its back.&quot;&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;silver-background&quot;&gt;</span><br><span class="line">    &lt;p&gt;Things cats love:&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;cat nip&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;laser pointers&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;lasagna&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;p&gt;Top 3 things cats hate:&lt;/p&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">      &lt;li&gt;flea treatment&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;thunder&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;other cats&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;form action=&quot;https://freecatphotoapp.com/submit-cat-photo&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot; checked&gt; Indoor&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;indoor-outdoor&quot;&gt; Outdoor&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot; checked&gt; Loving&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Lazy&lt;/label&gt;</span><br><span class="line">    &lt;label&gt;&lt;input type=&quot;checkbox&quot; name=&quot;personality&quot;&gt; Energetic&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;cat photo URL&quot; required&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/main&gt;</span><br></pre></td></tr></table></figure><h1 id="设置元素的-id"><a href="#设置元素的-id" class="headerlink" title="设置元素的 id"></a>设置元素的 id</h1><p>除了 class 属性，每一个 HTML 元素都有一个 id 属性。</p><p>使用 id 有几个好处：你可以通过 id 选择器来改变单个元素的样式。在稍后的课程中，你还会了解到如何在 JavaScript 里面用它来选择和操作元素。</p><p>根据规范，id 属性应是唯一的。 尽管浏览器并非必须执行这条规范，但这是广泛认可的最佳实践。 因此，请不要给多个元素设置相同的 id。</p><p>设置 h2 元素的 id 为 cat-photo-app 的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 id=&quot;cat-photo-app&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="使用-id-属性来设定元素的样式"><a href="#使用-id-属性来设定元素的样式" class="headerlink" title="使用 id 属性来设定元素的样式"></a>使用 id 属性来设定元素的样式</h1><p>通过 id 属性，你可以做一些很酷的事情。就像 class 一样，你可以使用 CSS 来设置他们的样式。</p><p>不过，id 不可以重复，它只能作用于一个元素上。 如果一个元素同时应用了 class 和 id，且两者设置的样式有冲突，会优先应用 id 中所设置的样式。</p><p>选择 id 为 cat-photo-element 的元素，并设置它的背景颜色为绿色。 可以在 style 标签里这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#cat-photo-element &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在 style 标签里，声明 class 的时候必须在名字前插入 . 符号。 同样，在声明 id 的时候，也必须在名字前插入 # 符号。</p><h1 id="元素的内边距-外边距"><a href="#元素的内边距-外边距" class="headerlink" title="元素的内边距,外边距"></a>元素的内边距,外边距</h1><p>我们暂时把要做的猫咪图片 App 放在一边，先来多了解一下如何给 HTML 添加样式。</p><p>你可能已经注意到了，所有的 HTML 元素都是以矩形为基础。</p><p>每个 HTML 元素所占有的矩形空间由这三个重要的属性来控制：内边距 padding、外边距 margin 、边框 border。</p><p>padding 用来控制着元素内容与 border 之间的空隙大小。</p><p>元素的 margin（外边距） 用来控制元素 border（边框） 与其周围元素之间的距离大小</p><h1 id="给元素的每一侧添加不同的内边距"><a href="#给元素的每一侧添加不同的内边距" class="headerlink" title="给元素的每一侧添加不同的内边距"></a>给元素的每一侧添加不同的内边距</h1><p>有时候，你会想给一个元素每个方向的 padding 都设置一个特定的值</p><p>CSS 允许你使用 padding-top、padding-right、padding-bottom、padding-left 属性来设置四个不同方向的 padding 值。</p><h1 id="给元素的每一侧添加不同的外边距"><a href="#给元素的每一侧添加不同的外边距" class="headerlink" title="给元素的每一侧添加不同的外边距"></a>给元素的每一侧添加不同的外边距</h1><p>有时候，你会想给一个元素每个方向的 margin 都设置成一个特定的值。</p><p>CSS 允许你使用 margin-top、margin-right、margin-bottom、margin-left 属性来设置四个不同方向的 margin 值。</p><h1 id="使用顺时针标记指定元素的内边距"><a href="#使用顺时针标记指定元素的内边距" class="headerlink" title="使用顺时针标记指定元素的内边距"></a>使用顺时针标记指定元素的内边距</h1><p>如果不想每次都要分别声明 padding-top、padding-right、padding-bottom、padding-left 属性，可以把它们汇总在一行里面一并声明，像是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">padding: 10px 20px 10px 20px;</span><br></pre></td></tr></table></figure><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的内边距。</p><h1 id="使用顺时针标记指定元素的外边距"><a href="#使用顺时针标记指定元素的外边距" class="headerlink" title="使用顺时针标记指定元素的外边距"></a>使用顺时针标记指定元素的外边距</h1><p>同样，每个方向的外边距值可以在一行里面汇总声明，而无需分别通过 margin-top、margin-right、margin-bottom、margin-left 分别声明，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin: 10px 20px 10px 20px;</span><br></pre></td></tr></table></figure><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的外边距值。</p><h1 id="使用属性选择器来设置元素的样式"><a href="#使用属性选择器来设置元素的样式" class="headerlink" title="使用属性选择器来设置元素的样式"></a>使用属性选择器来设置元素的样式</h1><p>我们已经通过设置元素的 id 和 class 来显示想要的样式。 这就是 ID 选择器和 Class 选择器。 另外，也还有其他的 CSS 选择器可以让我们给特定的元素设置样式。</p><p>让我们再次通过猫咪图片项目来练习 CSS 选择器。</p><p>在这个挑战里，我们需要使用 [attr&#x3D;value] 属性选择器来修改 CatPhotoApp 中复选框的样式。 这个选择器使用特定的属性值来匹配和设置元素样式。 例如，下面的代码会改变所有 type 为 radio 的元素的外边距。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[type=&#x27;radio&#x27;] &#123;</span><br><span class="line">  margin: 20px 0px 20px 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="理解绝对单位与相对单位"><a href="#理解绝对单位与相对单位" class="headerlink" title="理解绝对单位与相对单位"></a>理解绝对单位与相对单位</h1><p>最近的几个挑战都是设置元素的内边距和外边距的 px 值，即像素。 像素是一个长度单位，它告诉浏览器应该如何调整元素的大小和位置。 其实除了 px，CSS 也有其他单位供我们使用。</p><p>单位长度的类型可以分成 2 种：相对和绝对。 绝对单位与长度的物理单位相关。 例如，<em><strong>in 和 mm</strong></em> 分别代表着英寸和毫米。 绝对长度单位会接近屏幕上的实际测量值，不过不同屏幕的分辨率会存在差异，这就可能会造成误差。</p><p>相对单位长度，比如 <em><strong>em 和 rem</strong></em>，它们的实际值会依赖其他长度的值而决定。 比如 em 的大小基于元素字体的字体大小。 如果使用它来设置 font-size 值，它的值会跟随父元素的 font-size 值来改变。</p><p>Note: 有些单位长度选项是相对视窗大小来改变值的， 这种设定符合响应式网页设计的原则。</p><h1 id="给-HTML-的-body-元素添加样式"><a href="#给-HTML-的-body-元素添加样式" class="headerlink" title="给 HTML 的 body 元素添加样式"></a>给 HTML 的 body 元素添加样式</h1><p>现在让我们来讨论一下 CSS 中的继承。</p><p>每一个 HTML 页面都有一个 body 元素。</p><p>给 HTML 的 body 元素添加样式<br>我们可以通过设置 background-color 的属性值为 黑色，来证明 body 元素的存在。</p><p>请将以下代码添加到 style 标签里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="从-body-元素继承样式"><a href="#从-body-元素继承样式" class="headerlink" title="从 body 元素继承样式"></a>从 body 元素继承样式</h1><p>我们已经证明每一个 HTML 页面都含有 body 元素，我们也可以在 body 元素上使用 CSS 样式。</p><p>设置 body 元素样式的方法跟设置其他 HTML 元素样式的方式一样，并且其他元素也会继承 body 中所设置的样式。</p><hr><p>eg:</p><p>从 body 元素继承样式<br>首先，创建一个内容文本为 Hello World 的 h1 元素。</p><p>接着，在 body 的 CSS 规则里面添加 color: green;，这会将页面内所有字体的颜色都设置为 green。</p><p>最后，在 body 的 CSS 规则里面添加 font-family: monospace;，这会将 body 内所有元素的字体都设置为 monospace。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">  Hello World;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=&quot;color: green;font-family: monospace;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="样式中的优先级"><a href="#样式中的优先级" class="headerlink" title="样式中的优先级"></a>样式中的优先级</h1><p>有时候，HTML 元素的样式会跟其他样式发生冲突。</p><p>就像 h1 元素不能同时设置绿色和粉色两种颜色。</p><p>让我们尝试创建一个字体颜色为粉色的 class，并应用于其中一个元素中。 猜一猜，它会 覆盖 body 元素的 color: green; CSS 规则吗？</p><p>样式中的优先级<br>创建一个能将元素的字体颜色改为粉色的 class，并命名为 pink-text。</p><p>给 h1 元素添加 pink-text class。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  body &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">    font-family: monospace;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line">  .pink-text&#123;</span><br><span class="line">    color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;h1 class=&quot;pink-text&quot;&gt;Hello World!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h1 id="Class-选择器的优先级高于继承样式"><a href="#Class-选择器的优先级高于继承样式" class="headerlink" title="Class 选择器的优先级高于继承样式"></a>Class 选择器的优先级高于继承样式</h1><p>我们的 pink-text class 覆盖了 body 元素的 CSS 样式！</p><p>我们刚刚证明了 class 会覆盖 body 的 CSS 样式。 那么下一个问题是，要怎么样才能覆盖 pink-text class 中所定义的样式？</p><p>Class 选择器的优先级高于继承样式<br>创建一个 blue-text class，将元素的颜色设置为蓝色。 将它放在 pink-text class 下面。</p><p>将 blue-text class 应用于 h1 元素，看看它和该元素上的 pink-text class 哪一个会优先显示。</p><p>将多个 class 属性应用于一个 HTML 元素，需以空格来间隔这些属性，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class=&quot;class1 class2&quot;</span><br></pre></td></tr></table></figure><p>注意： HTML 元素里应用的 class 的先后顺序无关紧要。</p><p>但是，在 &lt;style&gt; 标签里面声明的 class 顺序十分重要，<em><strong>之后的声明会覆盖之前的声明。 第二个声明的优先级始终高于第一个声明。</strong></em> 由于 .blue-text 是在后面声明的，所以它的样式会覆盖 .pink-text 里的样式。</p><h1 id="ID-选择器优先级高于-Class-选择器"><a href="#ID-选择器优先级高于-Class-选择器" class="headerlink" title="ID 选择器优先级高于 Class 选择器"></a>ID 选择器优先级高于 Class 选择器</h1><p>我们刚刚证明了浏览器读取 CSS 是由上到下的。 这就意味着，如果发生冲突，浏览器将会应用最后声明的样式。 注意，如果我们在 h1 元素的类中，将 blue-text 放置在 pink-text 之前，它仍然会检查声明顺序，而不是使用顺序！</p><p>但我们还没有完成。 其实还有其他方法可以覆盖 CSS 样式。 你还记得 id 属性吗？</p><p>我们来通过给 h1 元素添加 id 属性，覆盖 pink-text 和 blue-text 类，使 h1 元素变成橘色。</p><p>ID 选择器优先级高于 Class 选择器<br>给 h1 元素添加 id 属性，属性值为 orange-text。 设置方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;orange-text&quot;&gt;</span><br></pre></td></tr></table></figure><p>h1 元素需继续保留 blue-text 和 pink-text 这两个 class。</p><p>在 style 元素中创建名为 orange-text 的 id 选择器。 例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#brown-text &#123;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 无论在 pink-text class 之前或者之后声明，id 选择器的优先级总是高于 class 选择器。</p><h1 id="内联样式的优先级高于-ID-选择器"><a href="#内联样式的优先级高于-ID-选择器" class="headerlink" title="内联样式的优先级高于 ID 选择器"></a>内联样式的优先级高于 ID 选择器</h1><p>我们刚刚证明了，id 选择器无论在 style 标签的任何位置声明，都会覆盖 class 声明的样式。</p><p>其实还有其他方法可以覆盖 CSS 样式。 你还记得行内样式吗？</p><p>内联样式的优先级高于 ID 选择器<br>使用行内样式尝试让 h1 的字体颜色变白。 记住，内联样式看起来是像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 style=&quot;color: green;&quot;&gt;</span><br></pre></td></tr></table></figure><p>h1 元素应继续保留 blue-text 和 pink-text 这两个 class。</p><h1 id="Important-的优先级最高"><a href="#Important-的优先级最高" class="headerlink" title="Important 的优先级最高"></a>Important 的优先级最高</h1><p>耶！ 我们刚刚又证明了行内样式会覆盖 style 标签里面所有的 CSS 声明。</p><p>不过， 还有一种方式可以覆盖重新 CSS 样式。 这是所有方法里面最强大的一个。 在此之前，我们要考虑清楚，为什么我们要覆盖 CSS 样式。</p><p>很多时候，你会使用 CSS 库， CSS 库中的样式会意外覆盖你的 CSS 样式。 如果想保证你的 CSS 样式不受影响，你可以使用 !important。</p><p>让我们回到 pink-text 类声明。 pink-text 类的颜色样式已被之后的 class 声明、id 声明以及行内样式所覆盖。</p><p>Important 的优先级最高<br>给粉红文本元素的颜色声明添加关键词 !important，以确保 h1 元素为粉红色。</p><p>如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color: red !important;</span><br></pre></td></tr></table></figure><h1 id="使用十六进制编码获得指定颜色"><a href="#使用十六进制编码获得指定颜色" class="headerlink" title="使用十六进制编码获得指定颜色"></a>使用十六进制编码获得指定颜色</h1><p>你知道在 CSS 里面还有其他方式来代表颜色吗？ 其中一个方法叫十六进制编码，简称 hex。</p><p>日常生活中，我们使用的计数方法一般是 decimals，或十进制，即使用数字 0 到 9 来表示。 而 Hexadecimals（或 hex）基于 16 位数字， 它包括 16 种不同字符。 像十进制一样，0-9 的符号代表 0 到 9 的值。 然后，A、B、C、D、E、F 代表 10 至 15 的值。 总的来说，0 到 F 在十六进制里代表数字，总共有 16 个值。 你可以在此处找到更多关于十六进制的信息。</p><p>在 CSS 里面，我们可以使用 6 个十六进制的数字来代表颜色，每两个数字控制一种颜色，分别是红（R）、绿（G）、蓝（B）。 例如，#000000 代表黑色，同时也是最小的值。 你可以在<a href="https://www.freecodecamp.org/news/rgb-color-html-and-css-guide/#whatisthergbcolormodel">此处</a>找到更多关于 RGB 颜色系统的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  color: #000000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用十六进制编码混合颜色"><a href="#使用十六进制编码混合颜色" class="headerlink" title="使用十六进制编码混合颜色"></a>使用十六进制编码混合颜色</h1><p>回顾一下，十六进制编码使用 6 个十六进制字符来表示颜色，两个字符为一组，分别代表红（R）、绿（G）、蓝（B）。</p><p>通过三原色（红、绿、蓝），我们可以创建 1600 万种不同颜色。</p><p>例如，橘色是纯红色混合一些绿色而成，其中没有蓝色。 在十六进制编码里面，它可以写成 #FFA500。</p><p>0 是十六进制里面最小的数字，表示没有颜色。</p><p>F 是十六进制里面最大的数字，有最高的亮度。</p><p>使用十六进制编码混合颜色<br>把 style 标签里面的颜色值用正确的十六进制编码替换。</p><p><em><strong>颜色十六进制编码</strong></em></p><ul><li>道奇蓝#1E90FF</li><li>绿色#00FF00</li><li>橙色#FFA500</li><li>红色#FF0000</li></ul><h1 id="使用缩写的十六进制编码"><a href="#使用缩写的十六进制编码" class="headerlink" title="使用缩写的十六进制编码"></a>使用缩写的十六进制编码</h1><p>许多人对超过 1600 万种颜色感到不知所措， 并且很难记住十六进制编码。 幸运的是，你可以使用缩写形式。</p><p>例如，红色的 #FF0000 十六进制编码可以缩写成 #F00。 在这种缩写形式里，三个数字分别代表着红（R）、绿（G）、蓝（B）三原色。</p><p>这样，颜色的数量减少到了大约 4000 种。 且在浏览器里 #FF0000 和 #F00 是完全相同的颜色。</p><p>使用缩写的十六进制编码<br>接下来，使用缩写的十六进制编码给元素设置正确的颜色。</p><p><em><strong>颜色十六进制编码缩写形式</strong></em></p><ul><li>蓝绿色#0FF</li><li>绿色#0F0</li><li>红色#F00</li><li>紫红色#F0F</li></ul><h1 id="使用-RGB-值为元素上色"><a href="#使用-RGB-值为元素上色" class="headerlink" title="使用 RGB 值为元素上色"></a>使用 RGB 值为元素上色</h1><p>RGB 值是在 CSS 中表示颜色的另一种方法。</p><p>黑色的 RGB 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgb(0, 0, 0)</span><br></pre></td></tr></table></figure><p>白色的 RGB 值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rgb(255, 255, 255)</span><br></pre></td></tr></table></figure><p>RGB 值与我们之前学到的十六进制编码不同。RGB 值不需要用到 6 位十六进制数字，而只需要指定每种颜色的亮度大小，数值范围从 0 到 255。</p><p>如果我们稍微计算一下，就不难发现这两种表示方式本质上是等价的。在十六进制编码中，我们用两个十六进制数表示一个颜色；这样，每种颜色都有 16 * 16（即 256）种可能。 所以，RGB 从零开始计算，与十六进制代码的值的数量完全相同。</p><p>下面是通过使用 RGB 值设置背景颜色为橘色的例子：body。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: rgb(255, 165, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用-RGB-混合颜色"><a href="#使用-RGB-混合颜色" class="headerlink" title="使用 RGB 混合颜色"></a>使用 RGB 混合颜色</h1><p>就像使用十六进制编码一样，你可以通过不同值的组合，来混合得到不同的 RGB 颜色。</p><p>使用 RGB 混合颜色<br>将 style 标签里面中的十六进制编码替换为正确的 RGB 值。</p><p><em><strong>颜色RGB</strong></em></p><ul><li>蓝色rgb(0, 0, 255)</li><li>红色rgb(255, 0, 0)</li><li>淡紫色rgb(218, 112, 214)</li><li>赭黄色rgb(160, 82, 45)</li></ul><h1 id="使用-CSS-变量一次更改多个元素"><a href="#使用-CSS-变量一次更改多个元素" class="headerlink" title="使用 CSS 变量一次更改多个元素"></a>使用 CSS 变量一次更改多个元素</h1><p>CSS 变量可以实现仅需要更新一个值，就可以将更改应用到多个 CSS 样式属性的强大方法。</p><p>按照下面指示的来做，我们只需要改变三个值，多个样式将会同时被修改。</p><p>使用 CSS 变量一次更改多个元素<br>在 penguin class 里，将 black 改为 gray；gray 改为 white；yellow 改为 orange。</p><p>小企鹅：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .penguin &#123;</span><br><span class="line"></span><br><span class="line">    /* Only change code below this line */</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: white;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">    /* Only change code above this line */</span><br><span class="line"></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: -5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 35%;</span><br><span class="line">    height: 35%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background:#c6faf1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="创建一个自定义的-CSS-变量"><a href="#创建一个自定义的-CSS-变量" class="headerlink" title="创建一个自定义的 CSS 变量"></a>创建一个自定义的 CSS 变量</h1><p>为创建一个 CSS 变量，你只需要在变量名前添加两个连字符号，并为其赋值即可，例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--penguin-skin: gray;</span><br></pre></td></tr></table></figure><p>这样就会创建一个 –penguin-skin 变量，它的值为 gray。</p><hr><p>创建变量后，CSS 属性可以通过调用变量名来使用它对应的值。</p><p>background: var(–penguin-skin);<br>因为引用了 –penguin-skin 变量的值，使用了这个样式的元素背景颜色会是灰色。 请注意，除非变量名称完全匹配，否则将不会应用样式。</p><h1 id="给-CSS-变量设置备用值"><a href="#给-CSS-变量设置备用值" class="headerlink" title="给 CSS 变量设置备用值"></a>给 CSS 变量设置备用值</h1><p>使用变量来作为 CSS 属性值的时候，可以设置一个备用值来防止由于某些原因导致变量不生效的情况。</p><p>注意： 备用值不是用于增强浏览器的兼容性，它也不适用于 IE 浏览器。 相反，它是用来让浏览器在找不到你的变量时可以显示一种颜色。</p><p>下面是操作方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: var(--penguin-skin, black);</span><br></pre></td></tr></table></figure><p>如果你的变量没有设置，这将会把背景设置为 black。 提示：这对调试代码也会很有帮助。</p><h1 id="通过浏览器降级提高兼容性"><a href="#通过浏览器降级提高兼容性" class="headerlink" title="通过浏览器降级提高兼容性"></a>通过浏览器降级提高兼容性</h1><p>使用 CSS 时可能会遇到浏览器兼容性问题。 提供浏览器降级方案来避免潜在的问题会显得很重要。</p><p>当浏览器解析页面的 CSS 时，会自动忽视不能识别或者不支持的属性。 举个例子，如果使用 CSS 变量来指定站点的背景色，IE 浏览器由于不支持 CSS 变量而会忽略背景色。 此时，浏览器会尝试使用其它值。 但如果没有找到其它值，则会使用默认值，也就是没有背景色。</p><p>这意味着如果想提供浏览器降级方案，在声明之前提供另一个更宽泛的值即可。 这样老旧的浏览器会降级使用这个方案，新的浏览器会在后面的声明里覆盖降级方案。</p><hr><p>eg:</p><p>我们使用了 CSS 变量来定义 .red-box 的背景色。 现在，我们通过在现有的声明之前添加另一个 background 声明，并将它的值设置为 red，来提升浏览器的兼容性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    --red-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">  .red-box &#123;</span><br><span class="line">    background: red;</span><br><span class="line">    background: var(--red-color);</span><br><span class="line">    height: 200px;</span><br><span class="line">    width:200px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;red-box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="继承-CSS-变量"><a href="#继承-CSS-变量" class="headerlink" title="继承 CSS 变量"></a>继承 CSS 变量</h1><p>当创建一个变量时，变量会在创建变量的选择器里可用。 同时，在这个选择器的后代选择器里也是可用的。 这是因为 CSS 变量是可继承的，和普通的属性一样。</p><p>CSS 变量经常会定义在 :root 元素内，这样就可被<em><strong>所有选择器继承</strong></em></p><p>:root 是一个伪类选择器，它是一个能够匹配文档根元素的选择器，通常指的是 html 元素。 我们在 :root 里创建变量在全局都可用，即在任何选择器里都生效。</p><p>eg:</p><p>在 :root 选择器里定义变量 –penguin-belly 并设置它的属性值为 pink。 此时，你会发现变量被继承，所有使用该变量的子元素都会有粉色背景。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    /* Only change code below this line */</span><br><span class="line">--penguin-belly:pink;</span><br><span class="line">    /* Only change code above this line */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background: var(--penguin-belly, #c6faf1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin &#123;</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: -5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 35%;</span><br><span class="line">    height: 35%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="更改特定区域的变量"><a href="#更改特定区域的变量" class="headerlink" title="更改特定区域的变量"></a>更改特定区域的变量</h1><p>当你在 :root 里创建变量时，这些变量的作用域是整个页面。</p><p>然后，你可以通过在一个特定的选择器中再次设置这些变量来重写这些变量。</p><p>eg:</p><p>在 penguin class 里，请设置 –penguin-belly 的值为 white</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: pink;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background: var(--penguin-belly, #c6faf1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin &#123;</span><br><span class="line">    /* Only change code below this line */</span><br><span class="line">  --penguin-belly: white;</span><br><span class="line">    /* Only change code above this line */</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, pink);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, pink);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, pink);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: -5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 35%;</span><br><span class="line">    height: 35%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="使用媒体查询更改变量"><a href="#使用媒体查询更改变量" class="headerlink" title="使用媒体查询更改变量"></a>使用媒体查询更改变量</h1><p>CSS 变量可以简化媒体查询的定义方式。</p><p>例如，当屏幕小于或大于媒体查询所设置的值，只要我们更新变量的值，那么使用了此变量的元素样式就都会更改。</p><p>eg:</p><p>在媒体查询声明的 :root 选择器里，重定义 –penguin-size 的值为 200px。 同时，重新定义 –penguin-skin 的值为 black， 然后通过缩放页面来查看它们是否生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  :root &#123;</span><br><span class="line">    --penguin-size: 300px;</span><br><span class="line">    --penguin-skin: gray;</span><br><span class="line">    --penguin-belly: white;</span><br><span class="line">    --penguin-beak: orange;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @media (max-width: 350px) &#123;</span><br><span class="line">    :root &#123;</span><br><span class="line">      /* Only change code below this line */</span><br><span class="line">         --penguin-size: 200px;</span><br><span class="line">         --penguin-skin: black;</span><br><span class="line">      /* Only change code above this line */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: auto;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 5%;</span><br><span class="line">    width: var(--penguin-size, 300px);</span><br><span class="line">    height: var(--penguin-size, 300px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 35%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-cheek &#123;</span><br><span class="line">    top: 15%;</span><br><span class="line">    left: 5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: 70%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .belly &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 2.5%;</span><br><span class="line">    background: var(--penguin-belly, white);</span><br><span class="line">    width: 95%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 120% 120% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-top &#123;</span><br><span class="line">    top: 10%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 60% 60%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin-bottom &#123;</span><br><span class="line">    top: 40%;</span><br><span class="line">    left: 23.5%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 53%;</span><br><span class="line">    height: 45%;</span><br><span class="line">    border-radius: 70% 70% 100% 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-hand &#123;</span><br><span class="line">    top: 5%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-skin, black);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 120% 30%;</span><br><span class="line">    transform: rotate(130deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">    animation-duration: 3s;</span><br><span class="line">    animation-name: wave;</span><br><span class="line">    animation-iteration-count: infinite;</span><br><span class="line">    transform-origin:0% 0%;</span><br><span class="line">    animation-timing-function: linear;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @keyframes wave &#123;</span><br><span class="line">      10% &#123;</span><br><span class="line">        transform: rotate(110deg);</span><br><span class="line">      &#125;</span><br><span class="line">      20% &#123;</span><br><span class="line">        transform: rotate(130deg);</span><br><span class="line">      &#125;</span><br><span class="line">      30% &#123;</span><br><span class="line">        transform: rotate(110deg);</span><br><span class="line">      &#125;</span><br><span class="line">      40% &#123;</span><br><span class="line">        transform: rotate(130deg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  .left-hand &#123;</span><br><span class="line">    top: 0%;</span><br><span class="line">    left: 75%;</span><br><span class="line">    background: var(--penguin-skin, gray);</span><br><span class="line">    width: 30%;</span><br><span class="line">    height: 60%;</span><br><span class="line">    border-radius: 30% 30% 30% 120%;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    z-index: -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(-80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-feet &#123;</span><br><span class="line">    top: 85%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 30%;</span><br><span class="line">    border-radius: 50% 50% 50% 50%;</span><br><span class="line">    transform: rotate(80deg);</span><br><span class="line">    z-index: -2222;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 60%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .left-eye &#123;</span><br><span class="line">    top: 45%;</span><br><span class="line">    left: 25%;</span><br><span class="line">    background: black;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 17%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .sparkle &#123;</span><br><span class="line">    top: 25%;</span><br><span class="line">    left:-23%;</span><br><span class="line">    background: white;</span><br><span class="line">    width: 150%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-right &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 15%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .blush-left &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 70%;</span><br><span class="line">    background: pink;</span><br><span class="line">    width: 15%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-top &#123;</span><br><span class="line">    top: 60%;</span><br><span class="line">    left: 40%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .beak-bottom &#123;</span><br><span class="line">    top: 65%;</span><br><span class="line">    left: 42%;</span><br><span class="line">    background: var(--penguin-beak, orange);</span><br><span class="line">    width: 16%;</span><br><span class="line">    height: 10%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    background:#c6faf1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .penguin * &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;penguin&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-bottom&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-feet&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;penguin-top&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;right-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-cheek&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;belly&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;left-eye&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sparkle&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-right&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;blush-left&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-top&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;beak-bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基础</title>
      <link href="/2024/07/10/HTML5%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/07/10/HTML5%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><strong>HTML</strong>(超文本标记语言)是一种相当简单的、由不同元素组成的标记语言，它可以被应用于文本片段，使文本在文档中具有不同的含义HTML是构建网页的基础，本课程将引导您深入了解 HTML 的结构和标签，让您能够轻松创建包括标题、段落、表格、表单等在内的各种网页元素。无论您是想要制作个人网站、博客，还是企业网站，HTML 都是不可或缺的一环。</p><h1 id="HTML初认识"><a href="#HTML初认识" class="headerlink" title="HTML初认识"></a>HTML初认识</h1><p>HTML是一门什么样的语言：</p><p>​ HTML中文全名叫做<strong>“超文本标记语言”</strong>。超文本的意思就是不止是文本，还可以包含图片，链接，音乐，甚至程序等非文字元素。</p><p>​ 本质上来看，HTML其实和我们日常交流使用的语言没什么两样，不同在于自然语言“是用于人与人之间的交流，而HTML则是用于人与浏览器之间的交流。</p><p>​ 要想让浏览器按照我们的意愿展示出我们期望的酷炫效果，我们就得学会用HTML语言来告诉浏览器，在页面的哪个位置，放置一个什么控件。至于这个控件长啥样，具体有什么些功能，则分别需要CSS和JavaScript来实现。</p><p>HTML结构：</p><p>​ 标准的超文本标记语言文件都具有一个基本的整体结构，标记一般都是成对出现 (部分标记除外例如:<br>)，即超文本标记语言文件的开头与结尾标志和超文本标记语言的头部与实体两大部 分。有二个双标记符用于页面整体结构的确认。</p><p>​ 一个标准的HTML文档大概写成如下样式：</p><pre><code>&lt;!DOCTYPE html&gt;  &lt;html&gt;  &lt;head&gt;     &lt;meta charset=&quot;utf-8&quot;&gt;     &lt;title&gt;网页标题&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;     &lt;h1&gt;页面内容&lt;/h1&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>​ 标记符&lt;html&gt;，说明该文件是用超文本标记语言（本标签的中文全称）来描述的，而&lt;&#x2F;html&gt;,则表示该文件的结尾，它们是超文本标记语言文件的开始标记和结尾标记。</p><p>​ &lt;head&gt;和&lt;&#x2F;head&gt;这2个标记符分别表示头部信息的开始和结尾。头部中包含的标记是页面的标题、序言、说明等内容，它本身不作为内容来显示，但影响网页只显示的效果。</p><p>​ &lt;body&gt;&#96;&#96;&lt;&#x2F;body&gt;网页中显示的实际内容均包含在这2个正文标记符之间。</p><p>##HTML dom树：</p><p>​ HTML DOM（Document Object Model）树是指HTML文档的对象模型，它在内存中被创建以便对文档进行动态操作。DOM 提供了一种结构化的方式，将 HTML 文档表示为树状结构，其中每个 HTML 元素都被表示为树中的一个节点。</p><p>​ HTML DOM 树的主要组成部分：</p><p>文档节点（Document Node）： 整个 HTML 文档是根节点，它包含了所有的 HTML 元素。<br>元素节点（Element Node）： HTML 文档中的每个 HTML 元素都被表示为一个元素节点，例如&lt;p&gt;、&lt;div&gt;、&lt;a&gt; 等。</p><p>文本节点（Text Node）： HTML 文档中的文本内容被表示为文本节点，例如元素内的文本、属性值等。<br>属性节点（Attribute Node）： HTML 元素的属性被表示为属性节点，例如元素的 id、class、src 等。</p><p>DOM 树的结构反映了 HTML 文档的层次结构。每个元素节点都有父节点和可能的子节点。根据 HTML 文档的嵌套关系，DOM 树的节点之间形成了父子关系、兄弟关系等。</p><h1 id="HTML-标题元素"><a href="#HTML-标题元素" class="headerlink" title="HTML 标题元素"></a>HTML 标题元素</h1><p>标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 标签进行定义的。</p><p>h1定义最大的标题，h6定义最小标题。<br>浏览器会自动地在标题的前后添加空行。</p><h1 id="HTML-文本元素"><a href="#HTML-文本元素" class="headerlink" title="HTML 文本元素"></a>HTML 文本元素</h1><p><em><strong>HTML 段落文本&lt;p&gt;</strong></em></p><p>段落是通过 <em><strong>&lt;p&gt;</strong></em> 标签定义的。<br>浏览器会自动地在段落的前后添加空行。</p><p><em><strong>HTML 文本格式化</strong></em></p><p>加粗文本使用***&lt;b&gt;***标签展示</p><p>斜体文本使用***&lt;i&gt;***标签展示</p><p>展示下标用***&lt;sub&gt;<em><strong>标签，上标用</strong></em>&lt;sup&gt;***标签</p><h1 id="HTML-链接元素"><a href="#HTML-链接元素" class="headerlink" title="HTML 链接元素"></a>HTML 链接元素</h1><p>HTML链接&lt;a&gt;：</p><p>HTML 使用超级链接与网络上的另一个文档相连。</p><p>HTML中的链接是一种用于在不同网页之间导航的元素。</p><p>链接通常用于将一个网页与另一个网页或资源（如文档、图像、音频文件等）相关联。<br>链接允许用户在浏览网页时单击文本或图像来跳转到其他位置，从而实现网页之间的互联。<br>HTML链接语法：</p><p>href：指定链接目标的URL</p><p>target（可选）：指定链接如何在浏览器中打开。常见的值包括 _blank（在新标签或窗口中打开链接）和 _self（在当前标签或窗口中打开链接）。</p><p>title（可选）：提供链接的额外信息，通常在鼠标悬停在链接上时显示为工具提示。</p><p>rel（可选）：指定与链接目标的关系，如 nofollow、noopener 等。</p><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>在第一个a标签内，实现点击跳转到重庆邮电大学官网(<a href="https://www.cqupt.edu.cn/)%E3%80%82%E5%B9%B6%E4%B8%94%E4%BB%A5%E6%96%B0%E6%A0%87%E7%AD%BE%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E3%80%82">https://www.cqupt.edu.cn/)。并且以新标签的方式打开。</a></p><p>在最后一个a标签内实现<em><strong>锚点链接</strong></em>，使其点击后，移动到id为tips的标签位置。</p><pre><code>&lt;html&gt;  &lt;body&gt;    &lt;a href=&quot;https://www.cqupt.edu.cn/&quot; id=&quot;tips&quot; target=&quot;_blank&quot;&gt;链接 - 重庆邮电大学&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;#tips&quot;&gt;跳转顶部&lt;/a&gt;   &lt;/body&gt;&lt;/html&gt;</code></pre><hr><h1 id="HTML的注释"><a href="#HTML的注释" class="headerlink" title="HTML的注释"></a>HTML的注释</h1><p>在 HTML 中，注释的开始标签是 &lt;!--，结束标签是 --&gt;。</p><h1 id="HTML-内联样式"><a href="#HTML-内联样式" class="headerlink" title="HTML 内联样式"></a>HTML 内联样式</h1><p>HTML CSS：通过设置style属性来设置标签的样式</p><p>常用CSS样式：</p><p>背景颜色：background-color</p><p>字体颜色 ，字体大小：color（颜色），和font-size（字体大小）</p><p>文本对齐方式：text-align（left,center,right）</p><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>将div背景颜色设为：rgb(112, 112, 129)<br>将h1文本颜色变为白色(white)，并且文本居中<br>将p文本字体大小设置为20px，字体颜色设置为十六进制颜色#CCFFFF</p><pre><code>&lt;html&gt;  &lt;body&gt;    &lt;div style=&quot;width: 400px;height: 400px;background-color:rgb(112, 112, 129)&quot;;&gt;      &lt;h1 style=&quot;color:white;text-align:center&quot;&gt;重庆邮电大学&lt;/h1&gt;      &lt;p style=&quot;text-indent: 20px;color:#CCFFFF;font-size:20px&quot;&gt;      重庆邮电大学（Chongqing University of Posts and Telecommunications）简称“重邮”，坐落于直辖市——重庆市，是中华人民共和国工业和信息化部与重庆市人民政府共建的教学研究型大学，入选国家“中西部高校基础能力建设工程”、国家“卓越工程师教育培养计划”，是国家“2011计划”核心协同高校、中国政府奖学金来华留学生接收院校、国家大学生文化素质教育基地、国家布点设立并重点建设的四所邮电高校之一，重庆市一流学科建设高校，CDIO工程教育联盟成员单位。      &lt;/p&gt;    &lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><hr><h1 id="HTML-img元素"><a href="#HTML-img元素" class="headerlink" title="HTML img元素"></a>HTML img元素</h1><p>HTML图像：图像标签（ <img>）和源属性（Src）常用CSS样式：</p><p>在 HTML 中，图像由<img> 标签定义。</p><p>要在页面上显示图像，你需要使用源属性（src）。</p><p>alt 属性用来为图像定义一串预备的可替换的文本。</p><p>height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。</p><p>style属性中可以设置填充模式()：</p><p>fill：默认值。图片将完全填充容器，可能会被拉伸或挤压，以适应容器的尺寸。</p><p>contain：图片将在容器内等比例缩放，以确保整个图片都能完全显示在容器内，可能会在容器内留有空白。</p><p>cover：图片将在容器内等比例缩放，以确保整个容器都被图片覆盖，可能会裁切图片。</p><p>none：图片将保持原始尺寸，不会进行缩放或拉伸，可能会超出容器。</p><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>将img的图片源设置为<a href="https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg">https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg</a></p><p>当图片加载失败时，显示为cat</p><p>将img大小撑满整个容器，设置为100%</p><p>自行设置object-fit来填充图片</p><pre><code>&lt;html&gt;  &lt;style&gt;      div&#123;          width: 150px;          height: 200px;          border: 1px solid red;      &#125;  &lt;/style&gt;  &lt;body&gt;    &lt;div&gt;       &lt;img src=&quot;https://s3.amazonaws.com/freecodecamp/relaxing-cat.jpg&quot; alt=&quot;cat&quot;;            width= 100%;           height= 100%;           style=&quot;object-fit:cover;&quot;/&gt;           &lt;/div&gt;   &lt;/body&gt;&lt;/html&gt;</code></pre><hr><h1 id="HTML-Table元素"><a href="#HTML-Table元素" class="headerlink" title="HTML Table元素"></a>HTML Table元素</h1><p>HTML表格：是一种用于展示结构化数据的标记语言元素。由</p><ul><li>tr：tr 是 table row 的缩写，表示表格的一行。</li><li>td：td 是 table data 的缩写，表示表格的数据单元格。</li><li>th：th 是 table header的缩写，表示表格的表头单元格。</li><li>caption：给table设置一个标题</li><li>给table设置border属性，表格将显示边框<br>标签来定义。</li><li>给table设置cellpadding属性，创建单元格内容与其边框之间的空白。</li><li>给table设置cellspacing属性，增加单元格之间的距离</li></ul><p>以下是一个代码演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;列标题1&lt;/th&gt;</span><br><span class="line">&lt;th&gt;列标题2&lt;/th&gt;</span><br><span class="line">&lt;th&gt;列标题3&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;行1，列1&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行1，列2&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行1，列3&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;行2，列1&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行2，列2&lt;/td&gt;</span><br><span class="line">&lt;td&gt;行2，列3&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>将下列数据填入到table标签中</p><p>图论以及应用 王晓 星期一 7-8</p><p>矩阵分析 刘军 星期二 1-3</p><p>机器学习 赵易 星期一 4-5</p><p>给表格设置一个宽度为1的边框</p><p>给表格设置一个标题：课表查询</p><p>让单元格内容与其边框之间的距离为10</p><p>让单元格之间的距离为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;table border=&quot;1&quot; cellpadding=&quot;10&quot; cellspacing=&quot;1&quot;&gt;</span><br><span class="line">        &lt;caption align=&quot;top&quot;&gt;课表查询&lt;/caption&gt; </span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;科目&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;任课老师&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;上课时间&lt;/th&gt;</span><br><span class="line">                &lt;th&gt;节数&lt;/th&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;图论以及应用&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;王晓&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;星期一&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;7-8&lt;/td&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;矩阵分析&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;刘军&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;星期二&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;1-3&lt;/td&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">          &lt;td&gt;机器学习&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;赵易&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;星期一&lt;/td&gt;</span><br><span class="line">          &lt;td&gt;4-5&lt;/td&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="HTML-有序列表与无序列表"><a href="#HTML-有序列表与无序列表" class="headerlink" title="HTML 有序列表与无序列表"></a>HTML 有序列表与无序列表</h1><p>HTML列表：HTML 支持有序、无序和定义列表。</p><p>HTML无序列表：使用ul和li标签来定义</p><p>HTML 有序列表：使用ol和li标签来定义</p><p>列表也支持嵌套使用</p><p>无序列表可以通过style中的list-style-type来设置样式</p><ul><li>disc：原点样式</li><li>circle：空心圈样式</li><li>square：正方形样式</li></ul><p>有序列表可以直接使用 type 属性来设置样式</p><ul><li>A：大写字母列表</li><li>a：小写字母列表</li><li>I：罗马数字列表</li><li>i：小写罗马数字列表</li></ul><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>定义一个有序列表来展示把大象装入冰箱的三个步骤： 打开冰箱门 -&gt; 放入大象 -&gt; 关上冰箱门</p><p>定义一个无序列表来展示几种食物<br>Coffee</p><p>Tea，Tea中又包含Black tea、Green tea</p><p>Milk<br>给无序列表和有序列表设置一个你喜欢的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h3&gt;如何把大象装进冰箱&lt;/h3&gt;</span><br><span class="line">    &lt;ol  type=&quot;A&quot;&gt;</span><br><span class="line">      &lt;li&gt;打开冰箱门&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;放入大象&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;关上冰箱门&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;h3&gt;食物分类&lt;/h3&gt;</span><br><span class="line">    &lt;ul style=&quot;list-style-type: square;&quot;&gt;</span><br><span class="line">      &lt;li&gt;Coffee&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Tea</span><br><span class="line">         &lt;ul style=&quot;list-style-type: circle;&quot;&gt;</span><br><span class="line">           &lt;li&gt;Black tea&lt;/li&gt;</span><br><span class="line">           &lt;li&gt;Green tea&lt;/li&gt;</span><br><span class="line">         &lt;/ul&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">      &lt;li&gt;Milk&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="HTML-区块元素与内联元素"><a href="#HTML-区块元素与内联元素" class="headerlink" title="HTML 区块元素与内联元素"></a>HTML 区块元素与内联元素</h1><p>HTML区块元素：</p><p>大多数 HTML 元素被定义为块级元素或内联元素。</p><p>块级元素在浏览器显示时，通常会以新行来开始。</p><p>内联元素在显示时通常不会以新行开始。</p><ul><li><p>HTML &lt;div&gt; 元素是块级元素，它可用于组合其他 HTML 元素的容器。</p></li><li><p>HTML&lt;span&gt;元素是内联元素，可用作文本的容器</p></li><li><p>float属性：通过浮动可以使一个元素向父元素的左侧或右侧移动。</p></li></ul><hr><p><em><strong>eg:</strong></em></p><p>任务：</p><p>使用浮动样式，使得mean和content在同一行显示。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .contain&#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 400px;</span><br><span class="line">    &#125;</span><br><span class="line">    .header&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    .mean&#123;</span><br><span class="line">        width: 20%;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: bisque;</span><br><span class="line">    &#125;</span><br><span class="line">    .content&#123;</span><br><span class="line">        width: 80%;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: rgb(199, 199, 199);</span><br><span class="line">    &#125;</span><br><span class="line">    .footer&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    .float-div &#123;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;contain&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;header&quot;&gt;标题栏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;mean float-div&quot; style=&quot;&quot;&gt;菜单栏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;content float-div&quot; style=&quot;&quot;&gt;内容栏&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot; style=&quot;clear:both;&quot;&gt;底部栏&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML表单元素：登陆界面"><a href="#HTML表单元素：登陆界面" class="headerlink" title="HTML表单元素：登陆界面"></a>HTML表单元素：登陆界面</h1><p>HTML表单元素：HTML 表单用于收集用户的输入信息，通常包含各种输入字段、复选框、单选按钮、下拉列表等元素。</p><ul><li><p>&lt;form&gt; 元素用于创建表单</p><ul><li>action 属性定义了表单数据提交的目标 URL</li><li>method 属性定义了提交数据的 HTTP 方法(通常有get、post等)</li></ul></li><li><p>&lt;label&gt; 元素用于为表单元素添加标签。</p></li><li><p>&lt;input&gt; 元素是最常用的表单元素之一，它可以创建文本输入框、密码框、单选按钮、复选框等。</p></li><li><p>type 属性定义了输入框的类型，id 属性用于关联 <label> 元素，name 属性用于标识表单字段,required可以指定当前输入是否必填。常见的type有以下：</label></p></li><li><p>text：文本域，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p></li><li><p>password：密码字段。</p></li><li><p>radio：单选按钮。</p></li><li><p>checkbox：复选框</p></li><li><p>Submit：提交按钮，当用户单击确认按钮时，表单的内容会被传送到action 属性指定的服务器。</p></li><li><p>&lt;select&gt; 元素用于创建下拉列表，而 &lt;option&gt; 元素用于定义下拉列表中的选项。</p></li></ul><hr><p><em><strong>eg:</strong></em></p><p>任务：完成一个账号登录界面</p><p>首先创建一个form 表单， action 设置# ，提交方式为post,</p><p>在form表单中，使用label 创建一个名为用户名 标签；</p><p>创建一个类型为text 的 input 输入框，</p><p>id 属性设置为username，name 属性设置为username；</p><p>将label 标签与input 标签关联起来。</p><p>使用label 创建一个名为密码 标签；</p><p>创建一个类型为password 的 input 输入框， id 属性设置为password,name 属性设置为password ；</p><p>将label 标签与input 标签关联起来,</p><p>创建一个value 为登录的提交按钮 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;loginDiv&quot;&gt;</span><br><span class="line">    &lt;form action=&quot;#&quot; method=&quot;post&quot; id=&quot;form&quot;&gt;</span><br><span class="line">        &lt;h1 id=&quot;loginMsg&quot;&gt;用户登录&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt; </span><br><span class="line">          &lt;label for=&quot;username&quot;&gt;用户名:&lt;/label&gt;</span><br><span class="line">          &lt;input id=&quot;username&quot; name=&quot;username&quot; type=&quot;text&quot; &gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;label for=&quot;password&quot;&gt;密码:&lt;/label&gt;</span><br><span class="line">          &lt;input id=&quot;password&quot; name=&quot;password&quot; type=&quot;password&quot; autocomplete=&quot;off&quot;&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">              </span><br><span class="line">          </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="HTML表单元素：登陆界面-1"><a href="#HTML表单元素：登陆界面-1" class="headerlink" title="HTML表单元素：登陆界面"></a>HTML表单元素：登陆界面</h1><p><strong>任务：</strong>按照顺序完成一个选课的表单界面</p><p>新增一个form表单，action设为#，提交方式为get。</p><p>新增一个名为课程名称的label，关联一个id为course，name为course的input的文本输入框。</p><p>新增一个名为上课地点的label，关联一个id为place，name为place的input的select下拉框。select中包含两个选项：江南校区、南山校区。</p><p>新增一个名为授课方式的label。在授课方式下方新增两个name为mode的单选框。</p><p>第一个单选框id和value都为online，再跟上一个名为线上的label来与单选框关联。默认选中线上。</p><p>第二个单选框id和value都为Offline，再跟上一个名为线下的label来与单选框关联。<br>新增一个id和name都为exam的复选框，默认选中。在后面新增一个名为期末考试的label与复选框相关联。</p><p>新增一个value为提交的submit按钮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;#&quot; method=&quot;get&quot;&gt;</span><br><span class="line">      </span><br><span class="line">     &lt;br&gt;</span><br><span class="line">       &lt;label for=&quot;course&quot;&gt;课程名称&lt;/label&gt;</span><br><span class="line">       &lt;input id=&quot;course&quot; name=&quot;course&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">       &lt;label for=&quot;place&quot;&gt;上课地点&lt;/label&gt;</span><br><span class="line">    &lt;select id=&quot;place&quot; name=&quot;place&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;江南校区&quot;&gt;江南校区&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;南山校区&quot;&gt;南山校区&lt;/option&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"> &lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;label&gt;授课方式&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;online&quot; name=&quot;mode&quot; value=&quot;online&quot; checked&gt;</span><br><span class="line">    &lt;label for=&quot;online&quot;&gt;线上&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;Offline&quot; name=&quot;mode&quot; value=&quot;Offline&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;Offline&quot;&gt;女&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"> &lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;checkbox&quot; id=&quot;exam&quot; name=&quot;exam&quot; checked&gt;</span><br><span class="line">    &lt;label for=&quot;exam&quot;&gt;期末考试&lt;/label&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">     &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WPS_学习记录</title>
      <link href="/2024/07/10/WPS_%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/10/WPS_%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><em><strong>注：本文仅做个人学习记录，所记为简记，存在不足待修改</strong></em></p><h1 id="快捷键系列"><a href="#快捷键系列" class="headerlink" title="快捷键系列"></a>快捷键系列</h1><p>Ctrl + C &#x3D; 复制<br>Ctrl + V &#x3D; 粘贴<br>Ctrl + N &#x3D; 新建<br>Ctrl + F &#x3D; 查找<br>Ctrl + H &#x3D; 替换<br>Ctrl + P &#x3D; 打印<br>Ctrl + Enter &#x3D; 分页<br>Ctrl + Shift + C &#x3D; 格式刷;Ctrl + Shift + V &#x3D; 格式刷<br>Ctrl + P &#x3D; 打印</p><h1 id="文字系列"><a href="#文字系列" class="headerlink" title="文字系列"></a>文字系列</h1><h2 id="WPS文字新手入门课"><a href="#WPS文字新手入门课" class="headerlink" title="WPS文字新手入门课"></a><a href="https://www.wps.cn/learning/course/detail/id/13920?sid=152">WPS文字新手入门课</a></h2><h3 id="文档的基础编辑"><a href="#文档的基础编辑" class="headerlink" title="文档的基础编辑"></a>文档的基础编辑</h3><ul><li>WPS 文字界面布局</li><li>字符间距设置</li><li>行间距设置</li><li>制表位（快速对齐文字）</li><li>开始-格式刷（单击，双击）</li><li>回车符（Enter）:替换它时特殊格式选段落标记;换行符（Shift + Enter）:替换它时特殊格式选手动换行符</li><li>插入（注意光标位置）-空白页-（横向，竖向）</li><li>插入-分页符&#x2F;下一页分节符</li><li>章节-新增节-下一页分节符（将文档分为不同模块，方便对页面单独设置）  注：页面-章节导航-下一页分页符就是那个+号</li><li>页面-章节导航-目录（可自动生成）&#x2F;章节&#x2F;书签&#x2F;查找和替换</li><li>分节符-下一页分节符&#x2F;连续分节符&#x2F;偶数页分节符&#x2F;奇数页分节符</li><li>快速排版（开始-排版）</li></ul><h3 id="文本样式与编号"><a href="#文本样式与编号" class="headerlink" title="文本样式与编号"></a>文本样式与编号</h3><h3 id="页眉页脚与目录"><a href="#页眉页脚与目录" class="headerlink" title="页眉页脚与目录"></a>页眉页脚与目录</h3><h3 id="文档审阅与引用"><a href="#文档审阅与引用" class="headerlink" title="文档审阅与引用"></a>文档审阅与引用</h3><h3 id="页面设置与打印"><a href="#页面设置与打印" class="headerlink" title="页面设置与打印"></a>页面设置与打印</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learn_MarkDown</title>
      <link href="/2024/07/08/MarkDown_Learn/"/>
      <url>/2024/07/08/MarkDown_Learn/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown官网下载链接"><a href="#MarkDown官网下载链接" class="headerlink" title="MarkDown官网下载链接"></a>MarkDown官网下载链接</h1><p><a href="https://www.cnblogs.com/huanhao/p/hexobase.html">点这里~</a><br>注意啦~注意啦~如果出现渲染错误弹窗，<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe">安装插件</a></p><h1 id="MarkDown官方教程链接"><a href="#MarkDown官方教程链接" class="headerlink" title="MarkDown官方教程链接"></a>MarkDown官方教程链接</h1><p><a href="https://markdown.com.cn/">官方教程链接</a></p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><p>n个 # 就是第n级标题</p><p>另外：可以在文本下方添加任意数量的 &#x3D;&#x3D; 号来标识一级标题，或者 – 号来标识二级标题</p><p>注：为了兼容不同MarkDown应用程序，用一个空格在 # 和标题之间进行分隔</p><h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><p>要创建段落，用空白行将文本进行分隔</p><p>注：不要用空格（spaces）或制表符（ tabs）缩进段落</p><h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车键<br>或在行尾添加 HTML 的 &lt;br&gt; 标签来实现换行</p><h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>要<strong>加粗</strong>文本，请在文本前后各添加两个星号**或两个下划线__</p><p>注：为了兼容性考虑，在单词或短语中间部分加粗的话，用星号，不用下划线</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>用<em>斜体</em>显示文本，请在文本前后添加一个星号*或下划线_</p><p>注：为了兼容性考虑，在单词或短语中间部分显示斜体的话，用星号，不用下划线</p><h3 id="加粗-斜体"><a href="#加粗-斜体" class="headerlink" title="加粗&amp;斜体"></a>加粗&amp;斜体</h3><p>同时用<strong>粗体</strong>和<em>斜体</em>突出显示文本，请在文本前后各添加三个星号***或下划线___</p><p>注：为了兼容性考虑，在单词或短语中间部分同时加粗和显示斜体的话，用星号，不用下划线</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>为了方便都用星号就是了，一星*斜体，二星**加粗，三星***加粗与斜体</p><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><blockquote><p>要创建块引用，请在段落前添加一个 &gt; 符号  </p><blockquote><p>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号</p></blockquote></blockquote><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点.  </li><li>注：数字不必按数学顺序排列，但是列表应当以数字 1 起始</li><li>注：英文.与文本之间要有一个空格</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>要创建无序列表，在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。  </li><li>缩进一个或多个列表项可创建嵌套列表</li></ul><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><p>要将单词或短语表示为代码，请将其包裹在反引号 (&#96;) 中</p><p>注：转义反引号<br>如果要表示为代码的单词或短语中包含一个或多个反引号，则可以通过将单词或短语包裹在双反引号(&#96;&#96;)中</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>将代码块的每一行缩进至少四个空格或一个制表符</p><p>注： 要创建不用缩进的代码块，请使用 <a href="https://markdown.com.cn/extended-syntax/fenced-code-blocks.html">围栏式代码块</a>，即在代码块之前和之后的行上使用三个反引号(&#96;&#96;&#96;）或三个波浪号（~~~）</p><h2 id="分隔线语法"><a href="#分隔线语法" class="headerlink" title="分隔线语法"></a>分隔线语法</h2><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容</p><hr><p>注：为了兼容性，请在分隔线的前后均添加空白行</p><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>超链接Markdown语法代码：[超链接显示名](超链接地址 “超链接title”)</p><p>注：链接title是当鼠标悬停在链接上时会出现的文字<br>这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以<strong>空格</strong>分隔</p><h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接<br><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:&#49;&#x37;&#52;&#50;&#53;&#52;&#52;&#x33;&#54;&#56;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d;">&#49;&#x37;&#52;&#50;&#53;&#52;&#52;&#x33;&#54;&#56;&#64;&#113;&#113;&#46;&#x63;&#111;&#x6d;</a></p><p>另外：带格式化的链接：  </p><ol><li>强调链接，在链接语法前后增加星号  </li><li>要将链接表示为代码，在方括号中添加反引号</li></ol><p><a href="https://markdown.com.cn/basic-syntax/links.html">引用类型链接</a></p><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><p>插入图片Markdown语法代码：![图片alt](图片链接 “图片title”)</p><p>注：图片title是当鼠标悬停在链接上时会出现的文字 ，可选填<br>可能用到的工具：<a href="https://smms.app/">图片URL生成</a></p><p>和链接语法比起来前面<strong>多了一个！</strong></p><h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 <strong>\</strong></p><p>要显示转义字符\的话，就在\前再加一个\</p><h2 id="内嵌HTML标签"><a href="#内嵌HTML标签" class="headerlink" title="内嵌HTML标签"></a>内嵌HTML标签</h2><p><a href="https://markdown.com.cn/basic-syntax/htmls.html">内嵌HTML标签</a></p><h1 id="在线编辑器"><a href="#在线编辑器" class="headerlink" title="在线编辑器"></a>在线编辑器</h1><p><a href="https://markdown.com.cn/editor/">在线编辑器</a></p><h1 id="一些工具链接"><a href="#一些工具链接" class="headerlink" title="一些工具链接"></a>一些工具链接</h1><p><a href="https://smms.app/">图片URL生成</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/07/0/"/>
      <url>/2024/07/07/0/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello 银枝枝~</title>
      <link href="/2024/07/05/hello-world/"/>
      <url>/2024/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2024/07/07/t9RbOso3Si21eKz.jpg" alt="银枝枝~" title="银枝枝~"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
